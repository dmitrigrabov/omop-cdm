openapi: 3.0.0
info:
  title: OMOP CDM v5.4 API
  description: |-
    OMOP Common Data Model (CDM) v5.4 RESTful API

    This API provides programmatic access to the OMOP Common Data Model v5.4,
    which is a standardized data model for organizing and storing observational
    health data. The OMOP CDM enables systematic analysis of disparate
    observational databases and is the foundation for the OHDSI collaborative.

    The API is organized into the following resource groups:
    - Clinical Data: Person-level clinical observations and events
    - Health System: Infrastructure and organizational entities
    - Derived Elements: Computed eras and episodes
    - Vocabulary: Standardized medical terminologies and concepts
    - Metadata: Information about the CDM instance
    - Results: Cohort definitions and analysis results

    For more information about the OMOP CDM, visit:
    https://github.com/OHDSI/CommonDataModel
  version: 0.0.0
tags:
  - name: Clinical - Persons
  - name: Clinical - ObservationPeriods
  - name: Clinical - VisitOccurrences
  - name: Clinical - VisitDetails
  - name: Clinical - ConditionOccurrences
  - name: Clinical - DrugExposures
  - name: Clinical - ProcedureOccurrences
  - name: Clinical - DeviceExposures
  - name: Clinical - Measurements
  - name: Clinical - Observations
  - name: Clinical - Deaths
  - name: Clinical - Notes
  - name: Clinical - NoteNlps
  - name: Clinical - Specimens
  - name: Health System - Locations
  - name: Health System - CareSites
  - name: Health System - Providers
  - name: Health System - PayerPlanPeriods
  - name: Health System - Costs
  - name: Derived - DrugEras
  - name: Derived - DoseEras
  - name: Derived - ConditionEras
  - name: Derived - Episodes
  - name: Derived - EpisodeEvents
  - name: Metadata - Metadatas
  - name: Metadata - CdmSources
  - name: Vocabulary - Concepts
  - name: Vocabulary - Vocabularys
  - name: Vocabulary - Domains
  - name: Vocabulary - ConceptClasss
  - name: Vocabulary - ConceptRelationships
  - name: Vocabulary - Relationships
  - name: Vocabulary - ConceptSynonyms
  - name: Vocabulary - ConceptAncestors
  - name: Vocabulary - SourceToConceptMaps
  - name: Vocabulary - DrugStrengths
  - name: Results - Cohorts
  - name: Results - CohortDefinitions
  - name: Results - FactRelationships
paths:
  /care-sites:
    get:
      operationId: CareSites_list
      summary: List all care-sites
      description: Returns a paginated list of CareSite records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Healthsystem.CareSiteQueryParams.place_of_service_concept_id'
        - $ref: '#/components/parameters/Healthsystem.CareSiteQueryParams.location_id'
        - $ref: '#/components/parameters/Healthsystem.CareSiteQueryParams.sort_by'
        - $ref: '#/components/parameters/Healthsystem.CareSiteQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.CareSiteList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - CareSites
    post:
      operationId: CareSites_create
      summary: Create a new care-site
      description: Create a new CareSite record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.CareSite'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - CareSites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.CareSiteCreate'
        description: CareSite data to create
  /care-sites/{id}:
    get:
      operationId: CareSites_read
      summary: Get care-site by ID
      description: Retrieve a single CareSite record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique care-site identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.CareSite'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - CareSites
    put:
      operationId: CareSites_update
      summary: Update care-site (full replacement)
      description: Replace all fields of an existing CareSite record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique care-site identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.CareSite'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - CareSites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.CareSiteCreate'
        description: Complete care-site data
    patch:
      operationId: CareSites_patch
      summary: Update care-site (partial)
      description: Update specific fields of an existing CareSite record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique care-site identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.CareSite'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - CareSites
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.CareSiteUpdate'
        description: Fields to update
    delete:
      operationId: CareSites_delete
      summary: Delete care-site
      description: Delete a CareSite record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique care-site identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - CareSites
  /cdm-sources:
    get:
      operationId: CdmSources_list
      summary: List all cdm-sources
      description: Returns a paginated list of CdmSource records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Metadata.CdmSourceQueryParams.cdm_version_concept_id'
        - $ref: '#/components/parameters/Metadata.CdmSourceQueryParams.sort_by'
        - $ref: '#/components/parameters/Metadata.CdmSourceQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.CdmSourceList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - CdmSources
    post:
      operationId: CdmSources_create
      summary: Create a new cdm-source
      description: Create a new CdmSource record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.CdmSource'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - CdmSources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata.CdmSourceCreate'
        description: CdmSource data to create
  /cdm-sources/{id}:
    get:
      operationId: CdmSources_read
      summary: Get cdm-source by ID
      description: Retrieve a single CdmSource record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cdm-source identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.CdmSource'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - CdmSources
    put:
      operationId: CdmSources_update
      summary: Update cdm-source (full replacement)
      description: Replace all fields of an existing CdmSource record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cdm-source identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.CdmSource'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - CdmSources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata.CdmSourceCreate'
        description: Complete cdm-source data
    patch:
      operationId: CdmSources_patch
      summary: Update cdm-source (partial)
      description: Update specific fields of an existing CdmSource record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cdm-source identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.CdmSource'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - CdmSources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata.CdmSourceUpdate'
        description: Fields to update
    delete:
      operationId: CdmSources_delete
      summary: Delete cdm-source
      description: Delete a CdmSource record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cdm-source identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - CdmSources
  /cohort-definitions:
    get:
      operationId: CohortDefinitions_list
      summary: List all cohort-definitions
      description: Returns a paginated list of CohortDefinition records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Results.CohortDefinitionQueryParams.definition_type_concept_id'
        - $ref: '#/components/parameters/Results.CohortDefinitionQueryParams.subject_concept_id'
        - $ref: '#/components/parameters/Results.CohortDefinitionQueryParams.sort_by'
        - $ref: '#/components/parameters/Results.CohortDefinitionQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.CohortDefinitionList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - CohortDefinitions
    post:
      operationId: CohortDefinitions_create
      summary: Create a new cohort-definition
      description: Create a new CohortDefinition record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.CohortDefinition'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - CohortDefinitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.CohortDefinitionCreate'
        description: CohortDefinition data to create
  /cohort-definitions/{id}:
    get:
      operationId: CohortDefinitions_read
      summary: Get cohort-definition by ID
      description: Retrieve a single CohortDefinition record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort-definition identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.CohortDefinition'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - CohortDefinitions
    put:
      operationId: CohortDefinitions_update
      summary: Update cohort-definition (full replacement)
      description: Replace all fields of an existing CohortDefinition record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort-definition identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.CohortDefinition'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - CohortDefinitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.CohortDefinitionCreate'
        description: Complete cohort-definition data
    patch:
      operationId: CohortDefinitions_patch
      summary: Update cohort-definition (partial)
      description: Update specific fields of an existing CohortDefinition record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort-definition identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.CohortDefinition'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - CohortDefinitions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.CohortDefinitionUpdate'
        description: Fields to update
    delete:
      operationId: CohortDefinitions_delete
      summary: Delete cohort-definition
      description: Delete a CohortDefinition record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort-definition identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - CohortDefinitions
  /cohorts:
    get:
      operationId: Cohorts_list
      summary: List all cohorts
      description: Returns a paginated list of Cohort records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Results.CohortQueryParams.sort_by'
        - $ref: '#/components/parameters/Results.CohortQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.CohortList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - Cohorts
    post:
      operationId: Cohorts_create
      summary: Create a new cohort
      description: Create a new Cohort record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.Cohort'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - Cohorts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.CohortCreate'
        description: Cohort data to create
  /cohorts/{id}:
    get:
      operationId: Cohorts_read
      summary: Get cohort by ID
      description: Retrieve a single Cohort record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.Cohort'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - Cohorts
    put:
      operationId: Cohorts_update
      summary: Update cohort (full replacement)
      description: Replace all fields of an existing Cohort record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.Cohort'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - Cohorts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.CohortCreate'
        description: Complete cohort data
    patch:
      operationId: Cohorts_patch
      summary: Update cohort (partial)
      description: Update specific fields of an existing Cohort record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.Cohort'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - Cohorts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.CohortUpdate'
        description: Fields to update
    delete:
      operationId: Cohorts_delete
      summary: Delete cohort
      description: Delete a Cohort record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cohort identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - Cohorts
  /concept-ancestors:
    get:
      operationId: ConceptAncestors_list
      summary: List all concept-ancestors
      description: Returns a paginated list of ConceptAncestor records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.ConceptAncestorQueryParams.ancestor_concept_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptAncestorQueryParams.descendant_concept_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptAncestorQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.ConceptAncestorQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptAncestorList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptAncestors
    post:
      operationId: ConceptAncestors_create
      summary: Create a new concept-ancestor
      description: Create a new ConceptAncestor record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptAncestor'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptAncestors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptAncestorCreate'
        description: ConceptAncestor data to create
  /concept-ancestors/{id}:
    get:
      operationId: ConceptAncestors_read
      summary: Get concept-ancestor by ID
      description: Retrieve a single ConceptAncestor record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-ancestor identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptAncestor'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptAncestors
    put:
      operationId: ConceptAncestors_update
      summary: Update concept-ancestor (full replacement)
      description: Replace all fields of an existing ConceptAncestor record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-ancestor identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptAncestor'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptAncestors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptAncestorCreate'
        description: Complete concept-ancestor data
    patch:
      operationId: ConceptAncestors_patch
      summary: Update concept-ancestor (partial)
      description: Update specific fields of an existing ConceptAncestor record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-ancestor identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptAncestor'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptAncestors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptAncestorUpdate'
        description: Fields to update
    delete:
      operationId: ConceptAncestors_delete
      summary: Delete concept-ancestor
      description: Delete a ConceptAncestor record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-ancestor identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptAncestors
  /concept-classs:
    get:
      operationId: ConceptClasss_list
      summary: List all concept-classs
      description: Returns a paginated list of ConceptClass records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.ConceptClassQueryParams.concept_class_concept_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptClassQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.ConceptClassQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptClassList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptClasss
    post:
      operationId: ConceptClasss_create
      summary: Create a new concept-class
      description: Create a new ConceptClass record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptClass'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptClasss
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptClassCreate'
        description: ConceptClass data to create
  /concept-classs/{id}:
    get:
      operationId: ConceptClasss_read
      summary: Get concept-class by ID
      description: Retrieve a single ConceptClass record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-class identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptClass'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptClasss
    put:
      operationId: ConceptClasss_update
      summary: Update concept-class (full replacement)
      description: Replace all fields of an existing ConceptClass record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-class identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptClass'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptClasss
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptClassCreate'
        description: Complete concept-class data
    patch:
      operationId: ConceptClasss_patch
      summary: Update concept-class (partial)
      description: Update specific fields of an existing ConceptClass record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-class identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptClass'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptClasss
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptClassUpdate'
        description: Fields to update
    delete:
      operationId: ConceptClasss_delete
      summary: Delete concept-class
      description: Delete a ConceptClass record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-class identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptClasss
  /concept-relationships:
    get:
      operationId: ConceptRelationships_list
      summary: List all concept-relationships
      description: Returns a paginated list of ConceptRelationship records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.ConceptRelationshipQueryParams.relationship_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptRelationshipQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.ConceptRelationshipQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptRelationshipList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptRelationships
    post:
      operationId: ConceptRelationships_create
      summary: Create a new concept-relationship
      description: Create a new ConceptRelationship record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptRelationship'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptRelationshipCreate'
        description: ConceptRelationship data to create
  /concept-relationships/{id}:
    get:
      operationId: ConceptRelationships_read
      summary: Get concept-relationship by ID
      description: Retrieve a single ConceptRelationship record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptRelationship'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptRelationships
    put:
      operationId: ConceptRelationships_update
      summary: Update concept-relationship (full replacement)
      description: Replace all fields of an existing ConceptRelationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptRelationship'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptRelationshipCreate'
        description: Complete concept-relationship data
    patch:
      operationId: ConceptRelationships_patch
      summary: Update concept-relationship (partial)
      description: Update specific fields of an existing ConceptRelationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptRelationship'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptRelationshipUpdate'
        description: Fields to update
    delete:
      operationId: ConceptRelationships_delete
      summary: Delete concept-relationship
      description: Delete a ConceptRelationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-relationship identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptRelationships
  /concept-synonyms:
    get:
      operationId: ConceptSynonyms_list
      summary: List all concept-synonyms
      description: Returns a paginated list of ConceptSynonym records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.ConceptSynonymQueryParams.concept_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptSynonymQueryParams.language_concept_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptSynonymQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.ConceptSynonymQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptSynonymList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptSynonyms
    post:
      operationId: ConceptSynonyms_create
      summary: Create a new concept-synonym
      description: Create a new ConceptSynonym record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptSynonym'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptSynonyms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptSynonymCreate'
        description: ConceptSynonym data to create
  /concept-synonyms/{id}:
    get:
      operationId: ConceptSynonyms_read
      summary: Get concept-synonym by ID
      description: Retrieve a single ConceptSynonym record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-synonym identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptSynonym'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptSynonyms
    put:
      operationId: ConceptSynonyms_update
      summary: Update concept-synonym (full replacement)
      description: Replace all fields of an existing ConceptSynonym record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-synonym identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptSynonym'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptSynonyms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptSynonymCreate'
        description: Complete concept-synonym data
    patch:
      operationId: ConceptSynonyms_patch
      summary: Update concept-synonym (partial)
      description: Update specific fields of an existing ConceptSynonym record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-synonym identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptSynonym'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptSynonyms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptSynonymUpdate'
        description: Fields to update
    delete:
      operationId: ConceptSynonyms_delete
      summary: Delete concept-synonym
      description: Delete a ConceptSynonym record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept-synonym identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - ConceptSynonyms
  /concepts:
    get:
      operationId: Concepts_list
      summary: List all concepts
      description: Returns a paginated list of Concept records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.ConceptQueryParams.domain_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptQueryParams.vocabulary_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptQueryParams.concept_class_id'
        - $ref: '#/components/parameters/Vocabulary.ConceptQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.ConceptQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.ConceptList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Concepts
    post:
      operationId: Concepts_create
      summary: Create a new concept
      description: Create a new Concept record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Concept'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Concepts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptCreate'
        description: Concept data to create
  /concepts/{id}:
    get:
      operationId: Concepts_read
      summary: Get concept by ID
      description: Retrieve a single Concept record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Concept'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Concepts
    put:
      operationId: Concepts_update
      summary: Update concept (full replacement)
      description: Replace all fields of an existing Concept record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Concept'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Concepts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptCreate'
        description: Complete concept data
    patch:
      operationId: Concepts_patch
      summary: Update concept (partial)
      description: Update specific fields of an existing Concept record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Concept'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Concepts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.ConceptUpdate'
        description: Fields to update
    delete:
      operationId: Concepts_delete
      summary: Delete concept
      description: Delete a Concept record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique concept identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Concepts
  /condition-eras:
    get:
      operationId: ConditionEras_list
      summary: List all condition-eras
      description: Returns a paginated list of ConditionEra records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Derived.ConditionEraQueryParams.person_id'
        - $ref: '#/components/parameters/Derived.ConditionEraQueryParams.condition_concept_id'
        - $ref: '#/components/parameters/Derived.ConditionEraQueryParams.sort_by'
        - $ref: '#/components/parameters/Derived.ConditionEraQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.ConditionEraList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - ConditionEras
    post:
      operationId: ConditionEras_create
      summary: Create a new condition-era
      description: Create a new ConditionEra record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.ConditionEra'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - ConditionEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.ConditionEraCreate'
        description: ConditionEra data to create
  /condition-eras/{id}:
    get:
      operationId: ConditionEras_read
      summary: Get condition-era by ID
      description: Retrieve a single ConditionEra record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.ConditionEra'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - ConditionEras
    put:
      operationId: ConditionEras_update
      summary: Update condition-era (full replacement)
      description: Replace all fields of an existing ConditionEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.ConditionEra'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - ConditionEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.ConditionEraCreate'
        description: Complete condition-era data
    patch:
      operationId: ConditionEras_patch
      summary: Update condition-era (partial)
      description: Update specific fields of an existing ConditionEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.ConditionEra'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - ConditionEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.ConditionEraUpdate'
        description: Fields to update
    delete:
      operationId: ConditionEras_delete
      summary: Delete condition-era
      description: Delete a ConditionEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-era identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - ConditionEras
  /condition-occurrences:
    get:
      operationId: ConditionOccurrences_list
      summary: List all condition-occurrences
      description: Returns a paginated list of ConditionOccurrence records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.condition_concept_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.condition_type_concept_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.condition_status_concept_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.condition_source_concept_id'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.ConditionOccurrenceQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ConditionOccurrenceList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ConditionOccurrences
    post:
      operationId: ConditionOccurrences_create
      summary: Create a new condition-occurrence
      description: Create a new ConditionOccurrence record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ConditionOccurrence'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ConditionOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ConditionOccurrenceCreate'
        description: ConditionOccurrence data to create
  /condition-occurrences/{id}:
    get:
      operationId: ConditionOccurrences_read
      summary: Get condition-occurrence by ID
      description: Retrieve a single ConditionOccurrence record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ConditionOccurrence'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ConditionOccurrences
    put:
      operationId: ConditionOccurrences_update
      summary: Update condition-occurrence (full replacement)
      description: Replace all fields of an existing ConditionOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ConditionOccurrence'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ConditionOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ConditionOccurrenceCreate'
        description: Complete condition-occurrence data
    patch:
      operationId: ConditionOccurrences_patch
      summary: Update condition-occurrence (partial)
      description: Update specific fields of an existing ConditionOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ConditionOccurrence'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ConditionOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ConditionOccurrenceUpdate'
        description: Fields to update
    delete:
      operationId: ConditionOccurrences_delete
      summary: Delete condition-occurrence
      description: Delete a ConditionOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique condition-occurrence identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ConditionOccurrences
  /costs:
    get:
      operationId: Costs_list
      summary: List all costs
      description: Returns a paginated list of Cost records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.cost_domain_id'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.cost_type_concept_id'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.currency_concept_id'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.revenue_code_concept_id'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.drg_concept_id'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.sort_by'
        - $ref: '#/components/parameters/Healthsystem.CostQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.CostList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Costs
    post:
      operationId: Costs_create
      summary: Create a new cost
      description: Create a new Cost record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Cost'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Costs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.CostCreate'
        description: Cost data to create
  /costs/{id}:
    get:
      operationId: Costs_read
      summary: Get cost by ID
      description: Retrieve a single Cost record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cost identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Cost'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Costs
    put:
      operationId: Costs_update
      summary: Update cost (full replacement)
      description: Replace all fields of an existing Cost record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cost identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Cost'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Costs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.CostCreate'
        description: Complete cost data
    patch:
      operationId: Costs_patch
      summary: Update cost (partial)
      description: Update specific fields of an existing Cost record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cost identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Cost'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Costs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.CostUpdate'
        description: Fields to update
    delete:
      operationId: Costs_delete
      summary: Delete cost
      description: Delete a Cost record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique cost identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Costs
  /deaths:
    get:
      operationId: Deaths_list
      summary: List all deaths
      description: Returns a paginated list of Death records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.DeathQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.DeathQueryParams.death_type_concept_id'
        - $ref: '#/components/parameters/Clinical.DeathQueryParams.cause_concept_id'
        - $ref: '#/components/parameters/Clinical.DeathQueryParams.cause_source_concept_id'
        - $ref: '#/components/parameters/Clinical.DeathQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.DeathQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DeathList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Deaths
    post:
      operationId: Deaths_create
      summary: Create a new death
      description: Create a new Death record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Death'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Deaths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DeathCreate'
        description: Death data to create
  /deaths/{id}:
    get:
      operationId: Deaths_read
      summary: Get death by ID
      description: Retrieve a single Death record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique death identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Death'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Deaths
    put:
      operationId: Deaths_update
      summary: Update death (full replacement)
      description: Replace all fields of an existing Death record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique death identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Death'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Deaths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DeathCreate'
        description: Complete death data
    patch:
      operationId: Deaths_patch
      summary: Update death (partial)
      description: Update specific fields of an existing Death record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique death identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Death'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Deaths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DeathUpdate'
        description: Fields to update
    delete:
      operationId: Deaths_delete
      summary: Delete death
      description: Delete a Death record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique death identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Deaths
  /device-exposures:
    get:
      operationId: DeviceExposures_list
      summary: List all device-exposures
      description: Returns a paginated list of DeviceExposure records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.device_concept_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.device_type_concept_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.device_source_concept_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.unit_concept_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.unit_source_concept_id'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.DeviceExposureQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DeviceExposureList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DeviceExposures
    post:
      operationId: DeviceExposures_create
      summary: Create a new device-exposure
      description: Create a new DeviceExposure record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DeviceExposure'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DeviceExposures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DeviceExposureCreate'
        description: DeviceExposure data to create
  /device-exposures/{id}:
    get:
      operationId: DeviceExposures_read
      summary: Get device-exposure by ID
      description: Retrieve a single DeviceExposure record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique device-exposure identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DeviceExposure'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DeviceExposures
    put:
      operationId: DeviceExposures_update
      summary: Update device-exposure (full replacement)
      description: Replace all fields of an existing DeviceExposure record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique device-exposure identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DeviceExposure'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DeviceExposures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DeviceExposureCreate'
        description: Complete device-exposure data
    patch:
      operationId: DeviceExposures_patch
      summary: Update device-exposure (partial)
      description: Update specific fields of an existing DeviceExposure record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique device-exposure identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DeviceExposure'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DeviceExposures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DeviceExposureUpdate'
        description: Fields to update
    delete:
      operationId: DeviceExposures_delete
      summary: Delete device-exposure
      description: Delete a DeviceExposure record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique device-exposure identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DeviceExposures
  /domains:
    get:
      operationId: Domains_list
      summary: List all domains
      description: Returns a paginated list of Domain records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.DomainQueryParams.domain_concept_id'
        - $ref: '#/components/parameters/Vocabulary.DomainQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.DomainQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.DomainList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Domains
    post:
      operationId: Domains_create
      summary: Create a new domain
      description: Create a new Domain record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Domain'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.DomainCreate'
        description: Domain data to create
  /domains/{id}:
    get:
      operationId: Domains_read
      summary: Get domain by ID
      description: Retrieve a single Domain record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique domain identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Domain'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Domains
    put:
      operationId: Domains_update
      summary: Update domain (full replacement)
      description: Replace all fields of an existing Domain record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique domain identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Domain'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.DomainCreate'
        description: Complete domain data
    patch:
      operationId: Domains_patch
      summary: Update domain (partial)
      description: Update specific fields of an existing Domain record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique domain identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Domain'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Domains
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.DomainUpdate'
        description: Fields to update
    delete:
      operationId: Domains_delete
      summary: Delete domain
      description: Delete a Domain record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique domain identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Domains
  /dose-eras:
    get:
      operationId: DoseEras_list
      summary: List all dose-eras
      description: Returns a paginated list of DoseEra records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Derived.DoseEraQueryParams.person_id'
        - $ref: '#/components/parameters/Derived.DoseEraQueryParams.drug_concept_id'
        - $ref: '#/components/parameters/Derived.DoseEraQueryParams.unit_concept_id'
        - $ref: '#/components/parameters/Derived.DoseEraQueryParams.sort_by'
        - $ref: '#/components/parameters/Derived.DoseEraQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DoseEraList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DoseEras
    post:
      operationId: DoseEras_create
      summary: Create a new dose-era
      description: Create a new DoseEra record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DoseEra'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DoseEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.DoseEraCreate'
        description: DoseEra data to create
  /dose-eras/{id}:
    get:
      operationId: DoseEras_read
      summary: Get dose-era by ID
      description: Retrieve a single DoseEra record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique dose-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DoseEra'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DoseEras
    put:
      operationId: DoseEras_update
      summary: Update dose-era (full replacement)
      description: Replace all fields of an existing DoseEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique dose-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DoseEra'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DoseEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.DoseEraCreate'
        description: Complete dose-era data
    patch:
      operationId: DoseEras_patch
      summary: Update dose-era (partial)
      description: Update specific fields of an existing DoseEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique dose-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DoseEra'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DoseEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.DoseEraUpdate'
        description: Fields to update
    delete:
      operationId: DoseEras_delete
      summary: Delete dose-era
      description: Delete a DoseEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique dose-era identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DoseEras
  /drug-eras:
    get:
      operationId: DrugEras_list
      summary: List all drug-eras
      description: Returns a paginated list of DrugEra records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Derived.DrugEraQueryParams.person_id'
        - $ref: '#/components/parameters/Derived.DrugEraQueryParams.drug_concept_id'
        - $ref: '#/components/parameters/Derived.DrugEraQueryParams.sort_by'
        - $ref: '#/components/parameters/Derived.DrugEraQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DrugEraList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DrugEras
    post:
      operationId: DrugEras_create
      summary: Create a new drug-era
      description: Create a new DrugEra record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DrugEra'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DrugEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.DrugEraCreate'
        description: DrugEra data to create
  /drug-eras/{id}:
    get:
      operationId: DrugEras_read
      summary: Get drug-era by ID
      description: Retrieve a single DrugEra record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DrugEra'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DrugEras
    put:
      operationId: DrugEras_update
      summary: Update drug-era (full replacement)
      description: Replace all fields of an existing DrugEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DrugEra'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DrugEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.DrugEraCreate'
        description: Complete drug-era data
    patch:
      operationId: DrugEras_patch
      summary: Update drug-era (partial)
      description: Update specific fields of an existing DrugEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-era identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.DrugEra'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DrugEras
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.DrugEraUpdate'
        description: Fields to update
    delete:
      operationId: DrugEras_delete
      summary: Delete drug-era
      description: Delete a DrugEra record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-era identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - DrugEras
  /drug-exposures:
    get:
      operationId: DrugExposures_list
      summary: List all drug-exposures
      description: Returns a paginated list of DrugExposure records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.drug_concept_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.drug_type_concept_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.route_concept_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.drug_source_concept_id'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.DrugExposureQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DrugExposureList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DrugExposures
    post:
      operationId: DrugExposures_create
      summary: Create a new drug-exposure
      description: Create a new DrugExposure record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DrugExposure'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DrugExposures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DrugExposureCreate'
        description: DrugExposure data to create
  /drug-exposures/{id}:
    get:
      operationId: DrugExposures_read
      summary: Get drug-exposure by ID
      description: Retrieve a single DrugExposure record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-exposure identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DrugExposure'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DrugExposures
    put:
      operationId: DrugExposures_update
      summary: Update drug-exposure (full replacement)
      description: Replace all fields of an existing DrugExposure record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-exposure identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DrugExposure'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DrugExposures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DrugExposureCreate'
        description: Complete drug-exposure data
    patch:
      operationId: DrugExposures_patch
      summary: Update drug-exposure (partial)
      description: Update specific fields of an existing DrugExposure record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-exposure identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.DrugExposure'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DrugExposures
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.DrugExposureUpdate'
        description: Fields to update
    delete:
      operationId: DrugExposures_delete
      summary: Delete drug-exposure
      description: Delete a DrugExposure record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-exposure identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - DrugExposures
  /drug-strengths:
    get:
      operationId: DrugStrengths_list
      summary: List all drug-strengths
      description: Returns a paginated list of DrugStrength records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.drug_concept_id'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.ingredient_concept_id'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.amount_unit_concept_id'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.numerator_unit_concept_id'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.denominator_unit_concept_id'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.DrugStrengthQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.DrugStrengthList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - DrugStrengths
    post:
      operationId: DrugStrengths_create
      summary: Create a new drug-strength
      description: Create a new DrugStrength record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.DrugStrength'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - DrugStrengths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.DrugStrengthCreate'
        description: DrugStrength data to create
  /drug-strengths/{id}:
    get:
      operationId: DrugStrengths_read
      summary: Get drug-strength by ID
      description: Retrieve a single DrugStrength record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-strength identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.DrugStrength'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - DrugStrengths
    put:
      operationId: DrugStrengths_update
      summary: Update drug-strength (full replacement)
      description: Replace all fields of an existing DrugStrength record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-strength identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.DrugStrength'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - DrugStrengths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.DrugStrengthCreate'
        description: Complete drug-strength data
    patch:
      operationId: DrugStrengths_patch
      summary: Update drug-strength (partial)
      description: Update specific fields of an existing DrugStrength record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-strength identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.DrugStrength'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - DrugStrengths
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.DrugStrengthUpdate'
        description: Fields to update
    delete:
      operationId: DrugStrengths_delete
      summary: Delete drug-strength
      description: Delete a DrugStrength record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique drug-strength identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - DrugStrengths
  /episode-events:
    get:
      operationId: EpisodeEvents_list
      summary: List all episode-events
      description: Returns a paginated list of EpisodeEvent records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Derived.EpisodeEventQueryParams.episode_id'
        - $ref: '#/components/parameters/Derived.EpisodeEventQueryParams.episode_event_field_concept_id'
        - $ref: '#/components/parameters/Derived.EpisodeEventQueryParams.sort_by'
        - $ref: '#/components/parameters/Derived.EpisodeEventQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.EpisodeEventList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - EpisodeEvents
    post:
      operationId: EpisodeEvents_create
      summary: Create a new episode-event
      description: Create a new EpisodeEvent record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.EpisodeEvent'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - EpisodeEvents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.EpisodeEventCreate'
        description: EpisodeEvent data to create
  /episode-events/{id}:
    get:
      operationId: EpisodeEvents_read
      summary: Get episode-event by ID
      description: Retrieve a single EpisodeEvent record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode-event identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.EpisodeEvent'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - EpisodeEvents
    put:
      operationId: EpisodeEvents_update
      summary: Update episode-event (full replacement)
      description: Replace all fields of an existing EpisodeEvent record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode-event identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.EpisodeEvent'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - EpisodeEvents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.EpisodeEventCreate'
        description: Complete episode-event data
    patch:
      operationId: EpisodeEvents_patch
      summary: Update episode-event (partial)
      description: Update specific fields of an existing EpisodeEvent record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode-event identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.EpisodeEvent'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - EpisodeEvents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.EpisodeEventUpdate'
        description: Fields to update
    delete:
      operationId: EpisodeEvents_delete
      summary: Delete episode-event
      description: Delete a EpisodeEvent record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode-event identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - EpisodeEvents
  /episodes:
    get:
      operationId: Episodes_list
      summary: List all episodes
      description: Returns a paginated list of Episode records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.person_id'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.episode_concept_id'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.episode_object_concept_id'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.episode_type_concept_id'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.episode_source_concept_id'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.sort_by'
        - $ref: '#/components/parameters/Derived.EpisodeQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.EpisodeList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - Episodes
    post:
      operationId: Episodes_create
      summary: Create a new episode
      description: Create a new Episode record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.Episode'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - Episodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.EpisodeCreate'
        description: Episode data to create
  /episodes/{id}:
    get:
      operationId: Episodes_read
      summary: Get episode by ID
      description: Retrieve a single Episode record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.Episode'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - Episodes
    put:
      operationId: Episodes_update
      summary: Update episode (full replacement)
      description: Replace all fields of an existing Episode record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.Episode'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - Episodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.EpisodeCreate'
        description: Complete episode data
    patch:
      operationId: Episodes_patch
      summary: Update episode (partial)
      description: Update specific fields of an existing Episode record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Derived.Episode'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - Episodes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Derived.EpisodeUpdate'
        description: Fields to update
    delete:
      operationId: Episodes_delete
      summary: Delete episode
      description: Delete a Episode record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique episode identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Derived - Episodes
  /fact-relationships:
    get:
      operationId: FactRelationships_list
      summary: List all fact-relationships
      description: Returns a paginated list of FactRelationship records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Results.FactRelationshipQueryParams.relationship_concept_id'
        - $ref: '#/components/parameters/Results.FactRelationshipQueryParams.sort_by'
        - $ref: '#/components/parameters/Results.FactRelationshipQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.FactRelationshipList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - FactRelationships
    post:
      operationId: FactRelationships_create
      summary: Create a new fact-relationship
      description: Create a new FactRelationship record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.FactRelationship'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - FactRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.FactRelationshipCreate'
        description: FactRelationship data to create
  /fact-relationships/{id}:
    get:
      operationId: FactRelationships_read
      summary: Get fact-relationship by ID
      description: Retrieve a single FactRelationship record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique fact-relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.FactRelationship'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - FactRelationships
    put:
      operationId: FactRelationships_update
      summary: Update fact-relationship (full replacement)
      description: Replace all fields of an existing FactRelationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique fact-relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.FactRelationship'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - FactRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.FactRelationshipCreate'
        description: Complete fact-relationship data
    patch:
      operationId: FactRelationships_patch
      summary: Update fact-relationship (partial)
      description: Update specific fields of an existing FactRelationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique fact-relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Results.FactRelationship'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - FactRelationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Results.FactRelationshipUpdate'
        description: Fields to update
    delete:
      operationId: FactRelationships_delete
      summary: Delete fact-relationship
      description: Delete a FactRelationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique fact-relationship identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Results - FactRelationships
  /locations:
    get:
      operationId: Locations_list
      summary: List all locations
      description: Returns a paginated list of Location records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Healthsystem.LocationQueryParams.country_concept_id'
        - $ref: '#/components/parameters/Healthsystem.LocationQueryParams.sort_by'
        - $ref: '#/components/parameters/Healthsystem.LocationQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.LocationList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Locations
    post:
      operationId: Locations_create
      summary: Create a new location
      description: Create a new Location record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Location'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.LocationCreate'
        description: Location data to create
  /locations/{id}:
    get:
      operationId: Locations_read
      summary: Get location by ID
      description: Retrieve a single Location record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique location identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Location'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Locations
    put:
      operationId: Locations_update
      summary: Update location (full replacement)
      description: Replace all fields of an existing Location record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique location identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Location'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.LocationCreate'
        description: Complete location data
    patch:
      operationId: Locations_patch
      summary: Update location (partial)
      description: Update specific fields of an existing Location record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique location identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Location'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.LocationUpdate'
        description: Fields to update
    delete:
      operationId: Locations_delete
      summary: Delete location
      description: Delete a Location record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique location identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Locations
  /measurements:
    get:
      operationId: Measurements_list
      summary: List all measurements
      description: Returns a paginated list of Measurement records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.measurement_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.measurement_type_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.operator_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.value_as_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.unit_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.measurement_source_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.unit_source_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.meas_event_field_concept_id'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.MeasurementQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.MeasurementList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Measurements
    post:
      operationId: Measurements_create
      summary: Create a new measurement
      description: Create a new Measurement record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Measurement'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Measurements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.MeasurementCreate'
        description: Measurement data to create
  /measurements/{id}:
    get:
      operationId: Measurements_read
      summary: Get measurement by ID
      description: Retrieve a single Measurement record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique measurement identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Measurement'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Measurements
    put:
      operationId: Measurements_update
      summary: Update measurement (full replacement)
      description: Replace all fields of an existing Measurement record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique measurement identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Measurement'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Measurements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.MeasurementCreate'
        description: Complete measurement data
    patch:
      operationId: Measurements_patch
      summary: Update measurement (partial)
      description: Update specific fields of an existing Measurement record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique measurement identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Measurement'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Measurements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.MeasurementUpdate'
        description: Fields to update
    delete:
      operationId: Measurements_delete
      summary: Delete measurement
      description: Delete a Measurement record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique measurement identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Measurements
  /metadatas:
    get:
      operationId: Metadatas_list
      summary: List all metadatas
      description: Returns a paginated list of Metadata records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Metadata.MetadataQueryParams.metadata_concept_id'
        - $ref: '#/components/parameters/Metadata.MetadataQueryParams.metadata_type_concept_id'
        - $ref: '#/components/parameters/Metadata.MetadataQueryParams.value_as_concept_id'
        - $ref: '#/components/parameters/Metadata.MetadataQueryParams.sort_by'
        - $ref: '#/components/parameters/Metadata.MetadataQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.MetadataList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - Metadatas
    post:
      operationId: Metadatas_create
      summary: Create a new metadata
      description: Create a new Metadata record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.Metadata'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - Metadatas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata.MetadataCreate'
        description: Metadata data to create
  /metadatas/{id}:
    get:
      operationId: Metadatas_read
      summary: Get metadata by ID
      description: Retrieve a single Metadata record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique metadata identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.Metadata'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - Metadatas
    put:
      operationId: Metadatas_update
      summary: Update metadata (full replacement)
      description: Replace all fields of an existing Metadata record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique metadata identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.Metadata'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - Metadatas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata.MetadataCreate'
        description: Complete metadata data
    patch:
      operationId: Metadatas_patch
      summary: Update metadata (partial)
      description: Update specific fields of an existing Metadata record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique metadata identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata.Metadata'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - Metadatas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metadata.MetadataUpdate'
        description: Fields to update
    delete:
      operationId: Metadatas_delete
      summary: Delete metadata
      description: Delete a Metadata record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique metadata identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Metadata - Metadatas
  /note-nlps:
    get:
      operationId: NoteNlps_list
      summary: List all note-nlps
      description: Returns a paginated list of NoteNlp records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.NoteNlpQueryParams.section_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteNlpQueryParams.note_nlp_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteNlpQueryParams.note_nlp_source_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteNlpQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.NoteNlpQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.NoteNlpList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - NoteNlps
    post:
      operationId: NoteNlps_create
      summary: Create a new note-nlp
      description: Create a new NoteNlp record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.NoteNlp'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - NoteNlps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.NoteNlpCreate'
        description: NoteNlp data to create
  /note-nlps/{id}:
    get:
      operationId: NoteNlps_read
      summary: Get note-nlp by ID
      description: Retrieve a single NoteNlp record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note-nlp identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.NoteNlp'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - NoteNlps
    put:
      operationId: NoteNlps_update
      summary: Update note-nlp (full replacement)
      description: Replace all fields of an existing NoteNlp record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note-nlp identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.NoteNlp'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - NoteNlps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.NoteNlpCreate'
        description: Complete note-nlp data
    patch:
      operationId: NoteNlps_patch
      summary: Update note-nlp (partial)
      description: Update specific fields of an existing NoteNlp record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note-nlp identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.NoteNlp'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - NoteNlps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.NoteNlpUpdate'
        description: Fields to update
    delete:
      operationId: NoteNlps_delete
      summary: Delete note-nlp
      description: Delete a NoteNlp record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note-nlp identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - NoteNlps
  /notes:
    get:
      operationId: Notes_list
      summary: List all notes
      description: Returns a paginated list of Note records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.note_type_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.note_class_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.encoding_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.language_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.note_event_field_concept_id'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.NoteQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.NoteList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Notes
    post:
      operationId: Notes_create
      summary: Create a new note
      description: Create a new Note record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Note'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.NoteCreate'
        description: Note data to create
  /notes/{id}:
    get:
      operationId: Notes_read
      summary: Get note by ID
      description: Retrieve a single Note record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Note'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Notes
    put:
      operationId: Notes_update
      summary: Update note (full replacement)
      description: Replace all fields of an existing Note record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Note'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.NoteCreate'
        description: Complete note data
    patch:
      operationId: Notes_patch
      summary: Update note (partial)
      description: Update specific fields of an existing Note record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Note'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Notes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.NoteUpdate'
        description: Fields to update
    delete:
      operationId: Notes_delete
      summary: Delete note
      description: Delete a Note record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique note identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Notes
  /observation-periods:
    get:
      operationId: ObservationPeriods_list
      summary: List all observation-periods
      description: Returns a paginated list of ObservationPeriod records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.ObservationPeriodQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.ObservationPeriodQueryParams.period_type_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationPeriodQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.ObservationPeriodQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ObservationPeriodList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ObservationPeriods
    post:
      operationId: ObservationPeriods_create
      summary: Create a new observation-period
      description: Create a new ObservationPeriod record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ObservationPeriod'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ObservationPeriods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ObservationPeriodCreate'
        description: ObservationPeriod data to create
  /observation-periods/{id}:
    get:
      operationId: ObservationPeriods_read
      summary: Get observation-period by ID
      description: Retrieve a single ObservationPeriod record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation-period identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ObservationPeriod'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ObservationPeriods
    put:
      operationId: ObservationPeriods_update
      summary: Update observation-period (full replacement)
      description: Replace all fields of an existing ObservationPeriod record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation-period identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ObservationPeriod'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ObservationPeriods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ObservationPeriodCreate'
        description: Complete observation-period data
    patch:
      operationId: ObservationPeriods_patch
      summary: Update observation-period (partial)
      description: Update specific fields of an existing ObservationPeriod record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation-period identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ObservationPeriod'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ObservationPeriods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ObservationPeriodUpdate'
        description: Fields to update
    delete:
      operationId: ObservationPeriods_delete
      summary: Delete observation-period
      description: Delete a ObservationPeriod record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation-period identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ObservationPeriods
  /observations:
    get:
      operationId: Observations_list
      summary: List all observations
      description: Returns a paginated list of Observation records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.observation_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.observation_type_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.value_as_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.qualifier_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.unit_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.observation_source_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.obs_event_field_concept_id'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.ObservationQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ObservationList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Observations
    post:
      operationId: Observations_create
      summary: Create a new observation
      description: Create a new Observation record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Observation'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Observations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ObservationCreate'
        description: Observation data to create
  /observations/{id}:
    get:
      operationId: Observations_read
      summary: Get observation by ID
      description: Retrieve a single Observation record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Observation'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Observations
    put:
      operationId: Observations_update
      summary: Update observation (full replacement)
      description: Replace all fields of an existing Observation record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Observation'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Observations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ObservationCreate'
        description: Complete observation data
    patch:
      operationId: Observations_patch
      summary: Update observation (partial)
      description: Update specific fields of an existing Observation record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Observation'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Observations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ObservationUpdate'
        description: Fields to update
    delete:
      operationId: Observations_delete
      summary: Delete observation
      description: Delete a Observation record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique observation identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Observations
  /payer-plan-periods:
    get:
      operationId: PayerPlanPeriods_list
      summary: List all payer-plan-periods
      description: Returns a paginated list of PayerPlanPeriod records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.person_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.payer_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.payer_source_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.plan_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.plan_source_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.sponsor_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.sponsor_source_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.stop_reason_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.stop_reason_source_concept_id'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.sort_by'
        - $ref: '#/components/parameters/Healthsystem.PayerPlanPeriodQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.PayerPlanPeriodList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - PayerPlanPeriods
    post:
      operationId: PayerPlanPeriods_create
      summary: Create a new payer-plan-period
      description: Create a new PayerPlanPeriod record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.PayerPlanPeriod'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - PayerPlanPeriods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.PayerPlanPeriodCreate'
        description: PayerPlanPeriod data to create
  /payer-plan-periods/{id}:
    get:
      operationId: PayerPlanPeriods_read
      summary: Get payer-plan-period by ID
      description: Retrieve a single PayerPlanPeriod record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique payer-plan-period identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.PayerPlanPeriod'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - PayerPlanPeriods
    put:
      operationId: PayerPlanPeriods_update
      summary: Update payer-plan-period (full replacement)
      description: Replace all fields of an existing PayerPlanPeriod record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique payer-plan-period identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.PayerPlanPeriod'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - PayerPlanPeriods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.PayerPlanPeriodCreate'
        description: Complete payer-plan-period data
    patch:
      operationId: PayerPlanPeriods_patch
      summary: Update payer-plan-period (partial)
      description: Update specific fields of an existing PayerPlanPeriod record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique payer-plan-period identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.PayerPlanPeriod'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - PayerPlanPeriods
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.PayerPlanPeriodUpdate'
        description: Fields to update
    delete:
      operationId: PayerPlanPeriods_delete
      summary: Delete payer-plan-period
      description: Delete a PayerPlanPeriod record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique payer-plan-period identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - PayerPlanPeriods
  /persons:
    get:
      operationId: Persons_list
      summary: List all persons
      description: Returns a paginated list of Person records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.gender_concept_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.race_concept_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.ethnicity_concept_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.location_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.care_site_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.gender_source_concept_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.race_source_concept_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.ethnicity_source_concept_id'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.PersonQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.PersonList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Persons
    post:
      operationId: Persons_create
      summary: Create a new person
      description: Create a new Person record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Person'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.PersonCreate'
        description: Person data to create
  /persons/{id}:
    get:
      operationId: Persons_read
      summary: Get person by ID
      description: Retrieve a single Person record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique person identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Person'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Persons
    put:
      operationId: Persons_update
      summary: Update person (full replacement)
      description: Replace all fields of an existing Person record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique person identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Person'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.PersonCreate'
        description: Complete person data
    patch:
      operationId: Persons_patch
      summary: Update person (partial)
      description: Update specific fields of an existing Person record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique person identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Person'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Persons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.PersonUpdate'
        description: Fields to update
    delete:
      operationId: Persons_delete
      summary: Delete person
      description: Delete a Person record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique person identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Persons
  /procedure-occurrences:
    get:
      operationId: ProcedureOccurrences_list
      summary: List all procedure-occurrences
      description: Returns a paginated list of ProcedureOccurrence records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.procedure_concept_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.procedure_type_concept_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.modifier_concept_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.visit_detail_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.procedure_source_concept_id'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.ProcedureOccurrenceQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ProcedureOccurrenceList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ProcedureOccurrences
    post:
      operationId: ProcedureOccurrences_create
      summary: Create a new procedure-occurrence
      description: Create a new ProcedureOccurrence record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ProcedureOccurrence'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ProcedureOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ProcedureOccurrenceCreate'
        description: ProcedureOccurrence data to create
  /procedure-occurrences/{id}:
    get:
      operationId: ProcedureOccurrences_read
      summary: Get procedure-occurrence by ID
      description: Retrieve a single ProcedureOccurrence record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique procedure-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ProcedureOccurrence'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ProcedureOccurrences
    put:
      operationId: ProcedureOccurrences_update
      summary: Update procedure-occurrence (full replacement)
      description: Replace all fields of an existing ProcedureOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique procedure-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ProcedureOccurrence'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ProcedureOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ProcedureOccurrenceCreate'
        description: Complete procedure-occurrence data
    patch:
      operationId: ProcedureOccurrences_patch
      summary: Update procedure-occurrence (partial)
      description: Update specific fields of an existing ProcedureOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique procedure-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.ProcedureOccurrence'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ProcedureOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.ProcedureOccurrenceUpdate'
        description: Fields to update
    delete:
      operationId: ProcedureOccurrences_delete
      summary: Delete procedure-occurrence
      description: Delete a ProcedureOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique procedure-occurrence identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - ProcedureOccurrences
  /providers:
    get:
      operationId: Providers_list
      summary: List all providers
      description: Returns a paginated list of Provider records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.specialty_concept_id'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.care_site_id'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.gender_concept_id'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.specialty_source_concept_id'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.gender_source_concept_id'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.sort_by'
        - $ref: '#/components/parameters/Healthsystem.ProviderQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.ProviderList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Providers
    post:
      operationId: Providers_create
      summary: Create a new provider
      description: Create a new Provider record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Provider'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.ProviderCreate'
        description: Provider data to create
  /providers/{id}:
    get:
      operationId: Providers_read
      summary: Get provider by ID
      description: Retrieve a single Provider record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique provider identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Provider'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Providers
    put:
      operationId: Providers_update
      summary: Update provider (full replacement)
      description: Replace all fields of an existing Provider record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique provider identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Provider'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.ProviderCreate'
        description: Complete provider data
    patch:
      operationId: Providers_patch
      summary: Update provider (partial)
      description: Update specific fields of an existing Provider record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique provider identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthsystem.Provider'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Providers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Healthsystem.ProviderUpdate'
        description: Fields to update
    delete:
      operationId: Providers_delete
      summary: Delete provider
      description: Delete a Provider record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique provider identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Health System - Providers
  /relationships:
    get:
      operationId: Relationships_list
      summary: List all relationships
      description: Returns a paginated list of Relationship records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.RelationshipQueryParams.relationship_concept_id'
        - $ref: '#/components/parameters/Vocabulary.RelationshipQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.RelationshipQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.RelationshipList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Relationships
    post:
      operationId: Relationships_create
      summary: Create a new relationship
      description: Create a new Relationship record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Relationship'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Relationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.RelationshipCreate'
        description: Relationship data to create
  /relationships/{id}:
    get:
      operationId: Relationships_read
      summary: Get relationship by ID
      description: Retrieve a single Relationship record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Relationship'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Relationships
    put:
      operationId: Relationships_update
      summary: Update relationship (full replacement)
      description: Replace all fields of an existing Relationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Relationship'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Relationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.RelationshipCreate'
        description: Complete relationship data
    patch:
      operationId: Relationships_patch
      summary: Update relationship (partial)
      description: Update specific fields of an existing Relationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique relationship identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Relationship'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Relationships
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.RelationshipUpdate'
        description: Fields to update
    delete:
      operationId: Relationships_delete
      summary: Delete relationship
      description: Delete a Relationship record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique relationship identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Relationships
  /source-to-concept-maps:
    get:
      operationId: SourceToConceptMaps_list
      summary: List all source-to-concept-maps
      description: Returns a paginated list of SourceToConceptMap records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.SourceToConceptMapQueryParams.source_concept_id'
        - $ref: '#/components/parameters/Vocabulary.SourceToConceptMapQueryParams.target_concept_id'
        - $ref: '#/components/parameters/Vocabulary.SourceToConceptMapQueryParams.target_vocabulary_id'
        - $ref: '#/components/parameters/Vocabulary.SourceToConceptMapQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.SourceToConceptMapQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.SourceToConceptMapList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - SourceToConceptMaps
    post:
      operationId: SourceToConceptMaps_create
      summary: Create a new source-to-concept-map
      description: Create a new SourceToConceptMap record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.SourceToConceptMap'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - SourceToConceptMaps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.SourceToConceptMapCreate'
        description: SourceToConceptMap data to create
  /source-to-concept-maps/{id}:
    get:
      operationId: SourceToConceptMaps_read
      summary: Get source-to-concept-map by ID
      description: Retrieve a single SourceToConceptMap record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique source-to-concept-map identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.SourceToConceptMap'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - SourceToConceptMaps
    put:
      operationId: SourceToConceptMaps_update
      summary: Update source-to-concept-map (full replacement)
      description: Replace all fields of an existing SourceToConceptMap record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique source-to-concept-map identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.SourceToConceptMap'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - SourceToConceptMaps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.SourceToConceptMapCreate'
        description: Complete source-to-concept-map data
    patch:
      operationId: SourceToConceptMaps_patch
      summary: Update source-to-concept-map (partial)
      description: Update specific fields of an existing SourceToConceptMap record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique source-to-concept-map identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.SourceToConceptMap'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - SourceToConceptMaps
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.SourceToConceptMapUpdate'
        description: Fields to update
    delete:
      operationId: SourceToConceptMaps_delete
      summary: Delete source-to-concept-map
      description: Delete a SourceToConceptMap record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique source-to-concept-map identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - SourceToConceptMaps
  /specimens:
    get:
      operationId: Specimens_list
      summary: List all specimens
      description: Returns a paginated list of Specimen records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.specimen_concept_id'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.specimen_type_concept_id'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.unit_concept_id'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.anatomic_site_concept_id'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.disease_status_concept_id'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.SpecimenQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.SpecimenList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Specimens
    post:
      operationId: Specimens_create
      summary: Create a new specimen
      description: Create a new Specimen record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Specimen'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Specimens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.SpecimenCreate'
        description: Specimen data to create
  /specimens/{id}:
    get:
      operationId: Specimens_read
      summary: Get specimen by ID
      description: Retrieve a single Specimen record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique specimen identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Specimen'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Specimens
    put:
      operationId: Specimens_update
      summary: Update specimen (full replacement)
      description: Replace all fields of an existing Specimen record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique specimen identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Specimen'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Specimens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.SpecimenCreate'
        description: Complete specimen data
    patch:
      operationId: Specimens_patch
      summary: Update specimen (partial)
      description: Update specific fields of an existing Specimen record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique specimen identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.Specimen'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Specimens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.SpecimenUpdate'
        description: Fields to update
    delete:
      operationId: Specimens_delete
      summary: Delete specimen
      description: Delete a Specimen record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique specimen identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - Specimens
  /visit-details:
    get:
      operationId: VisitDetails_list
      summary: List all visit-details
      description: Returns a paginated list of VisitDetail records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.visit_detail_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.visit_detail_type_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.care_site_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.visit_detail_source_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.admitted_from_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.discharged_to_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.preceding_visit_detail_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.parent_visit_detail_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.VisitDetailQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitDetailList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitDetails
    post:
      operationId: VisitDetails_create
      summary: Create a new visit-detail
      description: Create a new VisitDetail record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitDetail'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.VisitDetailCreate'
        description: VisitDetail data to create
  /visit-details/{id}:
    get:
      operationId: VisitDetails_read
      summary: Get visit-detail by ID
      description: Retrieve a single VisitDetail record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-detail identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitDetail'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitDetails
    put:
      operationId: VisitDetails_update
      summary: Update visit-detail (full replacement)
      description: Replace all fields of an existing VisitDetail record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-detail identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitDetail'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.VisitDetailCreate'
        description: Complete visit-detail data
    patch:
      operationId: VisitDetails_patch
      summary: Update visit-detail (partial)
      description: Update specific fields of an existing VisitDetail record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-detail identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitDetail'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.VisitDetailUpdate'
        description: Fields to update
    delete:
      operationId: VisitDetails_delete
      summary: Delete visit-detail
      description: Delete a VisitDetail record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-detail identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitDetails
  /visit-occurrences:
    get:
      operationId: VisitOccurrences_list
      summary: List all visit-occurrences
      description: Returns a paginated list of VisitOccurrence records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.person_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.visit_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.visit_type_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.provider_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.care_site_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.visit_source_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.admitted_from_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.discharged_to_concept_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.preceding_visit_occurrence_id'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.sort_by'
        - $ref: '#/components/parameters/Clinical.VisitOccurrenceQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitOccurrenceList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitOccurrences
    post:
      operationId: VisitOccurrences_create
      summary: Create a new visit-occurrence
      description: Create a new VisitOccurrence record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitOccurrence'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.VisitOccurrenceCreate'
        description: VisitOccurrence data to create
  /visit-occurrences/{id}:
    get:
      operationId: VisitOccurrences_read
      summary: Get visit-occurrence by ID
      description: Retrieve a single VisitOccurrence record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitOccurrence'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitOccurrences
    put:
      operationId: VisitOccurrences_update
      summary: Update visit-occurrence (full replacement)
      description: Replace all fields of an existing VisitOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitOccurrence'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.VisitOccurrenceCreate'
        description: Complete visit-occurrence data
    patch:
      operationId: VisitOccurrences_patch
      summary: Update visit-occurrence (partial)
      description: Update specific fields of an existing VisitOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-occurrence identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clinical.VisitOccurrence'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitOccurrences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinical.VisitOccurrenceUpdate'
        description: Fields to update
    delete:
      operationId: VisitOccurrences_delete
      summary: Delete visit-occurrence
      description: Delete a VisitOccurrence record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique visit-occurrence identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Clinical - VisitOccurrences
  /vocabularys:
    get:
      operationId: Vocabularys_list
      summary: List all vocabularys
      description: Returns a paginated list of Vocabulary records.
      parameters:
        - $ref: '#/components/parameters/Common.PaginationParams.offset'
        - $ref: '#/components/parameters/Common.PaginationParams.limit'
        - $ref: '#/components/parameters/Vocabulary.VocabularyQueryParams.vocabulary_concept_id'
        - $ref: '#/components/parameters/Vocabulary.VocabularyQueryParams.sort_by'
        - $ref: '#/components/parameters/Vocabulary.VocabularyQueryParams.sort_order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.VocabularyList'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Vocabularys
    post:
      operationId: Vocabularys_create
      summary: Create a new vocabulary
      description: Create a new Vocabulary record.
      parameters: []
      responses:
        '201':
          description: The request has succeeded and a new resource has been created as a result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Vocabulary'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Vocabularys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.VocabularyCreate'
        description: Vocabulary data to create
  /vocabularys/{id}:
    get:
      operationId: Vocabularys_read
      summary: Get vocabulary by ID
      description: Retrieve a single Vocabulary record by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique vocabulary identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Vocabulary'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Vocabularys
    put:
      operationId: Vocabularys_update
      summary: Update vocabulary (full replacement)
      description: Replace all fields of an existing Vocabulary record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique vocabulary identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Vocabulary'
        '400':
          description: The server could not understand the request due to invalid syntax.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Vocabularys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.VocabularyCreate'
        description: Complete vocabulary data
    patch:
      operationId: Vocabularys_patch
      summary: Update vocabulary (partial)
      description: Update specific fields of an existing Vocabulary record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique vocabulary identifier
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary.Vocabulary'
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Vocabularys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vocabulary.VocabularyUpdate'
        description: Fields to update
    delete:
      operationId: Vocabularys_delete
      summary: Delete vocabulary
      description: Delete a Vocabulary record.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique vocabulary identifier
          schema:
            type: string
      responses:
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
        '404':
          description: The server cannot find the requested resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
        default:
          description: An unexpected error response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Common.ErrorResponse'
      tags:
        - Vocabulary - Vocabularys
security:
  - BearerAuth: []
components:
  parameters:
    Clinical.ConditionOccurrenceQueryParams.condition_concept_id:
      name: condition_concept_id
      in: query
      required: false
      description: Filter by condition concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ConditionOccurrenceQueryParams.condition_source_concept_id:
      name: condition_source_concept_id
      in: query
      required: false
      description: Filter by condition source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ConditionOccurrenceQueryParams.condition_status_concept_id:
      name: condition_status_concept_id
      in: query
      required: false
      description: Filter by condition status concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ConditionOccurrenceQueryParams.condition_type_concept_id:
      name: condition_type_concept_id
      in: query
      required: false
      description: Filter by condition type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ConditionOccurrenceQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ConditionOccurrenceQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ConditionOccurrenceQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.ConditionOccurrenceQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.ConditionOccurrenceQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ConditionOccurrenceQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DeathQueryParams.cause_concept_id:
      name: cause_concept_id
      in: query
      required: false
      description: Filter by cause concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeathQueryParams.cause_source_concept_id:
      name: cause_source_concept_id
      in: query
      required: false
      description: Filter by cause source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeathQueryParams.death_type_concept_id:
      name: death_type_concept_id
      in: query
      required: false
      description: Filter by death type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeathQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DeathQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.DeathQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.DeviceExposureQueryParams.device_concept_id:
      name: device_concept_id
      in: query
      required: false
      description: Filter by device concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeviceExposureQueryParams.device_source_concept_id:
      name: device_source_concept_id
      in: query
      required: false
      description: Filter by device source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeviceExposureQueryParams.device_type_concept_id:
      name: device_type_concept_id
      in: query
      required: false
      description: Filter by device type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeviceExposureQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DeviceExposureQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DeviceExposureQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.DeviceExposureQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.DeviceExposureQueryParams.unit_concept_id:
      name: unit_concept_id
      in: query
      required: false
      description: Filter by unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeviceExposureQueryParams.unit_source_concept_id:
      name: unit_source_concept_id
      in: query
      required: false
      description: Filter by unit source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DeviceExposureQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DeviceExposureQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DrugExposureQueryParams.drug_concept_id:
      name: drug_concept_id
      in: query
      required: false
      description: Filter by drug concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DrugExposureQueryParams.drug_source_concept_id:
      name: drug_source_concept_id
      in: query
      required: false
      description: Filter by drug source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DrugExposureQueryParams.drug_type_concept_id:
      name: drug_type_concept_id
      in: query
      required: false
      description: Filter by drug type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DrugExposureQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DrugExposureQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DrugExposureQueryParams.route_concept_id:
      name: route_concept_id
      in: query
      required: false
      description: Filter by route concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.DrugExposureQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.DrugExposureQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.DrugExposureQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.DrugExposureQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.MeasurementQueryParams.meas_event_field_concept_id:
      name: meas_event_field_concept_id
      in: query
      required: false
      description: Filter by meas event field concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.measurement_concept_id:
      name: measurement_concept_id
      in: query
      required: false
      description: Filter by measurement concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.measurement_source_concept_id:
      name: measurement_source_concept_id
      in: query
      required: false
      description: Filter by measurement source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.measurement_type_concept_id:
      name: measurement_type_concept_id
      in: query
      required: false
      description: Filter by measurement type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.operator_concept_id:
      name: operator_concept_id
      in: query
      required: false
      description: Filter by operator concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.MeasurementQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.MeasurementQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.MeasurementQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.MeasurementQueryParams.unit_concept_id:
      name: unit_concept_id
      in: query
      required: false
      description: Filter by unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.unit_source_concept_id:
      name: unit_source_concept_id
      in: query
      required: false
      description: Filter by unit source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.value_as_concept_id:
      name: value_as_concept_id
      in: query
      required: false
      description: Filter by value as concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.MeasurementQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.MeasurementQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.NoteNlpQueryParams.note_nlp_concept_id:
      name: note_nlp_concept_id
      in: query
      required: false
      description: Filter by note nlp concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteNlpQueryParams.note_nlp_source_concept_id:
      name: note_nlp_source_concept_id
      in: query
      required: false
      description: Filter by note nlp source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteNlpQueryParams.section_concept_id:
      name: section_concept_id
      in: query
      required: false
      description: Filter by section concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteNlpQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.NoteNlpQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.NoteQueryParams.encoding_concept_id:
      name: encoding_concept_id
      in: query
      required: false
      description: Filter by encoding concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteQueryParams.language_concept_id:
      name: language_concept_id
      in: query
      required: false
      description: Filter by language concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteQueryParams.note_class_concept_id:
      name: note_class_concept_id
      in: query
      required: false
      description: Filter by note class concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteQueryParams.note_event_field_concept_id:
      name: note_event_field_concept_id
      in: query
      required: false
      description: Filter by note event field concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteQueryParams.note_type_concept_id:
      name: note_type_concept_id
      in: query
      required: false
      description: Filter by note type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.NoteQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.NoteQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.NoteQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.NoteQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.NoteQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.NoteQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ObservationPeriodQueryParams.period_type_concept_id:
      name: period_type_concept_id
      in: query
      required: false
      description: Filter by period type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationPeriodQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ObservationPeriodQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.ObservationPeriodQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.ObservationQueryParams.obs_event_field_concept_id:
      name: obs_event_field_concept_id
      in: query
      required: false
      description: Filter by obs event field concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.observation_concept_id:
      name: observation_concept_id
      in: query
      required: false
      description: Filter by observation concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.observation_source_concept_id:
      name: observation_source_concept_id
      in: query
      required: false
      description: Filter by observation source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.observation_type_concept_id:
      name: observation_type_concept_id
      in: query
      required: false
      description: Filter by observation type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ObservationQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ObservationQueryParams.qualifier_concept_id:
      name: qualifier_concept_id
      in: query
      required: false
      description: Filter by qualifier concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.ObservationQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.ObservationQueryParams.unit_concept_id:
      name: unit_concept_id
      in: query
      required: false
      description: Filter by unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.value_as_concept_id:
      name: value_as_concept_id
      in: query
      required: false
      description: Filter by value as concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ObservationQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ObservationQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.PersonQueryParams.care_site_id:
      name: care_site_id
      in: query
      required: false
      description: Filter by care site id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.PersonQueryParams.ethnicity_concept_id:
      name: ethnicity_concept_id
      in: query
      required: false
      description: Filter by ethnicity concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.PersonQueryParams.ethnicity_source_concept_id:
      name: ethnicity_source_concept_id
      in: query
      required: false
      description: Filter by ethnicity source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.PersonQueryParams.gender_concept_id:
      name: gender_concept_id
      in: query
      required: false
      description: Filter by gender concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.PersonQueryParams.gender_source_concept_id:
      name: gender_source_concept_id
      in: query
      required: false
      description: Filter by gender source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.PersonQueryParams.location_id:
      name: location_id
      in: query
      required: false
      description: Filter by location id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.PersonQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.PersonQueryParams.race_concept_id:
      name: race_concept_id
      in: query
      required: false
      description: Filter by race concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.PersonQueryParams.race_source_concept_id:
      name: race_source_concept_id
      in: query
      required: false
      description: Filter by race source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.PersonQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.PersonQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.modifier_concept_id:
      name: modifier_concept_id
      in: query
      required: false
      description: Filter by modifier concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.procedure_concept_id:
      name: procedure_concept_id
      in: query
      required: false
      description: Filter by procedure concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.procedure_source_concept_id:
      name: procedure_source_concept_id
      in: query
      required: false
      description: Filter by procedure source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.procedure_type_concept_id:
      name: procedure_type_concept_id
      in: query
      required: false
      description: Filter by procedure type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.visit_detail_id:
      name: visit_detail_id
      in: query
      required: false
      description: Filter by visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.ProcedureOccurrenceQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.SpecimenQueryParams.anatomic_site_concept_id:
      name: anatomic_site_concept_id
      in: query
      required: false
      description: Filter by anatomic site concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.SpecimenQueryParams.disease_status_concept_id:
      name: disease_status_concept_id
      in: query
      required: false
      description: Filter by disease status concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.SpecimenQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.SpecimenQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.SpecimenQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.SpecimenQueryParams.specimen_concept_id:
      name: specimen_concept_id
      in: query
      required: false
      description: Filter by specimen concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.SpecimenQueryParams.specimen_type_concept_id:
      name: specimen_type_concept_id
      in: query
      required: false
      description: Filter by specimen type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.SpecimenQueryParams.unit_concept_id:
      name: unit_concept_id
      in: query
      required: false
      description: Filter by unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitDetailQueryParams.admitted_from_concept_id:
      name: admitted_from_concept_id
      in: query
      required: false
      description: Filter by admitted from concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitDetailQueryParams.care_site_id:
      name: care_site_id
      in: query
      required: false
      description: Filter by care site id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitDetailQueryParams.discharged_to_concept_id:
      name: discharged_to_concept_id
      in: query
      required: false
      description: Filter by discharged to concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitDetailQueryParams.parent_visit_detail_id:
      name: parent_visit_detail_id
      in: query
      required: false
      description: Filter by parent visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitDetailQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitDetailQueryParams.preceding_visit_detail_id:
      name: preceding_visit_detail_id
      in: query
      required: false
      description: Filter by preceding visit detail id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitDetailQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitDetailQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.VisitDetailQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.VisitDetailQueryParams.visit_detail_concept_id:
      name: visit_detail_concept_id
      in: query
      required: false
      description: Filter by visit detail concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitDetailQueryParams.visit_detail_source_concept_id:
      name: visit_detail_source_concept_id
      in: query
      required: false
      description: Filter by visit detail source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitDetailQueryParams.visit_detail_type_concept_id:
      name: visit_detail_type_concept_id
      in: query
      required: false
      description: Filter by visit detail type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitDetailQueryParams.visit_occurrence_id:
      name: visit_occurrence_id
      in: query
      required: false
      description: Filter by visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitOccurrenceQueryParams.admitted_from_concept_id:
      name: admitted_from_concept_id
      in: query
      required: false
      description: Filter by admitted from concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitOccurrenceQueryParams.care_site_id:
      name: care_site_id
      in: query
      required: false
      description: Filter by care site id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitOccurrenceQueryParams.discharged_to_concept_id:
      name: discharged_to_concept_id
      in: query
      required: false
      description: Filter by discharged to concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitOccurrenceQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitOccurrenceQueryParams.preceding_visit_occurrence_id:
      name: preceding_visit_occurrence_id
      in: query
      required: false
      description: Filter by preceding visit occurrence id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitOccurrenceQueryParams.provider_id:
      name: provider_id
      in: query
      required: false
      description: Filter by provider id
      schema:
        type: integer
        format: int64
      explode: false
    Clinical.VisitOccurrenceQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Clinical.VisitOccurrenceQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Clinical.VisitOccurrenceQueryParams.visit_concept_id:
      name: visit_concept_id
      in: query
      required: false
      description: Filter by visit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitOccurrenceQueryParams.visit_source_concept_id:
      name: visit_source_concept_id
      in: query
      required: false
      description: Filter by visit source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Clinical.VisitOccurrenceQueryParams.visit_type_concept_id:
      name: visit_type_concept_id
      in: query
      required: false
      description: Filter by visit type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Common.PaginationParams.limit:
      name: limit
      in: query
      required: false
      description: 'Maximum number of items to return (default: 100, max: 1000)'
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 1000
        default: 100
      explode: false
    Common.PaginationParams.offset:
      name: offset
      in: query
      required: false
      description: 'Number of items to skip (default: 0)'
      schema:
        type: integer
        format: int32
        default: 0
      explode: false
    Derived.ConditionEraQueryParams.condition_concept_id:
      name: condition_concept_id
      in: query
      required: false
      description: Filter by condition concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.ConditionEraQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Derived.ConditionEraQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Derived.ConditionEraQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Derived.DoseEraQueryParams.drug_concept_id:
      name: drug_concept_id
      in: query
      required: false
      description: Filter by drug concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.DoseEraQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Derived.DoseEraQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Derived.DoseEraQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Derived.DoseEraQueryParams.unit_concept_id:
      name: unit_concept_id
      in: query
      required: false
      description: Filter by unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.DrugEraQueryParams.drug_concept_id:
      name: drug_concept_id
      in: query
      required: false
      description: Filter by drug concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.DrugEraQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Derived.DrugEraQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Derived.DrugEraQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Derived.EpisodeEventQueryParams.episode_event_field_concept_id:
      name: episode_event_field_concept_id
      in: query
      required: false
      description: Filter by episode event field concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.EpisodeEventQueryParams.episode_id:
      name: episode_id
      in: query
      required: false
      description: Filter by episode id
      schema:
        type: integer
        format: int64
      explode: false
    Derived.EpisodeEventQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Derived.EpisodeEventQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Derived.EpisodeQueryParams.episode_concept_id:
      name: episode_concept_id
      in: query
      required: false
      description: Filter by episode concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.EpisodeQueryParams.episode_object_concept_id:
      name: episode_object_concept_id
      in: query
      required: false
      description: Filter by episode object concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.EpisodeQueryParams.episode_source_concept_id:
      name: episode_source_concept_id
      in: query
      required: false
      description: Filter by episode source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.EpisodeQueryParams.episode_type_concept_id:
      name: episode_type_concept_id
      in: query
      required: false
      description: Filter by episode type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Derived.EpisodeQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Derived.EpisodeQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Derived.EpisodeQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Healthsystem.CareSiteQueryParams.location_id:
      name: location_id
      in: query
      required: false
      description: Filter by location id
      schema:
        type: integer
        format: int64
      explode: false
    Healthsystem.CareSiteQueryParams.place_of_service_concept_id:
      name: place_of_service_concept_id
      in: query
      required: false
      description: Filter by place of service concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.CareSiteQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Healthsystem.CareSiteQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Healthsystem.CostQueryParams.cost_domain_id:
      name: cost_domain_id
      in: query
      required: false
      description: Filter by cost domain id
      schema:
        type: string
      explode: false
    Healthsystem.CostQueryParams.cost_type_concept_id:
      name: cost_type_concept_id
      in: query
      required: false
      description: Filter by cost type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.CostQueryParams.currency_concept_id:
      name: currency_concept_id
      in: query
      required: false
      description: Filter by currency concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.CostQueryParams.drg_concept_id:
      name: drg_concept_id
      in: query
      required: false
      description: Filter by drg concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.CostQueryParams.revenue_code_concept_id:
      name: revenue_code_concept_id
      in: query
      required: false
      description: Filter by revenue code concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.CostQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Healthsystem.CostQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Healthsystem.LocationQueryParams.country_concept_id:
      name: country_concept_id
      in: query
      required: false
      description: Filter by country concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.LocationQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Healthsystem.LocationQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.payer_concept_id:
      name: payer_concept_id
      in: query
      required: false
      description: Filter by payer concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.payer_source_concept_id:
      name: payer_source_concept_id
      in: query
      required: false
      description: Filter by payer source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.person_id:
      name: person_id
      in: query
      required: false
      description: Filter by person id
      schema:
        type: integer
        format: int64
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.plan_concept_id:
      name: plan_concept_id
      in: query
      required: false
      description: Filter by plan concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.plan_source_concept_id:
      name: plan_source_concept_id
      in: query
      required: false
      description: Filter by plan source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.sponsor_concept_id:
      name: sponsor_concept_id
      in: query
      required: false
      description: Filter by sponsor concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.sponsor_source_concept_id:
      name: sponsor_source_concept_id
      in: query
      required: false
      description: Filter by sponsor source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.stop_reason_concept_id:
      name: stop_reason_concept_id
      in: query
      required: false
      description: Filter by stop reason concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.PayerPlanPeriodQueryParams.stop_reason_source_concept_id:
      name: stop_reason_source_concept_id
      in: query
      required: false
      description: Filter by stop reason source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.ProviderQueryParams.care_site_id:
      name: care_site_id
      in: query
      required: false
      description: Filter by care site id
      schema:
        type: integer
        format: int64
      explode: false
    Healthsystem.ProviderQueryParams.gender_concept_id:
      name: gender_concept_id
      in: query
      required: false
      description: Filter by gender concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.ProviderQueryParams.gender_source_concept_id:
      name: gender_source_concept_id
      in: query
      required: false
      description: Filter by gender source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.ProviderQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Healthsystem.ProviderQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Healthsystem.ProviderQueryParams.specialty_concept_id:
      name: specialty_concept_id
      in: query
      required: false
      description: Filter by specialty concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Healthsystem.ProviderQueryParams.specialty_source_concept_id:
      name: specialty_source_concept_id
      in: query
      required: false
      description: Filter by specialty source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Metadata.CdmSourceQueryParams.cdm_version_concept_id:
      name: cdm_version_concept_id
      in: query
      required: false
      description: Filter by cdm version concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Metadata.CdmSourceQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Metadata.CdmSourceQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Metadata.MetadataQueryParams.metadata_concept_id:
      name: metadata_concept_id
      in: query
      required: false
      description: Filter by metadata concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Metadata.MetadataQueryParams.metadata_type_concept_id:
      name: metadata_type_concept_id
      in: query
      required: false
      description: Filter by metadata type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Metadata.MetadataQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Metadata.MetadataQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Metadata.MetadataQueryParams.value_as_concept_id:
      name: value_as_concept_id
      in: query
      required: false
      description: Filter by value as concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Results.CohortDefinitionQueryParams.definition_type_concept_id:
      name: definition_type_concept_id
      in: query
      required: false
      description: Filter by definition type concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Results.CohortDefinitionQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Results.CohortDefinitionQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Results.CohortDefinitionQueryParams.subject_concept_id:
      name: subject_concept_id
      in: query
      required: false
      description: Filter by subject concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Results.CohortQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Results.CohortQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Results.FactRelationshipQueryParams.relationship_concept_id:
      name: relationship_concept_id
      in: query
      required: false
      description: Filter by relationship concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Results.FactRelationshipQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Results.FactRelationshipQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.ConceptAncestorQueryParams.ancestor_concept_id:
      name: ancestor_concept_id
      in: query
      required: false
      description: Filter by ancestor concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.ConceptAncestorQueryParams.descendant_concept_id:
      name: descendant_concept_id
      in: query
      required: false
      description: Filter by descendant concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.ConceptAncestorQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.ConceptAncestorQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.ConceptClassQueryParams.concept_class_concept_id:
      name: concept_class_concept_id
      in: query
      required: false
      description: Filter by concept class concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.ConceptClassQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.ConceptClassQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.ConceptQueryParams.concept_class_id:
      name: concept_class_id
      in: query
      required: false
      description: Filter by concept class id
      schema:
        type: string
      explode: false
    Vocabulary.ConceptQueryParams.domain_id:
      name: domain_id
      in: query
      required: false
      description: Filter by domain id
      schema:
        type: string
      explode: false
    Vocabulary.ConceptQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.ConceptQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.ConceptQueryParams.vocabulary_id:
      name: vocabulary_id
      in: query
      required: false
      description: Filter by vocabulary id
      schema:
        type: string
      explode: false
    Vocabulary.ConceptRelationshipQueryParams.relationship_id:
      name: relationship_id
      in: query
      required: false
      description: Filter by relationship id
      schema:
        type: string
      explode: false
    Vocabulary.ConceptRelationshipQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.ConceptRelationshipQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.ConceptSynonymQueryParams.concept_id:
      name: concept_id
      in: query
      required: false
      description: Filter by concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.ConceptSynonymQueryParams.language_concept_id:
      name: language_concept_id
      in: query
      required: false
      description: Filter by language concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.ConceptSynonymQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.ConceptSynonymQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.DomainQueryParams.domain_concept_id:
      name: domain_concept_id
      in: query
      required: false
      description: Filter by domain concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.DomainQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.DomainQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.DrugStrengthQueryParams.amount_unit_concept_id:
      name: amount_unit_concept_id
      in: query
      required: false
      description: Filter by amount unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.DrugStrengthQueryParams.denominator_unit_concept_id:
      name: denominator_unit_concept_id
      in: query
      required: false
      description: Filter by denominator unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.DrugStrengthQueryParams.drug_concept_id:
      name: drug_concept_id
      in: query
      required: false
      description: Filter by drug concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.DrugStrengthQueryParams.ingredient_concept_id:
      name: ingredient_concept_id
      in: query
      required: false
      description: Filter by ingredient concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.DrugStrengthQueryParams.numerator_unit_concept_id:
      name: numerator_unit_concept_id
      in: query
      required: false
      description: Filter by numerator unit concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.DrugStrengthQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.DrugStrengthQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.RelationshipQueryParams.relationship_concept_id:
      name: relationship_concept_id
      in: query
      required: false
      description: Filter by relationship concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.RelationshipQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.RelationshipQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.SourceToConceptMapQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.SourceToConceptMapQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.SourceToConceptMapQueryParams.source_concept_id:
      name: source_concept_id
      in: query
      required: false
      description: Filter by source concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.SourceToConceptMapQueryParams.target_concept_id:
      name: target_concept_id
      in: query
      required: false
      description: Filter by target concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
    Vocabulary.SourceToConceptMapQueryParams.target_vocabulary_id:
      name: target_vocabulary_id
      in: query
      required: false
      description: Filter by target vocabulary id
      schema:
        type: string
      explode: false
    Vocabulary.VocabularyQueryParams.sort_by:
      name: sort_by
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - id
      explode: false
    Vocabulary.VocabularyQueryParams.sort_order:
      name: sort_order
      in: query
      required: false
      description: Sort order
      schema:
        $ref: '#/components/schemas/Common.SortOrder'
      explode: false
    Vocabulary.VocabularyQueryParams.vocabulary_concept_id:
      name: vocabulary_concept_id
      in: query
      required: false
      description: Filter by vocabulary concept id
      schema:
        $ref: '#/components/schemas/Common.ConceptId'
      explode: false
  schemas:
    Clinical.ConditionOccurrence:
      type: object
      required:
        - id
        - person_id
        - condition_concept_id
        - condition_start_date
        - condition_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to a condition record for a person. Refer to the ETL for how duplicate conditions during the same visit were handled. ETL Convention: Each instance of a condition present in the source data should be assigned this unique key. In some cases, a person can have multiple records of the same condition within the same visit. It is valid to keep these duplicates and assign them individual, unique, CONDITION_OCCURRENCE_IDs, though it is up to the ETL how they should be handled.'
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the condition is recorded. References PERSON table.
        condition_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The CONDITION_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a condition ETL Convention: The CONCEPT_ID that the CONDITION_SOURCE_VALUE maps to. Only records whose source values map to concepts with a domain of “Condition” should go in this table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Condition&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        condition_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the condition ETL Convention: Most often data sources do not have the idea of a start date for a condition. Rather, if a source only has one date associated with a condition record it is acceptable to use that date for both the CONDITION_START_DATE and the CONDITION_END_DATE.'
        condition_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        condition_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the end date of the condition ETL Convention: Most often data sources do not have the idea of a start date for a condition. Rather, if a source only has one date associated with a condition record it is acceptable to use that date for both the CONDITION_START_DATE and the CONDITION_END_DATE.'
        condition_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        condition_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Condition record, as in whether the condition was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the CONDITION_TYPE_CONCEPT_ID that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        condition_status_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This concept represents the point during the visit the diagnosis was given (admitting diagnosis, final diagnosis), whether the diagnosis was determined due to laboratory findings, if the diagnosis was exclusionary, or if it was a preliminary diagnosis, among others. ETL Convention: Choose the Concept in the Condition Status domain that best represents the point during the visit when the diagnosis was given. These can include admitting diagnosis, principal diagnosis, and secondary diagnosis. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Condition+Status&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        stop_reason:
          type: string
          maxLength: 20
          description: 'The Stop Reason indicates why a Condition is no longer valid with respect to the purpose within the source data. Note that a Stop Reason does not necessarily imply that the condition is no longer occurring. ETL Convention: This information is often not populated in source data and it is a valid etl choice to leave it blank if the information does not exist.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with condition record, e.g. the provider who made the diagnosis or the provider who recorded the symptom. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the condition occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a CONDITION_START_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the Visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the CONDITION_OCCURRENCE record. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the condition occurred. For example, if the person was in the ICU at the time of the diagnosis the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        condition_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the condition that occurred. For example, this could be an ICD10 or Read code. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        condition_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the condition source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Condition necessary for a given analytic use case. Consider using CONDITION_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the CONDITION_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        condition_status_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the condition status. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating when and how a diagnosis was given to a patient. This source value is mapped to a standard concept which is stored in the CONDITION_STATUS_CONCEPT_ID field.'
      description: ConditionOccurrence record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        condition_concept_id: 8507
        condition_start_date: '2023-01-15'
        condition_start_datetime: '2023-01-15'
        condition_end_date: '2023-01-15'
        condition_end_datetime: '2023-01-15'
        condition_type_concept_id: 8507
        condition_status_concept_id: 8507
        stop_reason: Example value
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        condition_source_value: Example value
        condition_source_concept_id: 8507
        condition_status_source_value: Example value
    Clinical.ConditionOccurrenceCreate:
      type: object
      required:
        - person_id
        - condition_concept_id
        - condition_start_date
        - condition_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the condition is recorded. References PERSON table.
        condition_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The CONDITION_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a condition ETL Convention: The CONCEPT_ID that the CONDITION_SOURCE_VALUE maps to. Only records whose source values map to concepts with a domain of “Condition” should go in this table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Condition&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        condition_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the condition ETL Convention: Most often data sources do not have the idea of a start date for a condition. Rather, if a source only has one date associated with a condition record it is acceptable to use that date for both the CONDITION_START_DATE and the CONDITION_END_DATE.'
        condition_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        condition_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the end date of the condition ETL Convention: Most often data sources do not have the idea of a start date for a condition. Rather, if a source only has one date associated with a condition record it is acceptable to use that date for both the CONDITION_START_DATE and the CONDITION_END_DATE.'
        condition_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        condition_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Condition record, as in whether the condition was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the CONDITION_TYPE_CONCEPT_ID that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        condition_status_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This concept represents the point during the visit the diagnosis was given (admitting diagnosis, final diagnosis), whether the diagnosis was determined due to laboratory findings, if the diagnosis was exclusionary, or if it was a preliminary diagnosis, among others. ETL Convention: Choose the Concept in the Condition Status domain that best represents the point during the visit when the diagnosis was given. These can include admitting diagnosis, principal diagnosis, and secondary diagnosis. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Condition+Status&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        stop_reason:
          type: string
          maxLength: 20
          description: 'The Stop Reason indicates why a Condition is no longer valid with respect to the purpose within the source data. Note that a Stop Reason does not necessarily imply that the condition is no longer occurring. ETL Convention: This information is often not populated in source data and it is a valid etl choice to leave it blank if the information does not exist.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with condition record, e.g. the provider who made the diagnosis or the provider who recorded the symptom. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the condition occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a CONDITION_START_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the Visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the CONDITION_OCCURRENCE record. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the condition occurred. For example, if the person was in the ICU at the time of the diagnosis the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        condition_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the condition that occurred. For example, this could be an ICD10 or Read code. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        condition_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the condition source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Condition necessary for a given analytic use case. Consider using CONDITION_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the CONDITION_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        condition_status_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the condition status. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating when and how a diagnosis was given to a patient. This source value is mapped to a standard concept which is stored in the CONDITION_STATUS_CONCEPT_ID field.'
      description: Request body for creating a new ConditionOccurrence record
    Clinical.ConditionOccurrenceList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.ConditionOccurrence'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ConditionOccurrence records
      example:
        data:
          - id: 12345
            person_id: 100
            condition_concept_id: 8507
            condition_start_date: '2023-01-15'
            condition_start_datetime: '2023-01-15'
            condition_end_date: '2023-01-15'
            condition_end_datetime: '2023-01-15'
            condition_type_concept_id: 8507
            condition_status_concept_id: 8507
            stop_reason: Example value
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            condition_source_value: Example value
            condition_source_concept_id: 8507
            condition_status_source_value: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.ConditionOccurrenceUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the condition is recorded. References PERSON table.
        condition_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The CONDITION_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a condition ETL Convention: The CONCEPT_ID that the CONDITION_SOURCE_VALUE maps to. Only records whose source values map to concepts with a domain of “Condition” should go in this table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Condition&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        condition_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the condition ETL Convention: Most often data sources do not have the idea of a start date for a condition. Rather, if a source only has one date associated with a condition record it is acceptable to use that date for both the CONDITION_START_DATE and the CONDITION_END_DATE.'
        condition_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        condition_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the end date of the condition ETL Convention: Most often data sources do not have the idea of a start date for a condition. Rather, if a source only has one date associated with a condition record it is acceptable to use that date for both the CONDITION_START_DATE and the CONDITION_END_DATE.'
        condition_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        condition_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Condition record, as in whether the condition was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the CONDITION_TYPE_CONCEPT_ID that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        condition_status_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This concept represents the point during the visit the diagnosis was given (admitting diagnosis, final diagnosis), whether the diagnosis was determined due to laboratory findings, if the diagnosis was exclusionary, or if it was a preliminary diagnosis, among others. ETL Convention: Choose the Concept in the Condition Status domain that best represents the point during the visit when the diagnosis was given. These can include admitting diagnosis, principal diagnosis, and secondary diagnosis. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Condition+Status&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        stop_reason:
          type: string
          description: 'The Stop Reason indicates why a Condition is no longer valid with respect to the purpose within the source data. Note that a Stop Reason does not necessarily imply that the condition is no longer occurring. ETL Convention: This information is often not populated in source data and it is a valid etl choice to leave it blank if the information does not exist.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with condition record, e.g. the provider who made the diagnosis or the provider who recorded the symptom. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the condition occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a CONDITION_START_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the Visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the CONDITION_OCCURRENCE record. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the condition occurred. For example, if the person was in the ICU at the time of the diagnosis the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        condition_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the condition that occurred. For example, this could be an ICD10 or Read code. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        condition_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the condition source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Condition necessary for a given analytic use case. Consider using CONDITION_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the CONDITION_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        condition_status_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the condition status. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating when and how a diagnosis was given to a patient. This source value is mapped to a standard concept which is stored in the CONDITION_STATUS_CONCEPT_ID field.'
      description: Request body for updating an existing ConditionOccurrence record
    Clinical.Death:
      type: object
      required:
        - person_id
        - death_date
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        death_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date the person was deceased. ETL Convention: If the precise date include day or month is not known or not allowed, December is used as the default month, and the last day of the month the default day. For additional conventions related to this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_death_date.html).'
        death_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If you have date and time of death, populate death_datetime, otherwise leave NULL
        death_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the provenance of the death record, i.e., where it came from. It is possible that an administrative claims database would source death information from a government file so do not assume the Death Type is the same as the Visit Type, etc. ETL Convention: Use the type concept that reflects the source of the death record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        cause_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the Standard Concept representing the Person’s cause of death, if available. ETL Convention: There is no specified domain for this concept, just choose the Standard Concept Id that best represents the person’s cause of death. References CONCEPT table.'
        cause_source_value:
          type: string
          maxLength: 50
          description: If available, put the source code representing the cause of death here.
        cause_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the cause of death was coded using a Vocabulary present in the OMOP Vocabularies (not necessarily a standard concept) put the CONCEPT_ID representing the cause of death here. References CONCEPT table.
      description: Death record in the OMOP CDM
      example:
        person_id: 100
        death_date: '2023-01-15'
        death_datetime: '2023-01-15'
        death_type_concept_id: 8507
        cause_concept_id: 8507
        cause_source_value: Example value
        cause_source_concept_id: 8507
    Clinical.DeathCreate:
      type: object
      required:
        - person_id
        - death_date
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        death_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date the person was deceased. ETL Convention: If the precise date include day or month is not known or not allowed, December is used as the default month, and the last day of the month the default day. For additional conventions related to this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_death_date.html).'
        death_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If you have date and time of death, populate death_datetime, otherwise leave NULL
        death_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the provenance of the death record, i.e., where it came from. It is possible that an administrative claims database would source death information from a government file so do not assume the Death Type is the same as the Visit Type, etc. ETL Convention: Use the type concept that reflects the source of the death record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        cause_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the Standard Concept representing the Person’s cause of death, if available. ETL Convention: There is no specified domain for this concept, just choose the Standard Concept Id that best represents the person’s cause of death. References CONCEPT table.'
        cause_source_value:
          type: string
          maxLength: 50
          description: If available, put the source code representing the cause of death here.
        cause_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the cause of death was coded using a Vocabulary present in the OMOP Vocabularies (not necessarily a standard concept) put the CONCEPT_ID representing the cause of death here. References CONCEPT table.
      description: Request body for creating a new Death record
    Clinical.DeathList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.Death'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Death records
      example:
        data:
          - person_id: 100
            death_date: '2023-01-15'
            death_datetime: '2023-01-15'
            death_type_concept_id: 8507
            cause_concept_id: 8507
            cause_source_value: Example value
            cause_source_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.DeathUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        death_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date the person was deceased. ETL Convention: If the precise date include day or month is not known or not allowed, December is used as the default month, and the last day of the month the default day. For additional conventions related to this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_death_date.html).'
        death_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If you have date and time of death, populate death_datetime, otherwise leave NULL
        death_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the provenance of the death record, i.e., where it came from. It is possible that an administrative claims database would source death information from a government file so do not assume the Death Type is the same as the Visit Type, etc. ETL Convention: Use the type concept that reflects the source of the death record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        cause_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the Standard Concept representing the Person’s cause of death, if available. ETL Convention: There is no specified domain for this concept, just choose the Standard Concept Id that best represents the person’s cause of death. References CONCEPT table.'
        cause_source_value:
          type: string
          description: If available, put the source code representing the cause of death here.
        cause_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the cause of death was coded using a Vocabulary present in the OMOP Vocabularies (not necessarily a standard concept) put the CONCEPT_ID representing the cause of death here. References CONCEPT table.
      description: Request body for updating an existing Death record
    Clinical.DeviceExposure:
      type: object
      required:
        - id
        - person_id
        - device_concept_id
        - device_exposure_start_date
        - device_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to records a person’s exposure to a foreign physical object or instrument. ETL Convention: Each instance of an exposure to a foreign object or device present in the source data should be assigned this unique key.'
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        device_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The DEVICE_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source concept id which represents a foreign object or instrument the person was exposed to. ETL Convention: The CONCEPT_ID that the DEVICE_SOURCE_VALUE maps to. References CONCEPT table.'
        device_exposure_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the device record. ETL Convention: Valid entries include a start date of a procedure to implant a device, the date of a prescription for a device, or the date of device administration.'
        device_exposure_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        device_exposure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The DEVICE_EXPOSURE_END_DATE denotes the day the device exposure ended for the patient, if given. ETL Convention: Put the end date or discontinuation date as it appears from the source data or leave blank if unavailable.'
        device_exposure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        device_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'You can use the TYPE_CONCEPT_ID to denote the provenance of the record, as in whether the record is from administrative claims or EHR. ETL Convention: Choose the device_type_concept_id that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        unique_device_id:
          type: string
          maxLength: 255
          description: 'This is the Unique Device Identification (UDI-DI) number for devices regulated by the FDA, if given. ETL Convention: For medical devices that are regulated by the FDA, a Unique Device Identification (UDI) is provided if available in the data source and is recorded in the UNIQUE_DEVICE_ID field.'
        production_id:
          type: string
          maxLength: 255
          description: This is the Production Identifier (UDI-PI) portion of the Unique Device Identification.
        quantity:
          type: integer
          format: int64
          description: If there is a record of device exposure in the source but no quantity value, then set to 1.
        provider_id:
          type: integer
          format: int64
          description: 'The Provider associated with device record, e.g. the provider who wrote the prescription or the provider who implanted the device. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The Visit during which the device was prescribed or given. ETL Convention: To populate this field device exposures must be explicitly initiated in the visit. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The Visit Detail during which the device was prescribed or given. ETL Convention: To populate this field device exposures must be explicitly initiated in the visit detail record. References VISIT_DETAIL table.'
        device_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the device exposure that occurred. For example, this could be an NDC or Gemscript code. ETL Convention: This code is mapped to a Standard Device Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        device_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the device source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Device necessary for a given analytic use case. Consider using DEVICE_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the DEVICE_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'UNIT_SOURCE_VALUES should be mapped to a Standard Concept in the Unit domain that best represents the unit as given in the source data. ETL Convention: There is no standardization requirement for units associated with DEVICE_CONCEPT_IDs, however, it is the responsibility of the ETL to choose the most plausible unit. If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        unit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the unit of the Device. For example, blood transfusions are considered devices and can be given in mL quantities. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference. Using the blood transfusion example, blood transfusion is represented by the DEVICE_CONCEPT_ID and the unit (mL) would be housed in the UNIT_SOURCE_VALUE and mapped to a standard concept in the unit domain.'
        unit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the UNIT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Unit necessary for a given analytic use case. Consider using UNIT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the UNIT_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
      description: DeviceExposure record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        device_concept_id: 8507
        device_exposure_start_date: '2023-01-15'
        device_exposure_start_datetime: '2023-01-15'
        device_exposure_end_date: '2023-01-15'
        device_exposure_end_datetime: '2023-01-15'
        device_type_concept_id: 8507
        unique_device_id: Example value
        production_id: Example value
        quantity: 100
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        device_source_value: Example value
        device_source_concept_id: 8507
        unit_concept_id: 8507
        unit_source_value: Example value
        unit_source_concept_id: 8507
    Clinical.DeviceExposureCreate:
      type: object
      required:
        - person_id
        - device_concept_id
        - device_exposure_start_date
        - device_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        device_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The DEVICE_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source concept id which represents a foreign object or instrument the person was exposed to. ETL Convention: The CONCEPT_ID that the DEVICE_SOURCE_VALUE maps to. References CONCEPT table.'
        device_exposure_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the device record. ETL Convention: Valid entries include a start date of a procedure to implant a device, the date of a prescription for a device, or the date of device administration.'
        device_exposure_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        device_exposure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The DEVICE_EXPOSURE_END_DATE denotes the day the device exposure ended for the patient, if given. ETL Convention: Put the end date or discontinuation date as it appears from the source data or leave blank if unavailable.'
        device_exposure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        device_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'You can use the TYPE_CONCEPT_ID to denote the provenance of the record, as in whether the record is from administrative claims or EHR. ETL Convention: Choose the device_type_concept_id that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        unique_device_id:
          type: string
          maxLength: 255
          description: 'This is the Unique Device Identification (UDI-DI) number for devices regulated by the FDA, if given. ETL Convention: For medical devices that are regulated by the FDA, a Unique Device Identification (UDI) is provided if available in the data source and is recorded in the UNIQUE_DEVICE_ID field.'
        production_id:
          type: string
          maxLength: 255
          description: This is the Production Identifier (UDI-PI) portion of the Unique Device Identification.
        quantity:
          type: integer
          format: int64
          description: If there is a record of device exposure in the source but no quantity value, then set to 1.
        provider_id:
          type: integer
          format: int64
          description: 'The Provider associated with device record, e.g. the provider who wrote the prescription or the provider who implanted the device. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The Visit during which the device was prescribed or given. ETL Convention: To populate this field device exposures must be explicitly initiated in the visit. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The Visit Detail during which the device was prescribed or given. ETL Convention: To populate this field device exposures must be explicitly initiated in the visit detail record. References VISIT_DETAIL table.'
        device_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the device exposure that occurred. For example, this could be an NDC or Gemscript code. ETL Convention: This code is mapped to a Standard Device Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        device_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the device source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Device necessary for a given analytic use case. Consider using DEVICE_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the DEVICE_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'UNIT_SOURCE_VALUES should be mapped to a Standard Concept in the Unit domain that best represents the unit as given in the source data. ETL Convention: There is no standardization requirement for units associated with DEVICE_CONCEPT_IDs, however, it is the responsibility of the ETL to choose the most plausible unit. If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        unit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the unit of the Device. For example, blood transfusions are considered devices and can be given in mL quantities. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference. Using the blood transfusion example, blood transfusion is represented by the DEVICE_CONCEPT_ID and the unit (mL) would be housed in the UNIT_SOURCE_VALUE and mapped to a standard concept in the unit domain.'
        unit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the UNIT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Unit necessary for a given analytic use case. Consider using UNIT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the UNIT_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
      description: Request body for creating a new DeviceExposure record
    Clinical.DeviceExposureList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.DeviceExposure'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of DeviceExposure records
      example:
        data:
          - id: 12345
            person_id: 100
            device_concept_id: 8507
            device_exposure_start_date: '2023-01-15'
            device_exposure_start_datetime: '2023-01-15'
            device_exposure_end_date: '2023-01-15'
            device_exposure_end_datetime: '2023-01-15'
            device_type_concept_id: 8507
            unique_device_id: Example value
            production_id: Example value
            quantity: 100
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            device_source_value: Example value
            device_source_concept_id: 8507
            unit_concept_id: 8507
            unit_source_value: Example value
            unit_source_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.DeviceExposureUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        device_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The DEVICE_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source concept id which represents a foreign object or instrument the person was exposed to. ETL Convention: The CONCEPT_ID that the DEVICE_SOURCE_VALUE maps to. References CONCEPT table.'
        device_exposure_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the device record. ETL Convention: Valid entries include a start date of a procedure to implant a device, the date of a prescription for a device, or the date of device administration.'
        device_exposure_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        device_exposure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The DEVICE_EXPOSURE_END_DATE denotes the day the device exposure ended for the patient, if given. ETL Convention: Put the end date or discontinuation date as it appears from the source data or leave blank if unavailable.'
        device_exposure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        device_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'You can use the TYPE_CONCEPT_ID to denote the provenance of the record, as in whether the record is from administrative claims or EHR. ETL Convention: Choose the device_type_concept_id that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        unique_device_id:
          type: string
          description: 'This is the Unique Device Identification (UDI-DI) number for devices regulated by the FDA, if given. ETL Convention: For medical devices that are regulated by the FDA, a Unique Device Identification (UDI) is provided if available in the data source and is recorded in the UNIQUE_DEVICE_ID field.'
        production_id:
          type: string
          description: This is the Production Identifier (UDI-PI) portion of the Unique Device Identification.
        quantity:
          type: integer
          format: int64
          description: If there is a record of device exposure in the source but no quantity value, then set to 1.
        provider_id:
          type: integer
          format: int64
          description: 'The Provider associated with device record, e.g. the provider who wrote the prescription or the provider who implanted the device. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The Visit during which the device was prescribed or given. ETL Convention: To populate this field device exposures must be explicitly initiated in the visit. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The Visit Detail during which the device was prescribed or given. ETL Convention: To populate this field device exposures must be explicitly initiated in the visit detail record. References VISIT_DETAIL table.'
        device_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the device exposure that occurred. For example, this could be an NDC or Gemscript code. ETL Convention: This code is mapped to a Standard Device Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        device_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the device source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Device necessary for a given analytic use case. Consider using DEVICE_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the DEVICE_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'UNIT_SOURCE_VALUES should be mapped to a Standard Concept in the Unit domain that best represents the unit as given in the source data. ETL Convention: There is no standardization requirement for units associated with DEVICE_CONCEPT_IDs, however, it is the responsibility of the ETL to choose the most plausible unit. If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        unit_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the unit of the Device. For example, blood transfusions are considered devices and can be given in mL quantities. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference. Using the blood transfusion example, blood transfusion is represented by the DEVICE_CONCEPT_ID and the unit (mL) would be housed in the UNIT_SOURCE_VALUE and mapped to a standard concept in the unit domain.'
        unit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the UNIT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Unit necessary for a given analytic use case. Consider using UNIT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the UNIT_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
      description: Request body for updating an existing DeviceExposure record
    Clinical.DrugExposure:
      type: object
      required:
        - id
        - person_id
        - drug_concept_id
        - drug_exposure_start_date
        - drug_exposure_end_date
        - drug_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to records of drug dispensings or administrations for a person. Refer to the ETL for how duplicate drugs during the same visit were handled. ETL Convention: Each instance of a drug dispensing or administration present in the source data should be assigned this unique key. In some cases, a person can have multiple records of the same drug within the same visit. It is valid to keep these duplicates and assign them individual, unique, DRUG_EXPOSURE_IDs, though it is up to the ETL how they should be handled.'
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the drug dispensing or administration is recorded. This may be a system generated code. References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The DRUG_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source concept id which represents a drug product or molecule otherwise introduced to the body. The drug concepts can have a varying degree of information about drug strength and dose. This information is relevant in the context of quantity and administration information in the subsequent fields plus strength information from the DRUG_STRENGTH table, provided as part of the standard vocabulary download. ETL Convention: The CONCEPT_ID that the DRUG_SOURCE_VALUE maps to. The concept id should be derived either from mapping from the source concept id or by picking the drug concept representing the most amount of detail you have. Records whose source values map to standard concepts with a domain of Drug should go in this table. When the Drug Source Value of the code cannot be translated into Standard Drug Concept IDs, a Drug exposure entry is stored with only the corresponding SOURCE_CONCEPT_ID and DRUG_SOURCE_VALUE and a DRUG_CONCEPT_ID of 0. The Drug Concept with the most detailed content of information is preferred during the mapping process. These are indicated in the CONCEPT_CLASS_ID field of the Concept and are recorded in the following order of precedence: Marketed Product, Branded Pack, Clinical Pack, Branded Drug, Clinical Drug, Branded Drug Component, Clinical Drug Component, Branded Drug Form, Clinical Drug Form, and only if no other information is available Ingredient. Note: If only the drug class is known, the DRUG_CONCEPT_ID field should contain 0. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Drug&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        drug_exposure_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the drug record. ETL Convention: Valid entries include a start date of a prescription, the date a prescription was filled, or the date on which a Drug administration was recorded. It is a valid ETL choice to use the date the drug was ordered as the DRUG_EXPOSURE_START_DATE.'
        drug_exposure_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        drug_exposure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The DRUG_EXPOSURE_END_DATE denotes the day the drug exposure ended for the patient. ETL Convention: If this information is not explicitly available in the data, infer the end date from start date and duration. For detailed conventions for how to populate this field, please see the [THEMIS repository](https://ohdsi.github.io/Themis/tag_drug_exposure.html).'
        drug_exposure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        verbatim_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This is the end date of the drug exposure as it appears in the source data, if it is given ETL Convention: Put the end date or discontinuation date as it appears from the source data or leave blank if unavailable.'
        drug_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'You can use the TYPE_CONCEPT_ID to delineate between prescriptions written vs. prescriptions dispensed vs. medication history vs. patient-reported exposure, etc. ETL Convention: Choose the drug_type_concept_id that best represents the provenance of the record, for example whether it came from a record of a prescription written or physician administered drug. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        stop_reason:
          type: string
          maxLength: 20
          description: 'The reason a person stopped a medication as it is represented in the source. Reasons include regimen completed, changed, removed, etc. This field will be retired in v6.0. ETL Convention: This information is often not populated in source data and it is a valid etl choice to leave it blank if the information does not exist.'
        refills:
          type: integer
          format: int64
          description: This is only filled in when the record is coming from a prescription written this field is meant to represent intended refills at time of the prescription.
        quantity:
          type: number
          format: double
          description: To find the dose form of a drug the RELATIONSHIP table can be used where the relationship_id is ‘Has dose form’. If liquid, quantity stands for the total amount dispensed or ordered of ingredient in the units given by the drug_strength table. If the unit from the source data does not align with the unit in the DRUG_STRENGTH table the quantity should be converted to the correct unit given in DRUG_STRENGTH. For clinical drugs with fixed dose forms (tablets etc.) the quantity is the number of units/tablets/capsules prescribed or dispensed (can be partial, but then only 1/2 or 1/3, not 0.01). Clinical drugs with divisible dose forms (injections) the quantity is the amount of ingredient the patient got. For example, if the injection is 2mg/mL but the patient got 80mL then quantity is reported as 160. Quantified clinical drugs with divisible dose forms (prefilled syringes), the quantity is the amount of ingredient similar to clinical drugs. Please see [how to calculate drug dose](https://ohdsi.github.io/CommonDataModel/drug_dose.html) for more information.
        days_supply:
          type: integer
          format: int64
          description: 'The number of days of supply of the medication as recorded in the original prescription or dispensing record. Days supply can differ from actual drug duration (i.e. prescribed days supply vs actual exposure).”,“The field should be left empty if the source data does not contain a verbatim days_supply, and should not be calculated from other fields. Negative values are not allowed. If the source has negative days supply the record should be dropped as it is unknown if the patient actually took the drug. Several actions are possible: 1) record is not trustworthy and we remove the record entirely. 2) we trust the record and leave days_supply empty or 3) record needs to be combined with other record (e.g. reversal of prescription). High values (>365 days) should be investigated. If considered an error in the source data (e.g. typo), the value needs to be excluded to prevent creation of unrealistic long eras.'
        sig:
          type: string
          description: 'This is the verbatim instruction for the drug as written by the provider. ETL Convention: Put the written out instructions for the drug as it is verbatim in the source, if available.'
        route_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The standard CONCEPT_ID that the ROUTE_SOURCE_VALUE maps to in the route domain. This is meant to represent the route of administration of the drug. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Route&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.
        lot_number:
          type: string
          maxLength: 50
          description: ''
        provider_id:
          type: integer
          format: int64
          description: 'The Provider associated with drug record, e.g. the provider who wrote the prescription or the provider who administered the drug. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the ordering vs administering physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The Visit during which the drug was prescribed, administered or dispensed. ETL Convention: To populate this field drug exposures must be explicitly initiated in the visit. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the drug exposure occurred. For example, if the person was in the ICU at the time of the drug administration the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        drug_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the drug exposure that occurred. For example, this could be an NDC or Gemscript code. ETL Convention: This code is mapped to a Standard Drug Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        drug_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the drug source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Drug necessary for a given analytic use case. Consider using DRUG_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the DRUG_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        route_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the drug route. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating when and how a drug was given to a patient. This source value is mapped to a standard concept which is stored in the ROUTE_CONCEPT_ID field.'
        dose_unit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the dose unit of the drug given. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating the unit of dosage of drug given to the patient. **This is an older column and will be deprecated in an upcoming version.**'
      description: DrugExposure record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        drug_concept_id: 8507
        drug_exposure_start_date: '2023-01-15'
        drug_exposure_start_datetime: '2023-01-15'
        drug_exposure_end_date: '2023-01-15'
        drug_exposure_end_datetime: '2023-01-15'
        verbatim_end_date: '2023-01-15'
        drug_type_concept_id: 8507
        stop_reason: Example value
        refills: 100
        quantity: 98.6
        days_supply: 100
        sig: Example value
        route_concept_id: 8507
        lot_number: Example value
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        drug_source_value: Example value
        drug_source_concept_id: 8507
        route_source_value: Example value
        dose_unit_source_value: Example value
    Clinical.DrugExposureCreate:
      type: object
      required:
        - person_id
        - drug_concept_id
        - drug_exposure_start_date
        - drug_exposure_end_date
        - drug_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the drug dispensing or administration is recorded. This may be a system generated code. References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The DRUG_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source concept id which represents a drug product or molecule otherwise introduced to the body. The drug concepts can have a varying degree of information about drug strength and dose. This information is relevant in the context of quantity and administration information in the subsequent fields plus strength information from the DRUG_STRENGTH table, provided as part of the standard vocabulary download. ETL Convention: The CONCEPT_ID that the DRUG_SOURCE_VALUE maps to. The concept id should be derived either from mapping from the source concept id or by picking the drug concept representing the most amount of detail you have. Records whose source values map to standard concepts with a domain of Drug should go in this table. When the Drug Source Value of the code cannot be translated into Standard Drug Concept IDs, a Drug exposure entry is stored with only the corresponding SOURCE_CONCEPT_ID and DRUG_SOURCE_VALUE and a DRUG_CONCEPT_ID of 0. The Drug Concept with the most detailed content of information is preferred during the mapping process. These are indicated in the CONCEPT_CLASS_ID field of the Concept and are recorded in the following order of precedence: Marketed Product, Branded Pack, Clinical Pack, Branded Drug, Clinical Drug, Branded Drug Component, Clinical Drug Component, Branded Drug Form, Clinical Drug Form, and only if no other information is available Ingredient. Note: If only the drug class is known, the DRUG_CONCEPT_ID field should contain 0. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Drug&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        drug_exposure_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the drug record. ETL Convention: Valid entries include a start date of a prescription, the date a prescription was filled, or the date on which a Drug administration was recorded. It is a valid ETL choice to use the date the drug was ordered as the DRUG_EXPOSURE_START_DATE.'
        drug_exposure_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        drug_exposure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The DRUG_EXPOSURE_END_DATE denotes the day the drug exposure ended for the patient. ETL Convention: If this information is not explicitly available in the data, infer the end date from start date and duration. For detailed conventions for how to populate this field, please see the [THEMIS repository](https://ohdsi.github.io/Themis/tag_drug_exposure.html).'
        drug_exposure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        verbatim_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This is the end date of the drug exposure as it appears in the source data, if it is given ETL Convention: Put the end date or discontinuation date as it appears from the source data or leave blank if unavailable.'
        drug_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'You can use the TYPE_CONCEPT_ID to delineate between prescriptions written vs. prescriptions dispensed vs. medication history vs. patient-reported exposure, etc. ETL Convention: Choose the drug_type_concept_id that best represents the provenance of the record, for example whether it came from a record of a prescription written or physician administered drug. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        stop_reason:
          type: string
          maxLength: 20
          description: 'The reason a person stopped a medication as it is represented in the source. Reasons include regimen completed, changed, removed, etc. This field will be retired in v6.0. ETL Convention: This information is often not populated in source data and it is a valid etl choice to leave it blank if the information does not exist.'
        refills:
          type: integer
          format: int64
          description: This is only filled in when the record is coming from a prescription written this field is meant to represent intended refills at time of the prescription.
        quantity:
          type: number
          format: double
          description: To find the dose form of a drug the RELATIONSHIP table can be used where the relationship_id is ‘Has dose form’. If liquid, quantity stands for the total amount dispensed or ordered of ingredient in the units given by the drug_strength table. If the unit from the source data does not align with the unit in the DRUG_STRENGTH table the quantity should be converted to the correct unit given in DRUG_STRENGTH. For clinical drugs with fixed dose forms (tablets etc.) the quantity is the number of units/tablets/capsules prescribed or dispensed (can be partial, but then only 1/2 or 1/3, not 0.01). Clinical drugs with divisible dose forms (injections) the quantity is the amount of ingredient the patient got. For example, if the injection is 2mg/mL but the patient got 80mL then quantity is reported as 160. Quantified clinical drugs with divisible dose forms (prefilled syringes), the quantity is the amount of ingredient similar to clinical drugs. Please see [how to calculate drug dose](https://ohdsi.github.io/CommonDataModel/drug_dose.html) for more information.
        days_supply:
          type: integer
          format: int64
          description: 'The number of days of supply of the medication as recorded in the original prescription or dispensing record. Days supply can differ from actual drug duration (i.e. prescribed days supply vs actual exposure).”,“The field should be left empty if the source data does not contain a verbatim days_supply, and should not be calculated from other fields. Negative values are not allowed. If the source has negative days supply the record should be dropped as it is unknown if the patient actually took the drug. Several actions are possible: 1) record is not trustworthy and we remove the record entirely. 2) we trust the record and leave days_supply empty or 3) record needs to be combined with other record (e.g. reversal of prescription). High values (>365 days) should be investigated. If considered an error in the source data (e.g. typo), the value needs to be excluded to prevent creation of unrealistic long eras.'
        sig:
          type: string
          description: 'This is the verbatim instruction for the drug as written by the provider. ETL Convention: Put the written out instructions for the drug as it is verbatim in the source, if available.'
        route_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The standard CONCEPT_ID that the ROUTE_SOURCE_VALUE maps to in the route domain. This is meant to represent the route of administration of the drug. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Route&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.
        lot_number:
          type: string
          maxLength: 50
          description: ''
        provider_id:
          type: integer
          format: int64
          description: 'The Provider associated with drug record, e.g. the provider who wrote the prescription or the provider who administered the drug. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the ordering vs administering physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The Visit during which the drug was prescribed, administered or dispensed. ETL Convention: To populate this field drug exposures must be explicitly initiated in the visit. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the drug exposure occurred. For example, if the person was in the ICU at the time of the drug administration the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        drug_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the drug exposure that occurred. For example, this could be an NDC or Gemscript code. ETL Convention: This code is mapped to a Standard Drug Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        drug_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the drug source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Drug necessary for a given analytic use case. Consider using DRUG_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the DRUG_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        route_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the drug route. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating when and how a drug was given to a patient. This source value is mapped to a standard concept which is stored in the ROUTE_CONCEPT_ID field.'
        dose_unit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the dose unit of the drug given. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating the unit of dosage of drug given to the patient. **This is an older column and will be deprecated in an upcoming version.**'
      description: Request body for creating a new DrugExposure record
    Clinical.DrugExposureList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.DrugExposure'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of DrugExposure records
      example:
        data:
          - id: 12345
            person_id: 100
            drug_concept_id: 8507
            drug_exposure_start_date: '2023-01-15'
            drug_exposure_start_datetime: '2023-01-15'
            drug_exposure_end_date: '2023-01-15'
            drug_exposure_end_datetime: '2023-01-15'
            verbatim_end_date: '2023-01-15'
            drug_type_concept_id: 8507
            stop_reason: Example value
            refills: 100
            quantity: 98.6
            days_supply: 100
            sig: Example value
            route_concept_id: 8507
            lot_number: Example value
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            drug_source_value: Example value
            drug_source_concept_id: 8507
            route_source_value: Example value
            dose_unit_source_value: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.DrugExposureUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the drug dispensing or administration is recorded. This may be a system generated code. References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The DRUG_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source concept id which represents a drug product or molecule otherwise introduced to the body. The drug concepts can have a varying degree of information about drug strength and dose. This information is relevant in the context of quantity and administration information in the subsequent fields plus strength information from the DRUG_STRENGTH table, provided as part of the standard vocabulary download. ETL Convention: The CONCEPT_ID that the DRUG_SOURCE_VALUE maps to. The concept id should be derived either from mapping from the source concept id or by picking the drug concept representing the most amount of detail you have. Records whose source values map to standard concepts with a domain of Drug should go in this table. When the Drug Source Value of the code cannot be translated into Standard Drug Concept IDs, a Drug exposure entry is stored with only the corresponding SOURCE_CONCEPT_ID and DRUG_SOURCE_VALUE and a DRUG_CONCEPT_ID of 0. The Drug Concept with the most detailed content of information is preferred during the mapping process. These are indicated in the CONCEPT_CLASS_ID field of the Concept and are recorded in the following order of precedence: Marketed Product, Branded Pack, Clinical Pack, Branded Drug, Clinical Drug, Branded Drug Component, Clinical Drug Component, Branded Drug Form, Clinical Drug Form, and only if no other information is available Ingredient. Note: If only the drug class is known, the DRUG_CONCEPT_ID field should contain 0. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Drug&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        drug_exposure_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the drug record. ETL Convention: Valid entries include a start date of a prescription, the date a prescription was filled, or the date on which a Drug administration was recorded. It is a valid ETL choice to use the date the drug was ordered as the DRUG_EXPOSURE_START_DATE.'
        drug_exposure_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        drug_exposure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The DRUG_EXPOSURE_END_DATE denotes the day the drug exposure ended for the patient. ETL Convention: If this information is not explicitly available in the data, infer the end date from start date and duration. For detailed conventions for how to populate this field, please see the [THEMIS repository](https://ohdsi.github.io/Themis/tag_drug_exposure.html).'
        drug_exposure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        verbatim_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This is the end date of the drug exposure as it appears in the source data, if it is given ETL Convention: Put the end date or discontinuation date as it appears from the source data or leave blank if unavailable.'
        drug_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'You can use the TYPE_CONCEPT_ID to delineate between prescriptions written vs. prescriptions dispensed vs. medication history vs. patient-reported exposure, etc. ETL Convention: Choose the drug_type_concept_id that best represents the provenance of the record, for example whether it came from a record of a prescription written or physician administered drug. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        stop_reason:
          type: string
          description: 'The reason a person stopped a medication as it is represented in the source. Reasons include regimen completed, changed, removed, etc. This field will be retired in v6.0. ETL Convention: This information is often not populated in source data and it is a valid etl choice to leave it blank if the information does not exist.'
        refills:
          type: integer
          format: int64
          description: This is only filled in when the record is coming from a prescription written this field is meant to represent intended refills at time of the prescription.
        quantity:
          type: number
          format: double
          description: To find the dose form of a drug the RELATIONSHIP table can be used where the relationship_id is ‘Has dose form’. If liquid, quantity stands for the total amount dispensed or ordered of ingredient in the units given by the drug_strength table. If the unit from the source data does not align with the unit in the DRUG_STRENGTH table the quantity should be converted to the correct unit given in DRUG_STRENGTH. For clinical drugs with fixed dose forms (tablets etc.) the quantity is the number of units/tablets/capsules prescribed or dispensed (can be partial, but then only 1/2 or 1/3, not 0.01). Clinical drugs with divisible dose forms (injections) the quantity is the amount of ingredient the patient got. For example, if the injection is 2mg/mL but the patient got 80mL then quantity is reported as 160. Quantified clinical drugs with divisible dose forms (prefilled syringes), the quantity is the amount of ingredient similar to clinical drugs. Please see [how to calculate drug dose](https://ohdsi.github.io/CommonDataModel/drug_dose.html) for more information.
        days_supply:
          type: integer
          format: int64
          description: 'The number of days of supply of the medication as recorded in the original prescription or dispensing record. Days supply can differ from actual drug duration (i.e. prescribed days supply vs actual exposure).”,“The field should be left empty if the source data does not contain a verbatim days_supply, and should not be calculated from other fields. Negative values are not allowed. If the source has negative days supply the record should be dropped as it is unknown if the patient actually took the drug. Several actions are possible: 1) record is not trustworthy and we remove the record entirely. 2) we trust the record and leave days_supply empty or 3) record needs to be combined with other record (e.g. reversal of prescription). High values (>365 days) should be investigated. If considered an error in the source data (e.g. typo), the value needs to be excluded to prevent creation of unrealistic long eras.'
        sig:
          type: string
          description: 'This is the verbatim instruction for the drug as written by the provider. ETL Convention: Put the written out instructions for the drug as it is verbatim in the source, if available.'
        route_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The standard CONCEPT_ID that the ROUTE_SOURCE_VALUE maps to in the route domain. This is meant to represent the route of administration of the drug. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Route&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.
        lot_number:
          type: string
          description: ''
        provider_id:
          type: integer
          format: int64
          description: 'The Provider associated with drug record, e.g. the provider who wrote the prescription or the provider who administered the drug. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the ordering vs administering physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The Visit during which the drug was prescribed, administered or dispensed. ETL Convention: To populate this field drug exposures must be explicitly initiated in the visit. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the drug exposure occurred. For example, if the person was in the ICU at the time of the drug administration the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        drug_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the drug exposure that occurred. For example, this could be an NDC or Gemscript code. ETL Convention: This code is mapped to a Standard Drug Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        drug_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the drug source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Drug necessary for a given analytic use case. Consider using DRUG_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the DRUG_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        route_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the drug route. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating when and how a drug was given to a patient. This source value is mapped to a standard concept which is stored in the ROUTE_CONCEPT_ID field.'
        dose_unit_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the dose unit of the drug given. ETL Convention: This information may be called something different in the source data but the field is meant to contain a value indicating the unit of dosage of drug given to the patient. **This is an older column and will be deprecated in an upcoming version.**'
      description: Request body for updating an existing DrugExposure record
    Clinical.Measurement:
      type: object
      required:
        - id
        - person_id
        - measurement_concept_id
        - measurement_date
        - measurement_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to a Measurement record for a Person. Refer to the ETL for how duplicate Measurements during the same Visit were handled. ETL Convention: Each instance of a measurement present in the source data should be assigned this unique key. In some cases, a person can have multiple records of the same measurement within the same visit. It is valid to keep these duplicates and assign them individual, unique, MEASUREMENT_IDs, though it is up to the ETL how they should be handled.'
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the Person for whom the Measurement is recorded. This may be a system generated code. References PERSON table.
        measurement_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The MEASUREMENT_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a measurement. ETL Convention: The CONCEPT_ID that the MEASUREMENT_SOURCE_VALUE maps to. Only records whose source values map to concepts with a domain of �Measurement� should go in this table. References CONCEPT table.'
        measurement_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the date of the measurement. ETL Convention: If there are multiple dates in the source data associated with a record such as order_date, draw_date, and result_date, choose the one that is closest to the date the sample was drawn from the patient.'
        measurement_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        measurement_time:
          type: string
          maxLength: 10
          description: This is present for backwards compatibility and will be deprecated in an upcoming version.
        measurement_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Measurement record, as in whether the measurement was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the MEASUREMENT_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        operator_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The meaning of Concept [4172703](https://athena.ohdsi.org/search-terms/terms/4172703) for ‘=’ is identical to omission of a OPERATOR_CONCEPT_ID value. Since the use of this field is rare, it’s important when devising analyses to not to forget testing for the content of this field for values different from =. ETL Convention: Operators are =, > and these concepts belong to the ‘Meas Value Operator’ domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Meas+Value+Operator&standardConcept=Standard&page=1&pageSize=15&query=). The operator_concept_id explictly refers to the value of the measurement. Leave it NULL if there’s an exact numeric value given (instead of putting ‘=’) or there’s no numeric value at all. References CONCEPT table.'
        value_as_number:
          type: number
          format: double
          description: 'This is the numerical value of the Result of the Measurement, if available. Note that measurements such as blood pressures will be split into their component parts i.e. one record for systolic, one record for diastolic. ETL Convention: [Convention for negative values](https://ohdsi.github.io/Themis/negative_value_as_number.html)'
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the raw data gives a categorial result for measurements those values are captured and mapped to standard concepts in the ‘Meas Value’ domain. ETL Convention: If there is no categorial result in the source data, set VALUE_AS_CONCEPT_ID to NULL, if there is a categorial result in a source data but without mapping, set VALUE_AS_CONCEPT_ID to 0, else map to a CONCEPT_ID. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'At present, there isn’t a prescribed unit for individual measurements, such as Hemoglobin A1C, meaning it’s not obligatory to express these measurements as a percentage. UNIT_SOURCE_VALUES should be linked to a Standard Concept within the Unit domain that most accurately reflects the unit provided in the source data. ETL Convention: If the source data does not include units, set UNIT_CONCEPT_ID to NULL. If units are provided but not mapped, set UNIT_CONCEPT_ID to 0. Otherwise, map the units to a CONCEPT_ID. Remember that units are case-sensitive in vocabulary. References CONCEPT table.'
        range_low:
          type: number
          format: double
          description: 'Ranges have the same unit as the VALUE_AS_NUMBER. These ranges are provided by the source and should remain NULL if not given. ETL Convention: If reference ranges for upper and lower limit of normal as provided (typically by a laboratory) these are stored in the RANGE_HIGH and RANGE_LOW fields. This should be set to NULL if not provided.'
        range_high:
          type: number
          format: double
          description: 'Ranges have the same unit as the VALUE_AS_NUMBER. These ranges are provided by the source and should remain NULL if not given. ETL Convention: If reference ranges for upper and lower limit of normal as provided (typically by a laboratory) these are stored in the RANGE_HIGH and RANGE_LOW fields. This should be set to NULL if not provided.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with measurement record, e.g. the provider who ordered the test or the provider who recorded the result. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. For example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the Measurement occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a MEASUREMENT_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the measurement record. If a measurement is related to a visit explicitly in the source data, it is possible that the result date of the Measurement falls outside of the bounds of the Visit dates. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Measurement occurred. For example, if the Person was in the ICU at the time the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        measurement_source_value:
          type: string
          maxLength: 50
          description: 'This field contains the exact value from the source data that represents the measurement that occurred. ETL Convention: This value corresponds to a standardized CONCEPT_ID found in MEASUREMENT_CONCEPT_ID and in the ‘Measurement’ domain within the Standardized Vocabularies. The original code is retained here for reference purposes.'
        measurement_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the MEASUREMENT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Measurement necessary for a given analytic use case. Consider using MEASUREMENT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the MEASUREMENT_SOURCE_VALUE is coded in the source data using a vocabulary supported by OMOP Standardized Vocabularies, insert the CONCEPT_ID representing the source value here. References CONCEPT table.'
        unit_source_value:
          type: string
          maxLength: 50
          description: 'This field contains the exact value from the source data that represents the unit of measurement used. ETL Convention: This value corresponds to a standardized CONCEPT_ID found in UNIT_CONCEPT_ID and in the ‘Unit’ domain within the Standardized Vocabularies. The original code is retained here for reference purposes.'
        unit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: '“This is the concept representing the UNIT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Measurement necessary for a given analytic use case. Consider using UNIT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network.” ETL Convention: If the UNIT_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        value_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim result value of the Measurement from the source data . ETL Convention: If both a continuous and categorical result are given in the source data such that both VALUE_AS_NUMBER and VALUE_AS_CONCEPT_ID are both included, store the verbatim value that was mapped to VALUE_AS_CONCEPT_ID here.'
        measurement_event_id:
          type: integer
          format: int64
          description: 'If the Measurement record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here.'
        meas_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Measurement record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the MEASUREMENT_EVENT_ID came from. References CONCEPT table.'
      description: Measurement record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        measurement_concept_id: 8507
        measurement_date: '2023-01-15'
        measurement_datetime: '2023-01-15'
        measurement_time: Example value
        measurement_type_concept_id: 8507
        operator_concept_id: 8507
        value_as_number: 98.6
        value_as_concept_id: 8507
        unit_concept_id: 8507
        range_low: 98.6
        range_high: 98.6
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        measurement_source_value: Example value
        measurement_source_concept_id: 8507
        unit_source_value: Example value
        unit_source_concept_id: 8507
        value_source_value: Example value
        measurement_event_id: 100
        meas_event_field_concept_id: 8507
    Clinical.MeasurementCreate:
      type: object
      required:
        - person_id
        - measurement_concept_id
        - measurement_date
        - measurement_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the Person for whom the Measurement is recorded. This may be a system generated code. References PERSON table.
        measurement_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The MEASUREMENT_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a measurement. ETL Convention: The CONCEPT_ID that the MEASUREMENT_SOURCE_VALUE maps to. Only records whose source values map to concepts with a domain of �Measurement� should go in this table. References CONCEPT table.'
        measurement_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the date of the measurement. ETL Convention: If there are multiple dates in the source data associated with a record such as order_date, draw_date, and result_date, choose the one that is closest to the date the sample was drawn from the patient.'
        measurement_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        measurement_time:
          type: string
          maxLength: 10
          description: This is present for backwards compatibility and will be deprecated in an upcoming version.
        measurement_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Measurement record, as in whether the measurement was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the MEASUREMENT_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        operator_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The meaning of Concept [4172703](https://athena.ohdsi.org/search-terms/terms/4172703) for ‘=’ is identical to omission of a OPERATOR_CONCEPT_ID value. Since the use of this field is rare, it’s important when devising analyses to not to forget testing for the content of this field for values different from =. ETL Convention: Operators are =, > and these concepts belong to the ‘Meas Value Operator’ domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Meas+Value+Operator&standardConcept=Standard&page=1&pageSize=15&query=). The operator_concept_id explictly refers to the value of the measurement. Leave it NULL if there’s an exact numeric value given (instead of putting ‘=’) or there’s no numeric value at all. References CONCEPT table.'
        value_as_number:
          type: number
          format: double
          description: 'This is the numerical value of the Result of the Measurement, if available. Note that measurements such as blood pressures will be split into their component parts i.e. one record for systolic, one record for diastolic. ETL Convention: [Convention for negative values](https://ohdsi.github.io/Themis/negative_value_as_number.html)'
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the raw data gives a categorial result for measurements those values are captured and mapped to standard concepts in the ‘Meas Value’ domain. ETL Convention: If there is no categorial result in the source data, set VALUE_AS_CONCEPT_ID to NULL, if there is a categorial result in a source data but without mapping, set VALUE_AS_CONCEPT_ID to 0, else map to a CONCEPT_ID. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'At present, there isn’t a prescribed unit for individual measurements, such as Hemoglobin A1C, meaning it’s not obligatory to express these measurements as a percentage. UNIT_SOURCE_VALUES should be linked to a Standard Concept within the Unit domain that most accurately reflects the unit provided in the source data. ETL Convention: If the source data does not include units, set UNIT_CONCEPT_ID to NULL. If units are provided but not mapped, set UNIT_CONCEPT_ID to 0. Otherwise, map the units to a CONCEPT_ID. Remember that units are case-sensitive in vocabulary. References CONCEPT table.'
        range_low:
          type: number
          format: double
          description: 'Ranges have the same unit as the VALUE_AS_NUMBER. These ranges are provided by the source and should remain NULL if not given. ETL Convention: If reference ranges for upper and lower limit of normal as provided (typically by a laboratory) these are stored in the RANGE_HIGH and RANGE_LOW fields. This should be set to NULL if not provided.'
        range_high:
          type: number
          format: double
          description: 'Ranges have the same unit as the VALUE_AS_NUMBER. These ranges are provided by the source and should remain NULL if not given. ETL Convention: If reference ranges for upper and lower limit of normal as provided (typically by a laboratory) these are stored in the RANGE_HIGH and RANGE_LOW fields. This should be set to NULL if not provided.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with measurement record, e.g. the provider who ordered the test or the provider who recorded the result. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. For example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the Measurement occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a MEASUREMENT_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the measurement record. If a measurement is related to a visit explicitly in the source data, it is possible that the result date of the Measurement falls outside of the bounds of the Visit dates. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Measurement occurred. For example, if the Person was in the ICU at the time the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        measurement_source_value:
          type: string
          maxLength: 50
          description: 'This field contains the exact value from the source data that represents the measurement that occurred. ETL Convention: This value corresponds to a standardized CONCEPT_ID found in MEASUREMENT_CONCEPT_ID and in the ‘Measurement’ domain within the Standardized Vocabularies. The original code is retained here for reference purposes.'
        measurement_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the MEASUREMENT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Measurement necessary for a given analytic use case. Consider using MEASUREMENT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the MEASUREMENT_SOURCE_VALUE is coded in the source data using a vocabulary supported by OMOP Standardized Vocabularies, insert the CONCEPT_ID representing the source value here. References CONCEPT table.'
        unit_source_value:
          type: string
          maxLength: 50
          description: 'This field contains the exact value from the source data that represents the unit of measurement used. ETL Convention: This value corresponds to a standardized CONCEPT_ID found in UNIT_CONCEPT_ID and in the ‘Unit’ domain within the Standardized Vocabularies. The original code is retained here for reference purposes.'
        unit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: '“This is the concept representing the UNIT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Measurement necessary for a given analytic use case. Consider using UNIT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network.” ETL Convention: If the UNIT_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        value_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim result value of the Measurement from the source data . ETL Convention: If both a continuous and categorical result are given in the source data such that both VALUE_AS_NUMBER and VALUE_AS_CONCEPT_ID are both included, store the verbatim value that was mapped to VALUE_AS_CONCEPT_ID here.'
        measurement_event_id:
          type: integer
          format: int64
          description: 'If the Measurement record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here.'
        meas_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Measurement record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the MEASUREMENT_EVENT_ID came from. References CONCEPT table.'
      description: Request body for creating a new Measurement record
    Clinical.MeasurementList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.Measurement'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Measurement records
      example:
        data:
          - id: 12345
            person_id: 100
            measurement_concept_id: 8507
            measurement_date: '2023-01-15'
            measurement_datetime: '2023-01-15'
            measurement_time: Example value
            measurement_type_concept_id: 8507
            operator_concept_id: 8507
            value_as_number: 98.6
            value_as_concept_id: 8507
            unit_concept_id: 8507
            range_low: 98.6
            range_high: 98.6
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            measurement_source_value: Example value
            measurement_source_concept_id: 8507
            unit_source_value: Example value
            unit_source_concept_id: 8507
            value_source_value: Example value
            measurement_event_id: 100
            meas_event_field_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.MeasurementUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the Person for whom the Measurement is recorded. This may be a system generated code. References PERSON table.
        measurement_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The MEASUREMENT_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a measurement. ETL Convention: The CONCEPT_ID that the MEASUREMENT_SOURCE_VALUE maps to. Only records whose source values map to concepts with a domain of �Measurement� should go in this table. References CONCEPT table.'
        measurement_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the date of the measurement. ETL Convention: If there are multiple dates in the source data associated with a record such as order_date, draw_date, and result_date, choose the one that is closest to the date the sample was drawn from the patient.'
        measurement_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This is not required, though it is in v6. If a source does not specify datetime the convention is to set the time to midnight (00:00:0000)
        measurement_time:
          type: string
          description: This is present for backwards compatibility and will be deprecated in an upcoming version.
        measurement_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Measurement record, as in whether the measurement was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the MEASUREMENT_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        operator_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The meaning of Concept [4172703](https://athena.ohdsi.org/search-terms/terms/4172703) for ‘=’ is identical to omission of a OPERATOR_CONCEPT_ID value. Since the use of this field is rare, it’s important when devising analyses to not to forget testing for the content of this field for values different from =. ETL Convention: Operators are =, > and these concepts belong to the ‘Meas Value Operator’ domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Meas+Value+Operator&standardConcept=Standard&page=1&pageSize=15&query=). The operator_concept_id explictly refers to the value of the measurement. Leave it NULL if there’s an exact numeric value given (instead of putting ‘=’) or there’s no numeric value at all. References CONCEPT table.'
        value_as_number:
          type: number
          format: double
          description: 'This is the numerical value of the Result of the Measurement, if available. Note that measurements such as blood pressures will be split into their component parts i.e. one record for systolic, one record for diastolic. ETL Convention: [Convention for negative values](https://ohdsi.github.io/Themis/negative_value_as_number.html)'
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the raw data gives a categorial result for measurements those values are captured and mapped to standard concepts in the ‘Meas Value’ domain. ETL Convention: If there is no categorial result in the source data, set VALUE_AS_CONCEPT_ID to NULL, if there is a categorial result in a source data but without mapping, set VALUE_AS_CONCEPT_ID to 0, else map to a CONCEPT_ID. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'At present, there isn’t a prescribed unit for individual measurements, such as Hemoglobin A1C, meaning it’s not obligatory to express these measurements as a percentage. UNIT_SOURCE_VALUES should be linked to a Standard Concept within the Unit domain that most accurately reflects the unit provided in the source data. ETL Convention: If the source data does not include units, set UNIT_CONCEPT_ID to NULL. If units are provided but not mapped, set UNIT_CONCEPT_ID to 0. Otherwise, map the units to a CONCEPT_ID. Remember that units are case-sensitive in vocabulary. References CONCEPT table.'
        range_low:
          type: number
          format: double
          description: 'Ranges have the same unit as the VALUE_AS_NUMBER. These ranges are provided by the source and should remain NULL if not given. ETL Convention: If reference ranges for upper and lower limit of normal as provided (typically by a laboratory) these are stored in the RANGE_HIGH and RANGE_LOW fields. This should be set to NULL if not provided.'
        range_high:
          type: number
          format: double
          description: 'Ranges have the same unit as the VALUE_AS_NUMBER. These ranges are provided by the source and should remain NULL if not given. ETL Convention: If reference ranges for upper and lower limit of normal as provided (typically by a laboratory) these are stored in the RANGE_HIGH and RANGE_LOW fields. This should be set to NULL if not provided.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with measurement record, e.g. the provider who ordered the test or the provider who recorded the result. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. For example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the Measurement occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a MEASUREMENT_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the measurement record. If a measurement is related to a visit explicitly in the source data, it is possible that the result date of the Measurement falls outside of the bounds of the Visit dates. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Measurement occurred. For example, if the Person was in the ICU at the time the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        measurement_source_value:
          type: string
          description: 'This field contains the exact value from the source data that represents the measurement that occurred. ETL Convention: This value corresponds to a standardized CONCEPT_ID found in MEASUREMENT_CONCEPT_ID and in the ‘Measurement’ domain within the Standardized Vocabularies. The original code is retained here for reference purposes.'
        measurement_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the MEASUREMENT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Measurement necessary for a given analytic use case. Consider using MEASUREMENT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the MEASUREMENT_SOURCE_VALUE is coded in the source data using a vocabulary supported by OMOP Standardized Vocabularies, insert the CONCEPT_ID representing the source value here. References CONCEPT table.'
        unit_source_value:
          type: string
          description: 'This field contains the exact value from the source data that represents the unit of measurement used. ETL Convention: This value corresponds to a standardized CONCEPT_ID found in UNIT_CONCEPT_ID and in the ‘Unit’ domain within the Standardized Vocabularies. The original code is retained here for reference purposes.'
        unit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: '“This is the concept representing the UNIT_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Measurement necessary for a given analytic use case. Consider using UNIT_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network.” ETL Convention: If the UNIT_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        value_source_value:
          type: string
          description: 'This field houses the verbatim result value of the Measurement from the source data . ETL Convention: If both a continuous and categorical result are given in the source data such that both VALUE_AS_NUMBER and VALUE_AS_CONCEPT_ID are both included, store the verbatim value that was mapped to VALUE_AS_CONCEPT_ID here.'
        measurement_event_id:
          type: integer
          format: int64
          description: 'If the Measurement record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here.'
        meas_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Measurement record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the MEASUREMENT_EVENT_ID came from. References CONCEPT table.'
      description: Request body for updating an existing Measurement record
    Clinical.Note:
      type: object
      required:
        - id
        - person_id
        - note_date
        - note_type_concept_id
        - note_class_concept_id
        - note_text
        - encoding_concept_id
        - language_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: A unique identifier for each note.
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        note_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the note was recorded.
        note_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If time is not given set the time to midnight.
        note_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The provenance of the note. Most likely this will be EHR. ETL Convention: Put the source system of the note, as in EHR record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Type+Concept&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        note_class_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A Standard Concept Id representing the HL7 LOINC Document Type Vocabulary classification of the note. ETL Convention: Map the note classification to a Standard Concept. For more information see the ETL Conventions in the description of the NOTE table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&conceptClass=Doc+Kind&conceptClass=Doc+Role&conceptClass=Doc+Setting&conceptClass=Doc+Subject+Matter&conceptClass=Doc+Type+of+Service&domain=Meas+Value&page=1&pageSize=15&query=). This Concept can alternatively be represented by concepts with the relationship ‘Kind of (LOINC)’ to [706391](https://athena.ohdsi.org/search-terms/terms/706391) (Note). References CONCEPT table.'
        note_title:
          type: string
          maxLength: 250
          description: The title of the note.
        note_text:
          type: string
          description: The content of the note.
        encoding_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the Concept representing the character encoding type. ETL Convention: Put the Concept Id that represents the encoding character type here. Currently the only option is UTF-8 ([32678](https://athena.ohdsi.org/search-terms/terms/32678)). It the note is encoded in any other type, like ASCII then put 0. References CONCEPT table.'
        language_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The language of the note. ETL Convention: Use Concepts that are descendants of the concept [4182347](https://athena.ohdsi.org/search-terms/terms/4182347) (World Languages). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'The Provider who wrote the note. ETL Convention: The ETL may need to make a determination on which provider to put here. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: The Visit during which the note was written. References VISIT_OCCURRENCE table.
        visit_detail_id:
          type: integer
          format: int64
          description: The Visit Detail during which the note was written. References VISIT_DETAIL table.
        note_source_value:
          type: string
          maxLength: 50
          description: The source value mapped to the NOTE_CLASS_CONCEPT_ID.
        note_event_id:
          type: integer
          format: int64
          description: 'If the Note record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here.'
        note_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Note record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the NOTE_EVENT_ID came from. References CONCEPT table.'
      description: Note record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        note_date: '2023-01-15'
        note_datetime: '2023-01-15'
        note_type_concept_id: 8507
        note_class_concept_id: 8507
        note_title: Example value
        note_text: Example value
        encoding_concept_id: 8507
        language_concept_id: 8507
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        note_source_value: Example value
        note_event_id: 100
        note_event_field_concept_id: 8507
    Clinical.NoteCreate:
      type: object
      required:
        - person_id
        - note_date
        - note_type_concept_id
        - note_class_concept_id
        - note_text
        - encoding_concept_id
        - language_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        note_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the note was recorded.
        note_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If time is not given set the time to midnight.
        note_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The provenance of the note. Most likely this will be EHR. ETL Convention: Put the source system of the note, as in EHR record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Type+Concept&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        note_class_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A Standard Concept Id representing the HL7 LOINC Document Type Vocabulary classification of the note. ETL Convention: Map the note classification to a Standard Concept. For more information see the ETL Conventions in the description of the NOTE table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&conceptClass=Doc+Kind&conceptClass=Doc+Role&conceptClass=Doc+Setting&conceptClass=Doc+Subject+Matter&conceptClass=Doc+Type+of+Service&domain=Meas+Value&page=1&pageSize=15&query=). This Concept can alternatively be represented by concepts with the relationship ‘Kind of (LOINC)’ to [706391](https://athena.ohdsi.org/search-terms/terms/706391) (Note). References CONCEPT table.'
        note_title:
          type: string
          maxLength: 250
          description: The title of the note.
        note_text:
          type: string
          description: The content of the note.
        encoding_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the Concept representing the character encoding type. ETL Convention: Put the Concept Id that represents the encoding character type here. Currently the only option is UTF-8 ([32678](https://athena.ohdsi.org/search-terms/terms/32678)). It the note is encoded in any other type, like ASCII then put 0. References CONCEPT table.'
        language_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The language of the note. ETL Convention: Use Concepts that are descendants of the concept [4182347](https://athena.ohdsi.org/search-terms/terms/4182347) (World Languages). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'The Provider who wrote the note. ETL Convention: The ETL may need to make a determination on which provider to put here. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: The Visit during which the note was written. References VISIT_OCCURRENCE table.
        visit_detail_id:
          type: integer
          format: int64
          description: The Visit Detail during which the note was written. References VISIT_DETAIL table.
        note_source_value:
          type: string
          maxLength: 50
          description: The source value mapped to the NOTE_CLASS_CONCEPT_ID.
        note_event_id:
          type: integer
          format: int64
          description: 'If the Note record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here.'
        note_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Note record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the NOTE_EVENT_ID came from. References CONCEPT table.'
      description: Request body for creating a new Note record
    Clinical.NoteList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.Note'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Note records
      example:
        data:
          - id: 12345
            person_id: 100
            note_date: '2023-01-15'
            note_datetime: '2023-01-15'
            note_type_concept_id: 8507
            note_class_concept_id: 8507
            note_title: Example value
            note_text: Example value
            encoding_concept_id: 8507
            language_concept_id: 8507
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            note_source_value: Example value
            note_event_id: 100
            note_event_field_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.NoteNlp:
      type: object
      required:
        - id
        - note_id
        - lexical_variant
        - nlp_date
      properties:
        id:
          type: integer
          format: int64
          description: A unique identifier for the NLP record.
        note_id:
          type: integer
          format: int64
          description: This is the NOTE_ID for the NOTE record the NLP record is associated to.
        section_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The SECTION_CONCEPT_ID should be used to represent the note section contained in the NOTE_NLP record. These concepts can be found as parts of document panels and are based on the type of note written, i.e. a discharge summary. These panels can be found as concepts with the relationship ‘Subsumes’ to CONCEPT_ID [45875957](https://athena.ohdsi.org/search-terms/terms/45875957). References CONCEPT table.
        snippet:
          type: string
          maxLength: 250
          description: A small window of text surrounding the term
        lexical_variant:
          type: string
          maxLength: 250
          description: Raw text extracted from the NLP tool.
        note_nlp_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        note_nlp_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        nlp_system:
          type: string
          maxLength: 250
          description: Name and version of the NLP system that extracted the term. Useful for data provenance.
        nlp_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date of the note processing.
        nlp_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date and time of the note processing.
        term_exists:
          type: string
          maxLength: 1
          description: 'Term_exists is defined as a flag that indicates if the patient actually has or had the condition. Any of the following modifiers would make Term_exists false: Negation = true Subject = [anything other than the patient] Conditional = true/li> Rule_out = true Uncertain = very low certainty or any lower certainties A complete lack of modifiers would make Term_exists true.'
        term_temporal:
          type: string
          maxLength: 50
          description: 'Term_temporal is to indicate if a condition is present or just in the past. The following would be past: - History = true - Concept_date = anything before the time of the report'
        term_modifiers:
          type: string
          maxLength: 2000
          description: 'For the modifiers that are there, they would have to have these values: - Negation = false - Subject = patient - Conditional = false - Rule_out = false - Uncertain = true or high or moderate or even low (could argue about low). Term_modifiers will concatenate all modifiers for different types of entities (conditions, drugs, labs etc) into one string. Lab values will be saved as one of the modifiers.'
      description: NoteNlp record in the OMOP CDM
      example:
        id: 12345
        note_id: 100
        section_concept_id: 8507
        snippet: Example value
        lexical_variant: Example value
        note_nlp_concept_id: 8507
        note_nlp_source_concept_id: 8507
        nlp_system: Example value
        nlp_date: '2023-01-15'
        nlp_datetime: '2023-01-15'
        term_exists: Example value
        term_temporal: Example value
        term_modifiers: Example value
    Clinical.NoteNlpCreate:
      type: object
      required:
        - note_id
        - lexical_variant
        - nlp_date
      properties:
        note_id:
          type: integer
          format: int64
          description: This is the NOTE_ID for the NOTE record the NLP record is associated to.
        section_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The SECTION_CONCEPT_ID should be used to represent the note section contained in the NOTE_NLP record. These concepts can be found as parts of document panels and are based on the type of note written, i.e. a discharge summary. These panels can be found as concepts with the relationship ‘Subsumes’ to CONCEPT_ID [45875957](https://athena.ohdsi.org/search-terms/terms/45875957). References CONCEPT table.
        snippet:
          type: string
          maxLength: 250
          description: A small window of text surrounding the term
        lexical_variant:
          type: string
          maxLength: 250
          description: Raw text extracted from the NLP tool.
        note_nlp_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        note_nlp_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        nlp_system:
          type: string
          maxLength: 250
          description: Name and version of the NLP system that extracted the term. Useful for data provenance.
        nlp_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date of the note processing.
        nlp_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date and time of the note processing.
        term_exists:
          type: string
          maxLength: 1
          description: 'Term_exists is defined as a flag that indicates if the patient actually has or had the condition. Any of the following modifiers would make Term_exists false: Negation = true Subject = [anything other than the patient] Conditional = true/li> Rule_out = true Uncertain = very low certainty or any lower certainties A complete lack of modifiers would make Term_exists true.'
        term_temporal:
          type: string
          maxLength: 50
          description: 'Term_temporal is to indicate if a condition is present or just in the past. The following would be past: - History = true - Concept_date = anything before the time of the report'
        term_modifiers:
          type: string
          maxLength: 2000
          description: 'For the modifiers that are there, they would have to have these values: - Negation = false - Subject = patient - Conditional = false - Rule_out = false - Uncertain = true or high or moderate or even low (could argue about low). Term_modifiers will concatenate all modifiers for different types of entities (conditions, drugs, labs etc) into one string. Lab values will be saved as one of the modifiers.'
      description: Request body for creating a new NoteNlp record
    Clinical.NoteNlpList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.NoteNlp'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of NoteNlp records
      example:
        data:
          - id: 12345
            note_id: 100
            section_concept_id: 8507
            snippet: Example value
            lexical_variant: Example value
            note_nlp_concept_id: 8507
            note_nlp_source_concept_id: 8507
            nlp_system: Example value
            nlp_date: '2023-01-15'
            nlp_datetime: '2023-01-15'
            term_exists: Example value
            term_temporal: Example value
            term_modifiers: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.NoteNlpUpdate:
      type: object
      properties:
        note_id:
          type: integer
          format: int64
          description: This is the NOTE_ID for the NOTE record the NLP record is associated to.
        section_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The SECTION_CONCEPT_ID should be used to represent the note section contained in the NOTE_NLP record. These concepts can be found as parts of document panels and are based on the type of note written, i.e. a discharge summary. These panels can be found as concepts with the relationship ‘Subsumes’ to CONCEPT_ID [45875957](https://athena.ohdsi.org/search-terms/terms/45875957). References CONCEPT table.
        snippet:
          type: string
          description: A small window of text surrounding the term
        lexical_variant:
          type: string
          description: Raw text extracted from the NLP tool.
        note_nlp_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        note_nlp_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        nlp_system:
          type: string
          description: Name and version of the NLP system that extracted the term. Useful for data provenance.
        nlp_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date of the note processing.
        nlp_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date and time of the note processing.
        term_exists:
          type: string
          description: 'Term_exists is defined as a flag that indicates if the patient actually has or had the condition. Any of the following modifiers would make Term_exists false: Negation = true Subject = [anything other than the patient] Conditional = true/li> Rule_out = true Uncertain = very low certainty or any lower certainties A complete lack of modifiers would make Term_exists true.'
        term_temporal:
          type: string
          description: 'Term_temporal is to indicate if a condition is present or just in the past. The following would be past: - History = true - Concept_date = anything before the time of the report'
        term_modifiers:
          type: string
          description: 'For the modifiers that are there, they would have to have these values: - Negation = false - Subject = patient - Conditional = false - Rule_out = false - Uncertain = true or high or moderate or even low (could argue about low). Term_modifiers will concatenate all modifiers for different types of entities (conditions, drugs, labs etc) into one string. Lab values will be saved as one of the modifiers.'
      description: Request body for updating an existing NoteNlp record
    Clinical.NoteUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        note_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the note was recorded.
        note_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If time is not given set the time to midnight.
        note_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The provenance of the note. Most likely this will be EHR. ETL Convention: Put the source system of the note, as in EHR record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Type+Concept&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        note_class_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A Standard Concept Id representing the HL7 LOINC Document Type Vocabulary classification of the note. ETL Convention: Map the note classification to a Standard Concept. For more information see the ETL Conventions in the description of the NOTE table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&conceptClass=Doc+Kind&conceptClass=Doc+Role&conceptClass=Doc+Setting&conceptClass=Doc+Subject+Matter&conceptClass=Doc+Type+of+Service&domain=Meas+Value&page=1&pageSize=15&query=). This Concept can alternatively be represented by concepts with the relationship ‘Kind of (LOINC)’ to [706391](https://athena.ohdsi.org/search-terms/terms/706391) (Note). References CONCEPT table.'
        note_title:
          type: string
          description: The title of the note.
        note_text:
          type: string
          description: The content of the note.
        encoding_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the Concept representing the character encoding type. ETL Convention: Put the Concept Id that represents the encoding character type here. Currently the only option is UTF-8 ([32678](https://athena.ohdsi.org/search-terms/terms/32678)). It the note is encoded in any other type, like ASCII then put 0. References CONCEPT table.'
        language_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The language of the note. ETL Convention: Use Concepts that are descendants of the concept [4182347](https://athena.ohdsi.org/search-terms/terms/4182347) (World Languages). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'The Provider who wrote the note. ETL Convention: The ETL may need to make a determination on which provider to put here. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: The Visit during which the note was written. References VISIT_OCCURRENCE table.
        visit_detail_id:
          type: integer
          format: int64
          description: The Visit Detail during which the note was written. References VISIT_DETAIL table.
        note_source_value:
          type: string
          description: The source value mapped to the NOTE_CLASS_CONCEPT_ID.
        note_event_id:
          type: integer
          format: int64
          description: 'If the Note record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here.'
        note_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Note record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the NOTE_EVENT_ID came from. References CONCEPT table.'
      description: Request body for updating an existing Note record
    Clinical.Observation:
      type: object
      required:
        - id
        - person_id
        - observation_concept_id
        - observation_date
        - observation_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to an Observation record for a Person. Refer to the ETL for how duplicate Observations during the same Visit were handled. ETL Convention: Each instance of an observation present in the source data should be assigned this unique key.'
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the Person for whom the Observation is recorded. This may be a system generated code. References PERSON table.
        observation_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The OBSERVATION_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. ETL Convention: The CONCEPT_ID that the OBSERVATION_SOURCE_CONCEPT_ID maps to. There is no specified domain that the Concepts in this table must adhere to. The only rule is that records with Concepts in the Condition, Procedure, Drug, Measurement, or Device domains MUST go to the corresponding table. References CONCEPT table.'
        observation_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date of when the Observation was obtained. Depending on what the Observation represents this could be the date of a lab test, the date of a survey, or the date a patient’s family history was taken. ETL Convention: For some observations the ETL may need to make a choice as to which date to choose.'
        observation_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given set to midnight (00:00:00).
        observation_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Observation record, as in whether the measurement was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the OBSERVATION_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        value_as_number:
          type: number
          format: double
          description: This is the numerical value of the Result of the Observation, if applicable and available. It is not expected that all Observations will have numeric results, rather, this field is here to house values should they exist.
        value_as_string:
          type: string
          maxLength: 60
          description: This is the categorical value of the Result of the Observation, if applicable and available.
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'It is possible that some records destined for the Observation table have two clinical ideas represented in one source code. This is common with ICD10 codes that describe a family history of some Condition, for example. In OMOP the Vocabulary breaks these two clinical ideas into two codes; one becomes the OBSERVATION_CONCEPT_ID and the other becomes the VALUE_AS_CONCEPT_ID. It is important when using the Observation table to keep this possibility in mind and to examine the VALUE_AS_CONCEPT_ID field for relevant information. ETL Convention: Note that the value of VALUE_AS_CONCEPT_ID may be provided through mapping from a source Concept which contains the content of the Observation. In those situations, the CONCEPT_RELATIONSHIP table in addition to the ‘Maps to’ record contains a second record with the relationship_id set to ‘Maps to value’. For example, ICD10 [Z82.4](https://athena.ohdsi.org/search-terms/terms/45581076) ‘Family history of ischaemic heart disease and other diseases of the circulatory system’ has a ‘Maps to’ relationship to [4167217](https://athena.ohdsi.org/search-terms/terms/4167217) ‘Family history of clinical finding’ as well as a ‘Maps to value’ record to [134057](https://athena.ohdsi.org/search-terms/terms/134057) ‘Disorder of cardiovascular system’. If there’s no categorial result in a source_data, set value_as_concept_id to NULL, if there is a categorial result in a source_data but without mapping, set value_as_concept_id to 0. References CONCEPT table.'
        qualifier_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains all attributes specifying the clinical fact further, such as as degrees, severities, drug-drug interaction alerts etc. ETL Convention: Use your best judgement as to what Concepts to use here and if they are necessary to accurately represent the clinical record. There is no restriction on the domain of these Concepts, they just need to be Standard. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'There is currently no recommended unit for individual observation concepts. UNIT_SOURCE_VALUES should be mapped to a Standard Concept in the Unit domain that best represents the unit as given in the source data. ETL Convention: There is no standardization requirement for units associated with OBSERVATION_CONCEPT_IDs, however, it is the responsibility of the ETL to choose the most plausible unit. If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with the observation record, e.g. the provider who ordered the test or the provider who recorded the result. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. For example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the Observation occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If an OBSERVATION_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the observation record. If an observation is related to a visit explicitly in the source data, it is possible that the result date of the Observation falls outside of the bounds of the Visit dates. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Observation occurred. For example, if the Person was in the ICU at the time the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        observation_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the Observation that occurred. For example, this could be an ICD10 or Read code. ETL Convention: This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        observation_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the OBSERVATION_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Observation necessary for a given analytic use case. Consider using OBSERVATION_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the OBSERVATION_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        unit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the unit of the Observation that occurred. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        qualifier_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the qualifier of the Observation that occurred. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        value_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim result value of the Observation from the source data. Do not get confused with the Observation_source_value which captures source value of the observation mapped to observation_concept_id. This field is the observation result value from the source. ETL Convention: If the observation_source_value was a question, for example, or an observation that requires a result then this field is the answer/ result from the source data. Store the verbatim value that represents the result of the observation_source_value.'
        observation_event_id:
          type: integer
          format: int64
          description: 'If the Observation record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here. See the [ETL Conventions for the OBSERVATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#observation) table for more details.'
        obs_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Observation record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the OBSERVATION_EVENT_ID came from. References CONCEPT table.'
      description: Observation record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        observation_concept_id: 8507
        observation_date: '2023-01-15'
        observation_datetime: '2023-01-15'
        observation_type_concept_id: 8507
        value_as_number: 98.6
        value_as_string: Example value
        value_as_concept_id: 8507
        qualifier_concept_id: 8507
        unit_concept_id: 8507
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        observation_source_value: Example value
        observation_source_concept_id: 8507
        unit_source_value: Example value
        qualifier_source_value: Example value
        value_source_value: Example value
        observation_event_id: 100
        obs_event_field_concept_id: 8507
    Clinical.ObservationCreate:
      type: object
      required:
        - person_id
        - observation_concept_id
        - observation_date
        - observation_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the Person for whom the Observation is recorded. This may be a system generated code. References PERSON table.
        observation_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The OBSERVATION_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. ETL Convention: The CONCEPT_ID that the OBSERVATION_SOURCE_CONCEPT_ID maps to. There is no specified domain that the Concepts in this table must adhere to. The only rule is that records with Concepts in the Condition, Procedure, Drug, Measurement, or Device domains MUST go to the corresponding table. References CONCEPT table.'
        observation_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date of when the Observation was obtained. Depending on what the Observation represents this could be the date of a lab test, the date of a survey, or the date a patient’s family history was taken. ETL Convention: For some observations the ETL may need to make a choice as to which date to choose.'
        observation_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given set to midnight (00:00:00).
        observation_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Observation record, as in whether the measurement was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the OBSERVATION_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        value_as_number:
          type: number
          format: double
          description: This is the numerical value of the Result of the Observation, if applicable and available. It is not expected that all Observations will have numeric results, rather, this field is here to house values should they exist.
        value_as_string:
          type: string
          maxLength: 60
          description: This is the categorical value of the Result of the Observation, if applicable and available.
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'It is possible that some records destined for the Observation table have two clinical ideas represented in one source code. This is common with ICD10 codes that describe a family history of some Condition, for example. In OMOP the Vocabulary breaks these two clinical ideas into two codes; one becomes the OBSERVATION_CONCEPT_ID and the other becomes the VALUE_AS_CONCEPT_ID. It is important when using the Observation table to keep this possibility in mind and to examine the VALUE_AS_CONCEPT_ID field for relevant information. ETL Convention: Note that the value of VALUE_AS_CONCEPT_ID may be provided through mapping from a source Concept which contains the content of the Observation. In those situations, the CONCEPT_RELATIONSHIP table in addition to the ‘Maps to’ record contains a second record with the relationship_id set to ‘Maps to value’. For example, ICD10 [Z82.4](https://athena.ohdsi.org/search-terms/terms/45581076) ‘Family history of ischaemic heart disease and other diseases of the circulatory system’ has a ‘Maps to’ relationship to [4167217](https://athena.ohdsi.org/search-terms/terms/4167217) ‘Family history of clinical finding’ as well as a ‘Maps to value’ record to [134057](https://athena.ohdsi.org/search-terms/terms/134057) ‘Disorder of cardiovascular system’. If there’s no categorial result in a source_data, set value_as_concept_id to NULL, if there is a categorial result in a source_data but without mapping, set value_as_concept_id to 0. References CONCEPT table.'
        qualifier_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains all attributes specifying the clinical fact further, such as as degrees, severities, drug-drug interaction alerts etc. ETL Convention: Use your best judgement as to what Concepts to use here and if they are necessary to accurately represent the clinical record. There is no restriction on the domain of these Concepts, they just need to be Standard. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'There is currently no recommended unit for individual observation concepts. UNIT_SOURCE_VALUES should be mapped to a Standard Concept in the Unit domain that best represents the unit as given in the source data. ETL Convention: There is no standardization requirement for units associated with OBSERVATION_CONCEPT_IDs, however, it is the responsibility of the ETL to choose the most plausible unit. If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with the observation record, e.g. the provider who ordered the test or the provider who recorded the result. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. For example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the Observation occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If an OBSERVATION_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the observation record. If an observation is related to a visit explicitly in the source data, it is possible that the result date of the Observation falls outside of the bounds of the Visit dates. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Observation occurred. For example, if the Person was in the ICU at the time the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        observation_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the Observation that occurred. For example, this could be an ICD10 or Read code. ETL Convention: This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        observation_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the OBSERVATION_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Observation necessary for a given analytic use case. Consider using OBSERVATION_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the OBSERVATION_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        unit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the unit of the Observation that occurred. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        qualifier_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the qualifier of the Observation that occurred. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        value_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim result value of the Observation from the source data. Do not get confused with the Observation_source_value which captures source value of the observation mapped to observation_concept_id. This field is the observation result value from the source. ETL Convention: If the observation_source_value was a question, for example, or an observation that requires a result then this field is the answer/ result from the source data. Store the verbatim value that represents the result of the observation_source_value.'
        observation_event_id:
          type: integer
          format: int64
          description: 'If the Observation record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here. See the [ETL Conventions for the OBSERVATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#observation) table for more details.'
        obs_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Observation record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the OBSERVATION_EVENT_ID came from. References CONCEPT table.'
      description: Request body for creating a new Observation record
    Clinical.ObservationList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.Observation'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Observation records
      example:
        data:
          - id: 12345
            person_id: 100
            observation_concept_id: 8507
            observation_date: '2023-01-15'
            observation_datetime: '2023-01-15'
            observation_type_concept_id: 8507
            value_as_number: 98.6
            value_as_string: Example value
            value_as_concept_id: 8507
            qualifier_concept_id: 8507
            unit_concept_id: 8507
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            observation_source_value: Example value
            observation_source_concept_id: 8507
            unit_source_value: Example value
            qualifier_source_value: Example value
            value_source_value: Example value
            observation_event_id: 100
            obs_event_field_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.ObservationPeriod:
      type: object
      required:
        - id
        - person_id
        - observation_period_start_date
        - observation_period_end_date
        - period_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'A Person can have multiple discrete Observation Periods which are identified by the Observation_Period_Id. ETL Convention: Assign a unique observation_period_id to each discrete Observation Period for a Person.'
        person_id:
          type: integer
          format: int64
          description: The Person ID of the PERSON record for which the Observation Period is recorded. References PERSON table.
        observation_period_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the Observation Period. ETL Convention: It is often the case that the idea of Observation Periods does not exist in source data. In those cases, the observation_period_start_date can be inferred as the earliest Event date available for the Person. In insurance claim data, the Observation Period can be considered as the time period the Person is enrolled with a payer. If a Person switches plans but stays with the same payer, and therefore capturing of data continues, that change would be captured in [PAYER_PLAN_PERIOD](https://ohdsi.github.io/CommonDataModel/cdm54.html#payer_plan_period).'
        observation_period_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the end date of the period for which we can assume that all events for a Person are recorded. ETL Convention: It is often the case that the idea of Observation Periods does not exist in source data. In those cases, the observation_period_end_date can be inferred as the last Event date available for the Person. In insurance claim data, the Observation Period can be considered as the time period the Person is enrolled with a payer.'
        period_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Observation Period as in whether the period was determined from an insurance enrollment file, EHR healthcare encounters, or other sources. ETL Convention: Choose the observation_period_type_concept_id that best represents how the period was determined. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
      description: ObservationPeriod record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        observation_period_start_date: '2023-01-15'
        observation_period_end_date: '2023-01-15'
        period_type_concept_id: 8507
    Clinical.ObservationPeriodCreate:
      type: object
      required:
        - person_id
        - observation_period_start_date
        - observation_period_end_date
        - period_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The Person ID of the PERSON record for which the Observation Period is recorded. References PERSON table.
        observation_period_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the Observation Period. ETL Convention: It is often the case that the idea of Observation Periods does not exist in source data. In those cases, the observation_period_start_date can be inferred as the earliest Event date available for the Person. In insurance claim data, the Observation Period can be considered as the time period the Person is enrolled with a payer. If a Person switches plans but stays with the same payer, and therefore capturing of data continues, that change would be captured in [PAYER_PLAN_PERIOD](https://ohdsi.github.io/CommonDataModel/cdm54.html#payer_plan_period).'
        observation_period_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the end date of the period for which we can assume that all events for a Person are recorded. ETL Convention: It is often the case that the idea of Observation Periods does not exist in source data. In those cases, the observation_period_end_date can be inferred as the last Event date available for the Person. In insurance claim data, the Observation Period can be considered as the time period the Person is enrolled with a payer.'
        period_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Observation Period as in whether the period was determined from an insurance enrollment file, EHR healthcare encounters, or other sources. ETL Convention: Choose the observation_period_type_concept_id that best represents how the period was determined. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
      description: Request body for creating a new ObservationPeriod record
    Clinical.ObservationPeriodList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.ObservationPeriod'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ObservationPeriod records
      example:
        data:
          - id: 12345
            person_id: 100
            observation_period_start_date: '2023-01-15'
            observation_period_end_date: '2023-01-15'
            period_type_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.ObservationPeriodUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The Person ID of the PERSON record for which the Observation Period is recorded. References PERSON table.
        observation_period_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the start date of the Observation Period. ETL Convention: It is often the case that the idea of Observation Periods does not exist in source data. In those cases, the observation_period_start_date can be inferred as the earliest Event date available for the Person. In insurance claim data, the Observation Period can be considered as the time period the Person is enrolled with a payer. If a Person switches plans but stays with the same payer, and therefore capturing of data continues, that change would be captured in [PAYER_PLAN_PERIOD](https://ohdsi.github.io/CommonDataModel/cdm54.html#payer_plan_period).'
        observation_period_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the end date of the period for which we can assume that all events for a Person are recorded. ETL Convention: It is often the case that the idea of Observation Periods does not exist in source data. In those cases, the observation_period_end_date can be inferred as the last Event date available for the Person. In insurance claim data, the Observation Period can be considered as the time period the Person is enrolled with a payer.'
        period_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Observation Period as in whether the period was determined from an insurance enrollment file, EHR healthcare encounters, or other sources. ETL Convention: Choose the observation_period_type_concept_id that best represents how the period was determined. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
      description: Request body for updating an existing ObservationPeriod record
    Clinical.ObservationUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the Person for whom the Observation is recorded. This may be a system generated code. References PERSON table.
        observation_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The OBSERVATION_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. ETL Convention: The CONCEPT_ID that the OBSERVATION_SOURCE_CONCEPT_ID maps to. There is no specified domain that the Concepts in this table must adhere to. The only rule is that records with Concepts in the Condition, Procedure, Drug, Measurement, or Device domains MUST go to the corresponding table. References CONCEPT table.'
        observation_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date of when the Observation was obtained. Depending on what the Observation represents this could be the date of a lab test, the date of a survey, or the date a patient’s family history was taken. ETL Convention: For some observations the ETL may need to make a choice as to which date to choose.'
        observation_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given set to midnight (00:00:00).
        observation_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Observation record, as in whether the measurement was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the OBSERVATION_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        value_as_number:
          type: number
          format: double
          description: This is the numerical value of the Result of the Observation, if applicable and available. It is not expected that all Observations will have numeric results, rather, this field is here to house values should they exist.
        value_as_string:
          type: string
          description: This is the categorical value of the Result of the Observation, if applicable and available.
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'It is possible that some records destined for the Observation table have two clinical ideas represented in one source code. This is common with ICD10 codes that describe a family history of some Condition, for example. In OMOP the Vocabulary breaks these two clinical ideas into two codes; one becomes the OBSERVATION_CONCEPT_ID and the other becomes the VALUE_AS_CONCEPT_ID. It is important when using the Observation table to keep this possibility in mind and to examine the VALUE_AS_CONCEPT_ID field for relevant information. ETL Convention: Note that the value of VALUE_AS_CONCEPT_ID may be provided through mapping from a source Concept which contains the content of the Observation. In those situations, the CONCEPT_RELATIONSHIP table in addition to the ‘Maps to’ record contains a second record with the relationship_id set to ‘Maps to value’. For example, ICD10 [Z82.4](https://athena.ohdsi.org/search-terms/terms/45581076) ‘Family history of ischaemic heart disease and other diseases of the circulatory system’ has a ‘Maps to’ relationship to [4167217](https://athena.ohdsi.org/search-terms/terms/4167217) ‘Family history of clinical finding’ as well as a ‘Maps to value’ record to [134057](https://athena.ohdsi.org/search-terms/terms/134057) ‘Disorder of cardiovascular system’. If there’s no categorial result in a source_data, set value_as_concept_id to NULL, if there is a categorial result in a source_data but without mapping, set value_as_concept_id to 0. References CONCEPT table.'
        qualifier_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains all attributes specifying the clinical fact further, such as as degrees, severities, drug-drug interaction alerts etc. ETL Convention: Use your best judgement as to what Concepts to use here and if they are necessary to accurately represent the clinical record. There is no restriction on the domain of these Concepts, they just need to be Standard. References CONCEPT table.'
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'There is currently no recommended unit for individual observation concepts. UNIT_SOURCE_VALUES should be mapped to a Standard Concept in the Unit domain that best represents the unit as given in the source data. ETL Convention: There is no standardization requirement for units associated with OBSERVATION_CONCEPT_IDs, however, it is the responsibility of the ETL to choose the most plausible unit. If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with the observation record, e.g. the provider who ordered the test or the provider who recorded the result. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record. For example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the Observation occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If an OBSERVATION_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the observation record. If an observation is related to a visit explicitly in the source data, it is possible that the result date of the Observation falls outside of the bounds of the Visit dates. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Observation occurred. For example, if the Person was in the ICU at the time the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        observation_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the Observation that occurred. For example, this could be an ICD10 or Read code. ETL Convention: This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        observation_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the OBSERVATION_SOURCE_VALUE and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Observation necessary for a given analytic use case. Consider using OBSERVATION_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the OBSERVATION_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        unit_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the unit of the Observation that occurred. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        qualifier_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the qualifier of the Observation that occurred. ETL Convention: This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.'
        value_source_value:
          type: string
          description: 'This field houses the verbatim result value of the Observation from the source data. Do not get confused with the Observation_source_value which captures source value of the observation mapped to observation_concept_id. This field is the observation result value from the source. ETL Convention: If the observation_source_value was a question, for example, or an observation that requires a result then this field is the answer/ result from the source data. Store the verbatim value that represents the result of the observation_source_value.'
        observation_event_id:
          type: integer
          format: int64
          description: 'If the Observation record is related to another record in the database, this field is the primary key of the linked record. ETL Convention: Put the primary key of the linked record, if applicable, here. See the [ETL Conventions for the OBSERVATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#observation) table for more details.'
        obs_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'If the Observation record is related to another record in the database, this field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the OBSERVATION_EVENT_ID came from. References CONCEPT table.'
      description: Request body for updating an existing Observation record
    Clinical.Person:
      type: object
      required:
        - id
        - gender_concept_id
        - year_of_birth
        - race_concept_id
        - ethnicity_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'It is assumed that every person with a different unique identifier is in fact a different person and should be treated independently. ETL Convention: Any person linkage that needs to occur to uniquely identify Persons ought to be done prior to writing this table. This identifier can be the original id from the source data provided if it is an integer, otherwise it can be an autogenerated number.'
        gender_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field is meant to capture the biological sex at birth of the Person. This field should not be used to study gender identity issues. ETL Convention: Use the gender or sex value present in the data under the assumption that it is the biological sex at birth. If the source data captures gender identity it should be stored in the [OBSERVATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#observation) table. [Accepted gender concepts](http://athena.ohdsi.org/search-terms/terms?domain=Gender&standardConcept=Standard&page=1&pageSize=15&query=). Please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_gender_concept_id.html) for detailed conventions on how to populate this field. References CONCEPT table.'
        year_of_birth:
          type: integer
          format: int64
          description: 'Compute age using year_of_birth. ETL Convention: For data sources with date of birth, the year should be extracted. If no year of birth is available all the person’s data should be dropped from the CDM instance. For additional information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_year_of_birth.html).'
        month_of_birth:
          type: integer
          format: int64
          description: For data sources that provide the precise date of birth, the month should be extracted and stored in this field.
        day_of_birth:
          type: integer
          format: int64
          description: For data sources that provide the precise date of birth, the day should be extracted and stored in this field.
        birth_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This field is not required but highly encouraged. For data sources that provide the precise datetime of birth, that value should be stored in this field. For more information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/person.html).
        race_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field captures race or ethnic background of the person. ETL Convention: Only use this field if you have information about race or ethnic background. The Vocabulary contains Concepts about the main races and ethnic backgrounds in a hierarchical system. Due to the imprecise nature of human races and ethnic backgrounds, this is not a perfect system. Mixed races are not supported. If a clear race or ethnic background cannot be established, use Concept_Id 0. [Accepted Race Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Race&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        ethnicity_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field captures Ethnicity as defined by the Office of Management and Budget (OMB) of the US Government: it distinguishes only between “Hispanic” and “Not Hispanic”. Races and ethnic backgrounds are not stored here. ETL Convention: Only use this field if you have US-based data and a source of this information. Do not attempt to infer Ethnicity from the race or ethnic background of the Person. [Accepted ethnicity concepts](http://athena.ohdsi.org/search-terms/terms?domain=Ethnicity&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.'
        location_id:
          type: integer
          format: int64
          description: 'The location refers to the physical address of the person. This field should capture the last known location of the person. ETL Convention: Put the location_id from the [LOCATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#location) table here that represents the most granular location information for the person. For additional information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/populate_person_location_id.html). References LOCATION table.'
        provider_id:
          type: integer
          format: int64
          description: 'The Provider refers to the last known primary care provider (General Practitioner). ETL Convention: Put the provider_id from the [PROVIDER](https://ohdsi.github.io/CommonDataModel/cdm54.html#provider) table of the last known general practitioner of the person. If there are multiple providers, it is up to the ETL to decide which to put here. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: The Care Site refers to where the Provider typically provides the primary care. References CARE_SITE table.
        person_source_value:
          type: string
          maxLength: 50
          description: 'Use this field to link back to persons in the source data. This is typically used for error checking of ETL logic. ETL Convention: Some use cases require the ability to link back to persons in the source data. This field allows for the storing of the person value as it appears in the source. This field is not required but strongly recommended.'
        gender_source_value:
          type: string
          maxLength: 50
          description: 'This field is used to store the biological sex of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: Put the assigned sex at birth of the person as it appears in the source data.'
        gender_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes assigned sex at birth in a non-standard vocabulary, store the concept_id here. References CONCEPT table.'
        race_source_value:
          type: string
          maxLength: 50
          description: 'This field is used to store the race of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: Put the race of the person as it appears in the source data.'
        race_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes race in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
        ethnicity_source_value:
          type: string
          maxLength: 50
          description: 'This field is used to store the ethnicity of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: If the person has an ethnicity other than the OMB standard of “Hispanic” or “Not Hispanic” store that value from the source data here.'
        ethnicity_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes ethnicity in an OMOP supported vocabulary, store the concept_id here. References CONCEPT table.'
      description: Person record in the OMOP CDM
      example:
        id: 12345
        gender_concept_id: 8507
        year_of_birth: 100
        month_of_birth: 100
        day_of_birth: 100
        birth_datetime: '2023-01-15'
        race_concept_id: 8507
        ethnicity_concept_id: 8507
        location_id: 100
        provider_id: 100
        care_site_id: 100
        person_source_value: Example value
        gender_source_value: Example value
        gender_source_concept_id: 8507
        race_source_value: Example value
        race_source_concept_id: 8507
        ethnicity_source_value: Example value
        ethnicity_source_concept_id: 8507
    Clinical.PersonCreate:
      type: object
      required:
        - gender_concept_id
        - year_of_birth
        - race_concept_id
        - ethnicity_concept_id
      properties:
        gender_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field is meant to capture the biological sex at birth of the Person. This field should not be used to study gender identity issues. ETL Convention: Use the gender or sex value present in the data under the assumption that it is the biological sex at birth. If the source data captures gender identity it should be stored in the [OBSERVATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#observation) table. [Accepted gender concepts](http://athena.ohdsi.org/search-terms/terms?domain=Gender&standardConcept=Standard&page=1&pageSize=15&query=). Please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_gender_concept_id.html) for detailed conventions on how to populate this field. References CONCEPT table.'
        year_of_birth:
          type: integer
          format: int64
          description: 'Compute age using year_of_birth. ETL Convention: For data sources with date of birth, the year should be extracted. If no year of birth is available all the person’s data should be dropped from the CDM instance. For additional information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_year_of_birth.html).'
        month_of_birth:
          type: integer
          format: int64
          description: For data sources that provide the precise date of birth, the month should be extracted and stored in this field.
        day_of_birth:
          type: integer
          format: int64
          description: For data sources that provide the precise date of birth, the day should be extracted and stored in this field.
        birth_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This field is not required but highly encouraged. For data sources that provide the precise datetime of birth, that value should be stored in this field. For more information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/person.html).
        race_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field captures race or ethnic background of the person. ETL Convention: Only use this field if you have information about race or ethnic background. The Vocabulary contains Concepts about the main races and ethnic backgrounds in a hierarchical system. Due to the imprecise nature of human races and ethnic backgrounds, this is not a perfect system. Mixed races are not supported. If a clear race or ethnic background cannot be established, use Concept_Id 0. [Accepted Race Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Race&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        ethnicity_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field captures Ethnicity as defined by the Office of Management and Budget (OMB) of the US Government: it distinguishes only between “Hispanic” and “Not Hispanic”. Races and ethnic backgrounds are not stored here. ETL Convention: Only use this field if you have US-based data and a source of this information. Do not attempt to infer Ethnicity from the race or ethnic background of the Person. [Accepted ethnicity concepts](http://athena.ohdsi.org/search-terms/terms?domain=Ethnicity&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.'
        location_id:
          type: integer
          format: int64
          description: 'The location refers to the physical address of the person. This field should capture the last known location of the person. ETL Convention: Put the location_id from the [LOCATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#location) table here that represents the most granular location information for the person. For additional information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/populate_person_location_id.html). References LOCATION table.'
        provider_id:
          type: integer
          format: int64
          description: 'The Provider refers to the last known primary care provider (General Practitioner). ETL Convention: Put the provider_id from the [PROVIDER](https://ohdsi.github.io/CommonDataModel/cdm54.html#provider) table of the last known general practitioner of the person. If there are multiple providers, it is up to the ETL to decide which to put here. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: The Care Site refers to where the Provider typically provides the primary care. References CARE_SITE table.
        person_source_value:
          type: string
          maxLength: 50
          description: 'Use this field to link back to persons in the source data. This is typically used for error checking of ETL logic. ETL Convention: Some use cases require the ability to link back to persons in the source data. This field allows for the storing of the person value as it appears in the source. This field is not required but strongly recommended.'
        gender_source_value:
          type: string
          maxLength: 50
          description: 'This field is used to store the biological sex of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: Put the assigned sex at birth of the person as it appears in the source data.'
        gender_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes assigned sex at birth in a non-standard vocabulary, store the concept_id here. References CONCEPT table.'
        race_source_value:
          type: string
          maxLength: 50
          description: 'This field is used to store the race of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: Put the race of the person as it appears in the source data.'
        race_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes race in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
        ethnicity_source_value:
          type: string
          maxLength: 50
          description: 'This field is used to store the ethnicity of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: If the person has an ethnicity other than the OMB standard of “Hispanic” or “Not Hispanic” store that value from the source data here.'
        ethnicity_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes ethnicity in an OMOP supported vocabulary, store the concept_id here. References CONCEPT table.'
      description: Request body for creating a new Person record
    Clinical.PersonList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.Person'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Person records
      example:
        data:
          - id: 12345
            gender_concept_id: 8507
            year_of_birth: 100
            month_of_birth: 100
            day_of_birth: 100
            birth_datetime: '2023-01-15'
            race_concept_id: 8507
            ethnicity_concept_id: 8507
            location_id: 100
            provider_id: 100
            care_site_id: 100
            person_source_value: Example value
            gender_source_value: Example value
            gender_source_concept_id: 8507
            race_source_value: Example value
            race_source_concept_id: 8507
            ethnicity_source_value: Example value
            ethnicity_source_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.PersonUpdate:
      type: object
      properties:
        gender_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field is meant to capture the biological sex at birth of the Person. This field should not be used to study gender identity issues. ETL Convention: Use the gender or sex value present in the data under the assumption that it is the biological sex at birth. If the source data captures gender identity it should be stored in the [OBSERVATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#observation) table. [Accepted gender concepts](http://athena.ohdsi.org/search-terms/terms?domain=Gender&standardConcept=Standard&page=1&pageSize=15&query=). Please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_gender_concept_id.html) for detailed conventions on how to populate this field. References CONCEPT table.'
        year_of_birth:
          type: integer
          format: int64
          description: 'Compute age using year_of_birth. ETL Convention: For data sources with date of birth, the year should be extracted. If no year of birth is available all the person’s data should be dropped from the CDM instance. For additional information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/tag_year_of_birth.html).'
        month_of_birth:
          type: integer
          format: int64
          description: For data sources that provide the precise date of birth, the month should be extracted and stored in this field.
        day_of_birth:
          type: integer
          format: int64
          description: For data sources that provide the precise date of birth, the day should be extracted and stored in this field.
        birth_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: This field is not required but highly encouraged. For data sources that provide the precise datetime of birth, that value should be stored in this field. For more information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/person.html).
        race_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field captures race or ethnic background of the person. ETL Convention: Only use this field if you have information about race or ethnic background. The Vocabulary contains Concepts about the main races and ethnic backgrounds in a hierarchical system. Due to the imprecise nature of human races and ethnic backgrounds, this is not a perfect system. Mixed races are not supported. If a clear race or ethnic background cannot be established, use Concept_Id 0. [Accepted Race Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Race&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        ethnicity_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field captures Ethnicity as defined by the Office of Management and Budget (OMB) of the US Government: it distinguishes only between “Hispanic” and “Not Hispanic”. Races and ethnic backgrounds are not stored here. ETL Convention: Only use this field if you have US-based data and a source of this information. Do not attempt to infer Ethnicity from the race or ethnic background of the Person. [Accepted ethnicity concepts](http://athena.ohdsi.org/search-terms/terms?domain=Ethnicity&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.'
        location_id:
          type: integer
          format: int64
          description: 'The location refers to the physical address of the person. This field should capture the last known location of the person. ETL Convention: Put the location_id from the [LOCATION](https://ohdsi.github.io/CommonDataModel/cdm54.html#location) table here that represents the most granular location information for the person. For additional information on how to populate this field, please refer to the [THEMIS repository](https://ohdsi.github.io/Themis/populate_person_location_id.html). References LOCATION table.'
        provider_id:
          type: integer
          format: int64
          description: 'The Provider refers to the last known primary care provider (General Practitioner). ETL Convention: Put the provider_id from the [PROVIDER](https://ohdsi.github.io/CommonDataModel/cdm54.html#provider) table of the last known general practitioner of the person. If there are multiple providers, it is up to the ETL to decide which to put here. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: The Care Site refers to where the Provider typically provides the primary care. References CARE_SITE table.
        person_source_value:
          type: string
          description: 'Use this field to link back to persons in the source data. This is typically used for error checking of ETL logic. ETL Convention: Some use cases require the ability to link back to persons in the source data. This field allows for the storing of the person value as it appears in the source. This field is not required but strongly recommended.'
        gender_source_value:
          type: string
          description: 'This field is used to store the biological sex of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: Put the assigned sex at birth of the person as it appears in the source data.'
        gender_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes assigned sex at birth in a non-standard vocabulary, store the concept_id here. References CONCEPT table.'
        race_source_value:
          type: string
          description: 'This field is used to store the race of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: Put the race of the person as it appears in the source data.'
        race_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes race in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
        ethnicity_source_value:
          type: string
          description: 'This field is used to store the ethnicity of the person from the source data. It is not intended for use in standard analytics but for reference only. ETL Convention: If the person has an ethnicity other than the OMB standard of “Hispanic” or “Not Hispanic” store that value from the source data here.'
        ethnicity_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Due to the small number of options, this tends to be zero. ETL Convention: If the source data codes ethnicity in an OMOP supported vocabulary, store the concept_id here. References CONCEPT table.'
      description: Request body for updating an existing Person record
    Clinical.ProcedureOccurrence:
      type: object
      required:
        - id
        - person_id
        - procedure_concept_id
        - procedure_date
        - procedure_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to a procedure record for a person. Refer to the ETL for how duplicate procedures during the same visit were handled. ETL Convention: Each instance of a procedure occurrence in the source data should be assigned this unique key. In some cases, a person can have multiple records of the same procedure within the same visit. It is valid to keep these duplicates and assign them individual, unique, PROCEDURE_OCCURRENCE_IDs, though it is up to the ETL how they should be handled.'
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the procedure is recorded. This may be a system generated code. References PERSON table.
        procedure_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The PROCEDURE_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a procedure ETL Convention: The CONCEPT_ID that the PROCEDURE_SOURCE_VALUE maps to. Only records whose source values map to standard concepts with a domain of “Procedure” should go in this table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Procedure&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        procedure_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the date the procedure started. ETL Convention: This is meant to be the **start date** of the procedure. It will be renamed in a future version to **PROCEDURE_START_DATE**.'
        procedure_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If the procedure has a start time in the native date, use this field to house that information. This will be renamed in a future version to **PROCEDURE_START_DATETIME**.
        procedure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this field to house the date that the procedure ended. ETL Convention: This is meant to be the end date of the procedure. It is not required and for most cases will be the same as the PROCEDURE_START_DATE.'
        procedure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'Use this field to house the datetime that the procedure ended. ETL Convention: This is meant to house the end datetime of the procedure and will most often be used in conjunction with the procedure_start_datetime to determine the length of the procedure.'
        procedure_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Procedure record, as in whether the procedure was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the PROCEDURE_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. If a procedure is recorded as an EHR encounter, the PROCEDURE_TYPE_CONCEPT would be ‘EHR encounter record’. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        modifier_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The modifiers are intended to give additional information about the procedure but as of now the vocabulary is under review. ETL Convention: It is up to the ETL to choose how to map modifiers if they exist in source data. These concepts are typically distinguished by ‘Modifier’ concept classes (e.g., ‘CPT4 Modifier’ as part of the ‘CPT4’ vocabulary). If there is more than one modifier on a record, one should be chosen that pertains to the procedure rather than provider. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?conceptClass=CPT4+Modifier&conceptClass=HCPCS+Modifier&vocabulary=CPT4&vocabulary=HCPCS&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        quantity:
          type: integer
          format: int64
          description: 'If the quantity value is omitted, a single procedure is assumed. ETL Convention: If a Procedure has a quantity of ‘0’ in the source, this should default to ‘1’ in the ETL. If there is a record in the source it can be assumed the exposure occurred at least once'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with the procedure record, e.g. the provider who performed the Procedure. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the procedure occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a PROCEDURE_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the Visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the PROCEDURE_OCCURRENCE record. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Procedure occurred. For example, if the Person was in the ICU at the time of the Procedure the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        procedure_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the procedure that occurred. For example, this could be an CPT4 or OPCS4 code. ETL Convention: Use this value to look up the source concept id and then map the source concept id to a standard concept id.'
        procedure_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the procedure source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Procedure necessary for a given analytic use case. Consider using PROCEDURE_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the PROCEDURE_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        modifier_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the modifier code for the procedure that occurred. ETL Convention: The value stored here is mapped to a MODIFIER_CONCEPT_ID.'
      description: ProcedureOccurrence record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        procedure_concept_id: 8507
        procedure_date: '2023-01-15'
        procedure_datetime: '2023-01-15'
        procedure_end_date: '2023-01-15'
        procedure_end_datetime: '2023-01-15'
        procedure_type_concept_id: 8507
        modifier_concept_id: 8507
        quantity: 100
        provider_id: 100
        visit_occurrence_id: 100
        visit_detail_id: 100
        procedure_source_value: Example value
        procedure_source_concept_id: 8507
        modifier_source_value: Example value
    Clinical.ProcedureOccurrenceCreate:
      type: object
      required:
        - person_id
        - procedure_concept_id
        - procedure_date
        - procedure_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the procedure is recorded. This may be a system generated code. References PERSON table.
        procedure_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The PROCEDURE_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a procedure ETL Convention: The CONCEPT_ID that the PROCEDURE_SOURCE_VALUE maps to. Only records whose source values map to standard concepts with a domain of “Procedure” should go in this table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Procedure&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        procedure_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the date the procedure started. ETL Convention: This is meant to be the **start date** of the procedure. It will be renamed in a future version to **PROCEDURE_START_DATE**.'
        procedure_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If the procedure has a start time in the native date, use this field to house that information. This will be renamed in a future version to **PROCEDURE_START_DATETIME**.
        procedure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this field to house the date that the procedure ended. ETL Convention: This is meant to be the end date of the procedure. It is not required and for most cases will be the same as the PROCEDURE_START_DATE.'
        procedure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'Use this field to house the datetime that the procedure ended. ETL Convention: This is meant to house the end datetime of the procedure and will most often be used in conjunction with the procedure_start_datetime to determine the length of the procedure.'
        procedure_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Procedure record, as in whether the procedure was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the PROCEDURE_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. If a procedure is recorded as an EHR encounter, the PROCEDURE_TYPE_CONCEPT would be ‘EHR encounter record’. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        modifier_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The modifiers are intended to give additional information about the procedure but as of now the vocabulary is under review. ETL Convention: It is up to the ETL to choose how to map modifiers if they exist in source data. These concepts are typically distinguished by ‘Modifier’ concept classes (e.g., ‘CPT4 Modifier’ as part of the ‘CPT4’ vocabulary). If there is more than one modifier on a record, one should be chosen that pertains to the procedure rather than provider. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?conceptClass=CPT4+Modifier&conceptClass=HCPCS+Modifier&vocabulary=CPT4&vocabulary=HCPCS&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        quantity:
          type: integer
          format: int64
          description: 'If the quantity value is omitted, a single procedure is assumed. ETL Convention: If a Procedure has a quantity of ‘0’ in the source, this should default to ‘1’ in the ETL. If there is a record in the source it can be assumed the exposure occurred at least once'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with the procedure record, e.g. the provider who performed the Procedure. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the procedure occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a PROCEDURE_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the Visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the PROCEDURE_OCCURRENCE record. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Procedure occurred. For example, if the Person was in the ICU at the time of the Procedure the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        procedure_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the procedure that occurred. For example, this could be an CPT4 or OPCS4 code. ETL Convention: Use this value to look up the source concept id and then map the source concept id to a standard concept id.'
        procedure_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the procedure source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Procedure necessary for a given analytic use case. Consider using PROCEDURE_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the PROCEDURE_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        modifier_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the modifier code for the procedure that occurred. ETL Convention: The value stored here is mapped to a MODIFIER_CONCEPT_ID.'
      description: Request body for creating a new ProcedureOccurrence record
    Clinical.ProcedureOccurrenceList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.ProcedureOccurrence'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ProcedureOccurrence records
      example:
        data:
          - id: 12345
            person_id: 100
            procedure_concept_id: 8507
            procedure_date: '2023-01-15'
            procedure_datetime: '2023-01-15'
            procedure_end_date: '2023-01-15'
            procedure_end_datetime: '2023-01-15'
            procedure_type_concept_id: 8507
            modifier_concept_id: 8507
            quantity: 100
            provider_id: 100
            visit_occurrence_id: 100
            visit_detail_id: 100
            procedure_source_value: Example value
            procedure_source_concept_id: 8507
            modifier_source_value: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.ProcedureOccurrenceUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the procedure is recorded. This may be a system generated code. References PERSON table.
        procedure_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The PROCEDURE_CONCEPT_ID field is recommended for primary use in analyses, and must be used for network studies. This is the standard concept mapped from the source value which represents a procedure ETL Convention: The CONCEPT_ID that the PROCEDURE_SOURCE_VALUE maps to. Only records whose source values map to standard concepts with a domain of “Procedure” should go in this table. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Procedure&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        procedure_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this date to determine the date the procedure started. ETL Convention: This is meant to be the **start date** of the procedure. It will be renamed in a future version to **PROCEDURE_START_DATE**.'
        procedure_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If the procedure has a start time in the native date, use this field to house that information. This will be renamed in a future version to **PROCEDURE_START_DATETIME**.
        procedure_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'Use this field to house the date that the procedure ended. ETL Convention: This is meant to be the end date of the procedure. It is not required and for most cases will be the same as the PROCEDURE_START_DATE.'
        procedure_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'Use this field to house the datetime that the procedure ended. ETL Convention: This is meant to house the end datetime of the procedure and will most often be used in conjunction with the procedure_start_datetime to determine the length of the procedure.'
        procedure_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Procedure record, as in whether the procedure was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the PROCEDURE_TYPE_CONCEPT_ID that best represents the provenance of the record, for example whether it came from an EHR record or billing claim. If a procedure is recorded as an EHR encounter, the PROCEDURE_TYPE_CONCEPT would be ‘EHR encounter record’. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        modifier_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The modifiers are intended to give additional information about the procedure but as of now the vocabulary is under review. ETL Convention: It is up to the ETL to choose how to map modifiers if they exist in source data. These concepts are typically distinguished by ‘Modifier’ concept classes (e.g., ‘CPT4 Modifier’ as part of the ‘CPT4’ vocabulary). If there is more than one modifier on a record, one should be chosen that pertains to the procedure rather than provider. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?conceptClass=CPT4+Modifier&conceptClass=HCPCS+Modifier&vocabulary=CPT4&vocabulary=HCPCS&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        quantity:
          type: integer
          format: int64
          description: 'If the quantity value is omitted, a single procedure is assumed. ETL Convention: If a Procedure has a quantity of ‘0’ in the source, this should default to ‘1’ in the ETL. If there is a record in the source it can be assumed the exposure occurred at least once'
        provider_id:
          type: integer
          format: int64
          description: 'The provider associated with the procedure record, e.g. the provider who performed the Procedure. ETL Convention: The ETL may need to make a choice as to which PROVIDER_ID to put here. Based on what is available this may or may not be different than the provider associated with the overall VISIT_OCCURRENCE record, for example the admitting vs attending physician on an EHR record. References PROVIDER table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'The visit during which the procedure occurred. ETL Convention: Depending on the structure of the source data, this may have to be determined based on dates. If a PROCEDURE_DATE occurs within the start and end date of a Visit it is a valid ETL choice to choose the VISIT_OCCURRENCE_ID from the Visit that subsumes it, even if not explicitly stated in the data. While not required, an attempt should be made to locate the VISIT_OCCURRENCE_ID of the PROCEDURE_OCCURRENCE record. References VISIT_OCCURRENCE table.'
        visit_detail_id:
          type: integer
          format: int64
          description: 'The VISIT_DETAIL record during which the Procedure occurred. For example, if the Person was in the ICU at the time of the Procedure the VISIT_OCCURRENCE record would reflect the overall hospital stay and the VISIT_DETAIL record would reflect the ICU stay during the hospital visit. ETL Convention: Same rules apply as for the VISIT_OCCURRENCE_ID. References VISIT_DETAIL table.'
        procedure_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the procedure that occurred. For example, this could be an CPT4 or OPCS4 code. ETL Convention: Use this value to look up the source concept id and then map the source concept id to a standard concept id.'
        procedure_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the concept representing the procedure source value and may not necessarily be standard. This field is discouraged from use in analysis because it is not required to contain Standard Concepts that are used across the OHDSI community, and should only be used when Standard Concepts do not adequately represent the source detail for the Procedure necessary for a given analytic use case. Consider using PROCEDURE_CONCEPT_ID instead to enable standardized analytics that can be consistent across the network. ETL Convention: If the PROCEDURE_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.'
        modifier_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the modifier code for the procedure that occurred. ETL Convention: The value stored here is mapped to a MODIFIER_CONCEPT_ID.'
      description: Request body for updating an existing ProcedureOccurrence record
    Clinical.Specimen:
      type: object
      required:
        - id
        - person_id
        - specimen_concept_id
        - specimen_type_concept_id
        - specimen_date
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for each specimen.
        person_id:
          type: integer
          format: int64
          description: The person from whom the specimen is collected. References PERSON table.
        specimen_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The standard CONCEPT_ID that the SPECIMEN_SOURCE_VALUE maps to in the specimen domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Specimen&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.
        specimen_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: Put the source of the specimen record, as in an EHR system. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Type+Concept&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.
        specimen_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the specimen was collected.
        specimen_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: ''
        quantity:
          type: number
          format: double
          description: The amount of specimen collected from the person.
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The unit for the quantity of the specimen. ETL Convention: Map the UNIT_SOURCE_VALUE to a Standard Concept in the Unit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Unit&standardConcept=Standard&page=1&pageSize=15&query=). If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        anatomic_site_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the site on the body where the specimen is from. ETL Convention: Map the ANATOMIC_SITE_SOURCE_VALUE to a Standard Concept in the Spec Anatomic Site domain. This should be coded at the lowest level of granularity [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Spec+Anatomic+Site&conceptClass=Body+Structure&page=4&pageSize=15&query=) References CONCEPT table.'
        disease_status_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        specimen_source_id:
          type: string
          maxLength: 50
          description: This is the identifier for the specimen from the source system.
        specimen_source_value:
          type: string
          maxLength: 50
          description: ''
        unit_source_value:
          type: string
          maxLength: 50
          description: This unit for the quantity of the specimen, as represented in the source.
        anatomic_site_source_value:
          type: string
          maxLength: 50
          description: This is the site on the body where the specimen was taken from, as represented in the source.
        disease_status_source_value:
          type: string
          maxLength: 50
          description: ''
      description: Specimen record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        specimen_concept_id: 8507
        specimen_type_concept_id: 8507
        specimen_date: '2023-01-15'
        specimen_datetime: '2023-01-15'
        quantity: 98.6
        unit_concept_id: 8507
        anatomic_site_concept_id: 8507
        disease_status_concept_id: 8507
        specimen_source_id: Example value
        specimen_source_value: Example value
        unit_source_value: Example value
        anatomic_site_source_value: Example value
        disease_status_source_value: Example value
    Clinical.SpecimenCreate:
      type: object
      required:
        - person_id
        - specimen_concept_id
        - specimen_type_concept_id
        - specimen_date
      properties:
        person_id:
          type: integer
          format: int64
          description: The person from whom the specimen is collected. References PERSON table.
        specimen_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The standard CONCEPT_ID that the SPECIMEN_SOURCE_VALUE maps to in the specimen domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Specimen&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.
        specimen_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: Put the source of the specimen record, as in an EHR system. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Type+Concept&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.
        specimen_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the specimen was collected.
        specimen_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: ''
        quantity:
          type: number
          format: double
          description: The amount of specimen collected from the person.
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The unit for the quantity of the specimen. ETL Convention: Map the UNIT_SOURCE_VALUE to a Standard Concept in the Unit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Unit&standardConcept=Standard&page=1&pageSize=15&query=). If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        anatomic_site_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the site on the body where the specimen is from. ETL Convention: Map the ANATOMIC_SITE_SOURCE_VALUE to a Standard Concept in the Spec Anatomic Site domain. This should be coded at the lowest level of granularity [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Spec+Anatomic+Site&conceptClass=Body+Structure&page=4&pageSize=15&query=) References CONCEPT table.'
        disease_status_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        specimen_source_id:
          type: string
          maxLength: 50
          description: This is the identifier for the specimen from the source system.
        specimen_source_value:
          type: string
          maxLength: 50
          description: ''
        unit_source_value:
          type: string
          maxLength: 50
          description: This unit for the quantity of the specimen, as represented in the source.
        anatomic_site_source_value:
          type: string
          maxLength: 50
          description: This is the site on the body where the specimen was taken from, as represented in the source.
        disease_status_source_value:
          type: string
          maxLength: 50
          description: ''
      description: Request body for creating a new Specimen record
    Clinical.SpecimenList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.Specimen'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Specimen records
      example:
        data:
          - id: 12345
            person_id: 100
            specimen_concept_id: 8507
            specimen_type_concept_id: 8507
            specimen_date: '2023-01-15'
            specimen_datetime: '2023-01-15'
            quantity: 98.6
            unit_concept_id: 8507
            anatomic_site_concept_id: 8507
            disease_status_concept_id: 8507
            specimen_source_id: Example value
            specimen_source_value: Example value
            unit_source_value: Example value
            anatomic_site_source_value: Example value
            disease_status_source_value: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.SpecimenUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The person from whom the specimen is collected. References PERSON table.
        specimen_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The standard CONCEPT_ID that the SPECIMEN_SOURCE_VALUE maps to in the specimen domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Specimen&standardConcept=Standard&page=1&pageSize=15&query=) References CONCEPT table.
        specimen_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: Put the source of the specimen record, as in an EHR system. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Type+Concept&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.
        specimen_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the specimen was collected.
        specimen_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: ''
        quantity:
          type: number
          format: double
          description: The amount of specimen collected from the person.
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The unit for the quantity of the specimen. ETL Convention: Map the UNIT_SOURCE_VALUE to a Standard Concept in the Unit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Unit&standardConcept=Standard&page=1&pageSize=15&query=). If the source unit is NULL (applicable to cases when there’s no numerical value or when it doesn’t require a unit), keep unit_concept_id NULL as well. If there’s no mapping of a source unit, populate unit_concept_id with 0. References CONCEPT table.'
        anatomic_site_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is the site on the body where the specimen is from. ETL Convention: Map the ANATOMIC_SITE_SOURCE_VALUE to a Standard Concept in the Spec Anatomic Site domain. This should be coded at the lowest level of granularity [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?standardConcept=Standard&domain=Spec+Anatomic+Site&conceptClass=Body+Structure&page=4&pageSize=15&query=) References CONCEPT table.'
        disease_status_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        specimen_source_id:
          type: string
          description: This is the identifier for the specimen from the source system.
        specimen_source_value:
          type: string
          description: ''
        unit_source_value:
          type: string
          description: This unit for the quantity of the specimen, as represented in the source.
        anatomic_site_source_value:
          type: string
          description: This is the site on the body where the specimen was taken from, as represented in the source.
        disease_status_source_value:
          type: string
          description: ''
      description: Request body for updating an existing Specimen record
    Clinical.VisitDetail:
      type: object
      required:
        - id
        - person_id
        - visit_detail_concept_id
        - visit_detail_start_date
        - visit_detail_end_date
        - visit_detail_type_concept_id
        - visit_occurrence_id
      properties:
        id:
          type: integer
          format: int64
          description: 'Use this to identify unique interactions between a person and the health care system. This identifier links across the other CDM event tables to associate events with a visit detail. ETL Convention: This should be populated by creating a unique identifier for each unique interaction between a person and the healthcare system where the person receives a medical good or service over a span of time.'
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        visit_detail_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains a concept id representing the kind of visit detail, like inpatient or outpatient. All concepts in this field should be standard and belong to the Visit domain. ETL Convention: Populate this field based on the kind of visit that took place for the person. For example this could be “Inpatient Visit”, “Outpatient Visit”, “Ambulatory Visit”, etc. This table will contain standard concepts in the Visit domain. These concepts are arranged in a hierarchical structure to facilitate cohort definitions by rolling up to generally familiar Visits adopted in most healthcare systems worldwide. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        visit_detail_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This is the date of the start of the encounter. This may or may not be equal to the date of the Visit the Visit Detail is associated with. ETL Convention: When populating VISIT_DETAIL_START_DATE, you should think about the patient experience to make decisions on how to define visits. Most likely this should be the date of the patient-provider interaction.'
        visit_detail_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given for the start date of a visit, set it to midnight (00:00:0000).
        visit_detail_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This the end date of the patient-provider interaction. If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_date, then set the visit_end_date to the date of the data pull. ETL Convention: Visit Detail end dates are mandatory. If end dates are not provided in the source there are three ways in which to derive them: - Outpatient Visit Detail: visit_detail_end_datetime = visit_detail_start_datetime - Emergency Room Visit Detail: visit_detail_end_datetime = visit_detail_start_datetime - Inpatient Visit Detail: Usually there is information about discharge. If not, you should be able to derive the end date from the sudden decline of activity or from the absence of inpatient procedures/drugs. - Non-hospital institution Visit Details: Particularly for claims data, if end dates are not provided assume the visit is for the duration of month that it occurs. For Inpatient Visit Details ongoing at the date of ETL, put date of processing the data into visit_detai_end_datetime and visit_detail_type_concept_id with 32220 “Still patient” to identify the visit as incomplete. All other Visits Details: visit_detail_end_datetime = visit_detail_start_datetime.'
        visit_detail_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_datetime, then set the visit_end_datetime to the datetime of the data pull. ETL Convention: If no time is given for the end date of a visit, set it to midnight (00:00:0000).'
        visit_detail_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to understand the provenance of the visit detail record, or where the record comes from. ETL Convention: Populate this field based on the provenance of the visit detail record, as in whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'There will only be one provider per **visit** record and the ETL document should clearly state how they were chosen (attending, admitting, etc.). This is a typical reason for leveraging the VISIT_DETAIL table as even though each VISIT_DETAIL record can only have one provider, there is no limit to the number of VISIT_DETAIL records that can be associated to a VISIT_OCCURRENCE record. ETL Convention: The additional providers associated to a Visit can be stored in this table where each VISIT_DETAIL record represents a different provider. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This field provides information about the Care Site where the Visit Detail took place. ETL Convention: There should only be one Care Site associated with a Visit Detail. References CARE_SITE table.'
        visit_detail_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the kind of visit detail that took place (inpatient, outpatient, emergency, etc.) ETL Convention: If there is information about the kind of visit detail in the source data that value should be stored here. If a visit is an amalgamation of visits from the source then use a hierarchy to choose the VISIT_DETAIL_SOURCE_VALUE, such as IP -> ER-> OP. This should line up with the logic chosen to determine how visits are created.'
        visit_detail_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the VISIT_DETAIL_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.
        admitted_from_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was admitted from. This concept is part of the visit domain and can indicate if a patient was admitted to the hospital from a long-term care facility, for example. ETL Convention: If available, map the admitted_from_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). If a person was admitted from home or was self-referred, set this to 0. References CONCEPT table.'
        admitted_from_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was admitted from. Typically this applies only to visits that have a length of stay, like inpatient visits or long-term care visits.
        discharged_to_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was discharged to after a visit, as in they went home or were moved to long-term care. Typically this applies only to visits that have a length of stay of a day or more.
        discharged_to_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was discharged to after a visit. This concept is part of the visit domain and can indicate if a patient was transferred to another hospital or sent to a long-term care facility, for example. It is assumed that a person is discharged to home therefore there is not a standard concept id for “home”. Use concept id = 0 when a person is discharged to home. ETL Convention: If available, map the DISCHARGE_TO_SOURCE_VALUE to a Standard Concept in the Visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        preceding_visit_detail_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit detail that occurred for the person prior to the given visit detail record. There could be a few days or a few years in between. ETL Convention: The PRECEDING_VISIT_DETAIL_ID can be used to link a visit immediately preceding the current Visit Detail. Note this is not symmetrical, and there is no such thing as a “following_visit_id”. References VISIT_DETAIL table.'
        parent_visit_detail_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit detail that subsumes the given visit detail record. This is used in the case that a visit detail record needs to be nested beyond the VISIT_OCCURRENCE/VISIT_DETAIL relationship. ETL Convention: If there are multiple nested levels to how Visits are represented in the source, the VISIT_DETAIL_PARENT_ID can be used to record this relationship. References VISIT_DETAIL table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'Use this field to link the VISIT_DETAIL record to its VISIT_OCCURRENCE. ETL Convention: Put the VISIT_OCCURRENCE_ID that subsumes the VISIT_DETAIL record here. References VISIT_OCCURRENCE table.'
      description: VisitDetail record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        visit_detail_concept_id: 8507
        visit_detail_start_date: '2023-01-15'
        visit_detail_start_datetime: '2023-01-15'
        visit_detail_end_date: '2023-01-15'
        visit_detail_end_datetime: '2023-01-15'
        visit_detail_type_concept_id: 8507
        provider_id: 100
        care_site_id: 100
        visit_detail_source_value: Example value
        visit_detail_source_concept_id: 8507
        admitted_from_concept_id: 8507
        admitted_from_source_value: Example value
        discharged_to_source_value: Example value
        discharged_to_concept_id: 8507
        preceding_visit_detail_id: 100
        parent_visit_detail_id: 100
        visit_occurrence_id: 100
    Clinical.VisitDetailCreate:
      type: object
      required:
        - person_id
        - visit_detail_concept_id
        - visit_detail_start_date
        - visit_detail_end_date
        - visit_detail_type_concept_id
        - visit_occurrence_id
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        visit_detail_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains a concept id representing the kind of visit detail, like inpatient or outpatient. All concepts in this field should be standard and belong to the Visit domain. ETL Convention: Populate this field based on the kind of visit that took place for the person. For example this could be “Inpatient Visit”, “Outpatient Visit”, “Ambulatory Visit”, etc. This table will contain standard concepts in the Visit domain. These concepts are arranged in a hierarchical structure to facilitate cohort definitions by rolling up to generally familiar Visits adopted in most healthcare systems worldwide. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        visit_detail_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This is the date of the start of the encounter. This may or may not be equal to the date of the Visit the Visit Detail is associated with. ETL Convention: When populating VISIT_DETAIL_START_DATE, you should think about the patient experience to make decisions on how to define visits. Most likely this should be the date of the patient-provider interaction.'
        visit_detail_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given for the start date of a visit, set it to midnight (00:00:0000).
        visit_detail_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This the end date of the patient-provider interaction. If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_date, then set the visit_end_date to the date of the data pull. ETL Convention: Visit Detail end dates are mandatory. If end dates are not provided in the source there are three ways in which to derive them: - Outpatient Visit Detail: visit_detail_end_datetime = visit_detail_start_datetime - Emergency Room Visit Detail: visit_detail_end_datetime = visit_detail_start_datetime - Inpatient Visit Detail: Usually there is information about discharge. If not, you should be able to derive the end date from the sudden decline of activity or from the absence of inpatient procedures/drugs. - Non-hospital institution Visit Details: Particularly for claims data, if end dates are not provided assume the visit is for the duration of month that it occurs. For Inpatient Visit Details ongoing at the date of ETL, put date of processing the data into visit_detai_end_datetime and visit_detail_type_concept_id with 32220 “Still patient” to identify the visit as incomplete. All other Visits Details: visit_detail_end_datetime = visit_detail_start_datetime.'
        visit_detail_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_datetime, then set the visit_end_datetime to the datetime of the data pull. ETL Convention: If no time is given for the end date of a visit, set it to midnight (00:00:0000).'
        visit_detail_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to understand the provenance of the visit detail record, or where the record comes from. ETL Convention: Populate this field based on the provenance of the visit detail record, as in whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'There will only be one provider per **visit** record and the ETL document should clearly state how they were chosen (attending, admitting, etc.). This is a typical reason for leveraging the VISIT_DETAIL table as even though each VISIT_DETAIL record can only have one provider, there is no limit to the number of VISIT_DETAIL records that can be associated to a VISIT_OCCURRENCE record. ETL Convention: The additional providers associated to a Visit can be stored in this table where each VISIT_DETAIL record represents a different provider. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This field provides information about the Care Site where the Visit Detail took place. ETL Convention: There should only be one Care Site associated with a Visit Detail. References CARE_SITE table.'
        visit_detail_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the kind of visit detail that took place (inpatient, outpatient, emergency, etc.) ETL Convention: If there is information about the kind of visit detail in the source data that value should be stored here. If a visit is an amalgamation of visits from the source then use a hierarchy to choose the VISIT_DETAIL_SOURCE_VALUE, such as IP -> ER-> OP. This should line up with the logic chosen to determine how visits are created.'
        visit_detail_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the VISIT_DETAIL_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.
        admitted_from_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was admitted from. This concept is part of the visit domain and can indicate if a patient was admitted to the hospital from a long-term care facility, for example. ETL Convention: If available, map the admitted_from_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). If a person was admitted from home or was self-referred, set this to 0. References CONCEPT table.'
        admitted_from_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was admitted from. Typically this applies only to visits that have a length of stay, like inpatient visits or long-term care visits.
        discharged_to_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was discharged to after a visit, as in they went home or were moved to long-term care. Typically this applies only to visits that have a length of stay of a day or more.
        discharged_to_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was discharged to after a visit. This concept is part of the visit domain and can indicate if a patient was transferred to another hospital or sent to a long-term care facility, for example. It is assumed that a person is discharged to home therefore there is not a standard concept id for “home”. Use concept id = 0 when a person is discharged to home. ETL Convention: If available, map the DISCHARGE_TO_SOURCE_VALUE to a Standard Concept in the Visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        preceding_visit_detail_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit detail that occurred for the person prior to the given visit detail record. There could be a few days or a few years in between. ETL Convention: The PRECEDING_VISIT_DETAIL_ID can be used to link a visit immediately preceding the current Visit Detail. Note this is not symmetrical, and there is no such thing as a “following_visit_id”. References VISIT_DETAIL table.'
        parent_visit_detail_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit detail that subsumes the given visit detail record. This is used in the case that a visit detail record needs to be nested beyond the VISIT_OCCURRENCE/VISIT_DETAIL relationship. ETL Convention: If there are multiple nested levels to how Visits are represented in the source, the VISIT_DETAIL_PARENT_ID can be used to record this relationship. References VISIT_DETAIL table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'Use this field to link the VISIT_DETAIL record to its VISIT_OCCURRENCE. ETL Convention: Put the VISIT_OCCURRENCE_ID that subsumes the VISIT_DETAIL record here. References VISIT_OCCURRENCE table.'
      description: Request body for creating a new VisitDetail record
    Clinical.VisitDetailList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.VisitDetail'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of VisitDetail records
      example:
        data:
          - id: 12345
            person_id: 100
            visit_detail_concept_id: 8507
            visit_detail_start_date: '2023-01-15'
            visit_detail_start_datetime: '2023-01-15'
            visit_detail_end_date: '2023-01-15'
            visit_detail_end_datetime: '2023-01-15'
            visit_detail_type_concept_id: 8507
            provider_id: 100
            care_site_id: 100
            visit_detail_source_value: Example value
            visit_detail_source_concept_id: 8507
            admitted_from_concept_id: 8507
            admitted_from_source_value: Example value
            discharged_to_source_value: Example value
            discharged_to_concept_id: 8507
            preceding_visit_detail_id: 100
            parent_visit_detail_id: 100
            visit_occurrence_id: 100
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.VisitDetailUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        visit_detail_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains a concept id representing the kind of visit detail, like inpatient or outpatient. All concepts in this field should be standard and belong to the Visit domain. ETL Convention: Populate this field based on the kind of visit that took place for the person. For example this could be “Inpatient Visit”, “Outpatient Visit”, “Ambulatory Visit”, etc. This table will contain standard concepts in the Visit domain. These concepts are arranged in a hierarchical structure to facilitate cohort definitions by rolling up to generally familiar Visits adopted in most healthcare systems worldwide. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        visit_detail_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This is the date of the start of the encounter. This may or may not be equal to the date of the Visit the Visit Detail is associated with. ETL Convention: When populating VISIT_DETAIL_START_DATE, you should think about the patient experience to make decisions on how to define visits. Most likely this should be the date of the patient-provider interaction.'
        visit_detail_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given for the start date of a visit, set it to midnight (00:00:0000).
        visit_detail_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'This the end date of the patient-provider interaction. If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_date, then set the visit_end_date to the date of the data pull. ETL Convention: Visit Detail end dates are mandatory. If end dates are not provided in the source there are three ways in which to derive them: - Outpatient Visit Detail: visit_detail_end_datetime = visit_detail_start_datetime - Emergency Room Visit Detail: visit_detail_end_datetime = visit_detail_start_datetime - Inpatient Visit Detail: Usually there is information about discharge. If not, you should be able to derive the end date from the sudden decline of activity or from the absence of inpatient procedures/drugs. - Non-hospital institution Visit Details: Particularly for claims data, if end dates are not provided assume the visit is for the duration of month that it occurs. For Inpatient Visit Details ongoing at the date of ETL, put date of processing the data into visit_detai_end_datetime and visit_detail_type_concept_id with 32220 “Still patient” to identify the visit as incomplete. All other Visits Details: visit_detail_end_datetime = visit_detail_start_datetime.'
        visit_detail_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_datetime, then set the visit_end_datetime to the datetime of the data pull. ETL Convention: If no time is given for the end date of a visit, set it to midnight (00:00:0000).'
        visit_detail_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to understand the provenance of the visit detail record, or where the record comes from. ETL Convention: Populate this field based on the provenance of the visit detail record, as in whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'There will only be one provider per **visit** record and the ETL document should clearly state how they were chosen (attending, admitting, etc.). This is a typical reason for leveraging the VISIT_DETAIL table as even though each VISIT_DETAIL record can only have one provider, there is no limit to the number of VISIT_DETAIL records that can be associated to a VISIT_OCCURRENCE record. ETL Convention: The additional providers associated to a Visit can be stored in this table where each VISIT_DETAIL record represents a different provider. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This field provides information about the Care Site where the Visit Detail took place. ETL Convention: There should only be one Care Site associated with a Visit Detail. References CARE_SITE table.'
        visit_detail_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the kind of visit detail that took place (inpatient, outpatient, emergency, etc.) ETL Convention: If there is information about the kind of visit detail in the source data that value should be stored here. If a visit is an amalgamation of visits from the source then use a hierarchy to choose the VISIT_DETAIL_SOURCE_VALUE, such as IP -> ER-> OP. This should line up with the logic chosen to determine how visits are created.'
        visit_detail_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the VISIT_DETAIL_SOURCE_VALUE is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.
        admitted_from_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was admitted from. This concept is part of the visit domain and can indicate if a patient was admitted to the hospital from a long-term care facility, for example. ETL Convention: If available, map the admitted_from_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). If a person was admitted from home or was self-referred, set this to 0. References CONCEPT table.'
        admitted_from_source_value:
          type: string
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was admitted from. Typically this applies only to visits that have a length of stay, like inpatient visits or long-term care visits.
        discharged_to_source_value:
          type: string
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was discharged to after a visit, as in they went home or were moved to long-term care. Typically this applies only to visits that have a length of stay of a day or more.
        discharged_to_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was discharged to after a visit. This concept is part of the visit domain and can indicate if a patient was transferred to another hospital or sent to a long-term care facility, for example. It is assumed that a person is discharged to home therefore there is not a standard concept id for “home”. Use concept id = 0 when a person is discharged to home. ETL Convention: If available, map the DISCHARGE_TO_SOURCE_VALUE to a Standard Concept in the Visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        preceding_visit_detail_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit detail that occurred for the person prior to the given visit detail record. There could be a few days or a few years in between. ETL Convention: The PRECEDING_VISIT_DETAIL_ID can be used to link a visit immediately preceding the current Visit Detail. Note this is not symmetrical, and there is no such thing as a “following_visit_id”. References VISIT_DETAIL table.'
        parent_visit_detail_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit detail that subsumes the given visit detail record. This is used in the case that a visit detail record needs to be nested beyond the VISIT_OCCURRENCE/VISIT_DETAIL relationship. ETL Convention: If there are multiple nested levels to how Visits are represented in the source, the VISIT_DETAIL_PARENT_ID can be used to record this relationship. References VISIT_DETAIL table.'
        visit_occurrence_id:
          type: integer
          format: int64
          description: 'Use this field to link the VISIT_DETAIL record to its VISIT_OCCURRENCE. ETL Convention: Put the VISIT_OCCURRENCE_ID that subsumes the VISIT_DETAIL record here. References VISIT_OCCURRENCE table.'
      description: Request body for updating an existing VisitDetail record
    Clinical.VisitOccurrence:
      type: object
      required:
        - id
        - person_id
        - visit_concept_id
        - visit_start_date
        - visit_end_date
        - visit_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: 'Use this to identify unique interactions between a person and the health care system. This identifier links across the other CDM event tables to associate events with a visit. ETL Convention: This should be populated by creating a unique identifier for each unique interaction between a person and the healthcare system where the person receives a medical good or service over a span of time.'
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        visit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains a concept id representing the kind of visit, like inpatient or outpatient. All concepts in this field should be standard and belong to the Visit domain. ETL Convention: Populate this field based on the kind of visit that took place for the person. For example this could be “Inpatient Visit”, “Outpatient Visit”, “Ambulatory Visit”, etc. This table will contain standard concepts in the Visit domain. These concepts are arranged in a hierarchical structure to facilitate cohort definitions by rolling up to generally familiar Visits adopted in most healthcare systems worldwide. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        visit_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'For inpatient visits, the start date is typically the admission date. For outpatient visits the start date and end date will be the same. ETL Convention: When populating VISIT_START_DATE, you should think about the patient experience to make decisions on how to define visits. In the case of an inpatient visit this should be the date the patient was admitted to the hospital or institution. In all other cases this should be the date of the patient-provider interaction. If this information is not available the record should be dropped.'
        visit_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given for the start date of a visit, set it to midnight (00:00:0000).
        visit_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'For inpatient visits the end date is typically the discharge date. If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_date, then set the visit_end_date to the date of the data pull. ETL Convention: Visit end dates are mandatory. If end dates are not provided in the source there are three ways in which to derive them: - Outpatient Visit: visit_end_datetime = visit_start_datetime - Emergency Room Visit: visit_end_datetime = visit_start_datetime - Inpatient Visit: Usually there is information about discharge. If not, you should be able to derive the end date from the sudden decline of activity or from the absence of inpatient procedures/drugs. - Non-hospital institution Visits: Particularly for claims data, if end dates are not provided assume the visit is for the duration of month that it occurs. For Inpatient Visits ongoing at the date of ETL, put date of processing the data into visit_end_datetime and visit_type_concept_id with 32220 “Still patient” to identify the visit as incomplete. - All other Visits: visit_end_datetime = visit_start_datetime. If this is a one-day visit the end date should match the start date.'
        visit_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_datetime, then set the visit_end_datetime to the datetime of the data pull. ETL Convention: If no time is given for the end date of a visit, set it to midnight (00:00:0000).'
        visit_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to understand the provenance of the visit record, or where the record comes from. ETL Convention: Populate this field based on the provenance of the visit record, as in whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'There will only be one provider per visit record and the ETL document should clearly state how they were chosen (attending, admitting, etc.). If there are multiple providers associated with a visit in the source, this can be reflected in the event tables (CONDITION_OCCURRENCE, PROCEDURE_OCCURRENCE, etc.) or in the VISIT_DETAIL table. ETL Convention: If there are multiple providers associated with a visit, you will need to choose which one to put here. The additional providers can be stored in the [VISIT_DETAIL](https://ohdsi.github.io/CommonDataModel/cdm54.html#visit_detail) table. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This field provides information about the Care Site where the Visit took place. ETL Convention: There should only be one Care Site associated with a Visit. References CARE_SITE table.'
        visit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the kind of visit that took place (inpatient, outpatient, emergency, etc.) ETL Convention: If there is information about the kind of visit in the source data that value should be stored here. If a visit is an amalgamation of visits from the source then use a hierarchy to choose the visit source value, such as IP -> ER-> OP. This should line up with the logic chosen to determine how visits are created.'
        visit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the visit source value is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.
        admitted_from_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was admitted from. This concept is part of the visit domain and can indicate if a patient was admitted to the hospital from a long-term care facility, for example. ETL Convention: If available, map the admitted_from_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). If a person was admitted from home or was self-referred, set this to 0. References CONCEPT table.'
        admitted_from_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was admitted from. Typically this applies only to visits that have a length of stay, like inpatient visits or long-term care visits.
        discharged_to_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was discharged to after a visit. This concept is part of the visit domain and can indicate if a patient was transferred to another hospital or sent to a long-term care facility, for example. It is assumed that a person is discharged to home therefore there is not a standard concept id for “home”. Use concept id = 0 when a person is discharged to home. ETL Convention: If available, map the discharged_to_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        discharged_to_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was discharged to after a visit, as in they went home or were moved to long-term care. Typically this applies only to visits that have a length of stay of a day or more.
        preceding_visit_occurrence_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit that occurred for the person prior to the given visit. There could be a few days or a few years in between. ETL Convention: This field can be used to link a visit immediately preceding the current visit. Note this is not symmetrical, and there is no such thing as a “following_visit_id”. References VISIT_OCCURRENCE table.'
      description: VisitOccurrence record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        visit_concept_id: 8507
        visit_start_date: '2023-01-15'
        visit_start_datetime: '2023-01-15'
        visit_end_date: '2023-01-15'
        visit_end_datetime: '2023-01-15'
        visit_type_concept_id: 8507
        provider_id: 100
        care_site_id: 100
        visit_source_value: Example value
        visit_source_concept_id: 8507
        admitted_from_concept_id: 8507
        admitted_from_source_value: Example value
        discharged_to_concept_id: 8507
        discharged_to_source_value: Example value
        preceding_visit_occurrence_id: 100
    Clinical.VisitOccurrenceCreate:
      type: object
      required:
        - person_id
        - visit_concept_id
        - visit_start_date
        - visit_end_date
        - visit_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        visit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains a concept id representing the kind of visit, like inpatient or outpatient. All concepts in this field should be standard and belong to the Visit domain. ETL Convention: Populate this field based on the kind of visit that took place for the person. For example this could be “Inpatient Visit”, “Outpatient Visit”, “Ambulatory Visit”, etc. This table will contain standard concepts in the Visit domain. These concepts are arranged in a hierarchical structure to facilitate cohort definitions by rolling up to generally familiar Visits adopted in most healthcare systems worldwide. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        visit_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'For inpatient visits, the start date is typically the admission date. For outpatient visits the start date and end date will be the same. ETL Convention: When populating VISIT_START_DATE, you should think about the patient experience to make decisions on how to define visits. In the case of an inpatient visit this should be the date the patient was admitted to the hospital or institution. In all other cases this should be the date of the patient-provider interaction. If this information is not available the record should be dropped.'
        visit_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given for the start date of a visit, set it to midnight (00:00:0000).
        visit_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'For inpatient visits the end date is typically the discharge date. If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_date, then set the visit_end_date to the date of the data pull. ETL Convention: Visit end dates are mandatory. If end dates are not provided in the source there are three ways in which to derive them: - Outpatient Visit: visit_end_datetime = visit_start_datetime - Emergency Room Visit: visit_end_datetime = visit_start_datetime - Inpatient Visit: Usually there is information about discharge. If not, you should be able to derive the end date from the sudden decline of activity or from the absence of inpatient procedures/drugs. - Non-hospital institution Visits: Particularly for claims data, if end dates are not provided assume the visit is for the duration of month that it occurs. For Inpatient Visits ongoing at the date of ETL, put date of processing the data into visit_end_datetime and visit_type_concept_id with 32220 “Still patient” to identify the visit as incomplete. - All other Visits: visit_end_datetime = visit_start_datetime. If this is a one-day visit the end date should match the start date.'
        visit_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_datetime, then set the visit_end_datetime to the datetime of the data pull. ETL Convention: If no time is given for the end date of a visit, set it to midnight (00:00:0000).'
        visit_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to understand the provenance of the visit record, or where the record comes from. ETL Convention: Populate this field based on the provenance of the visit record, as in whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'There will only be one provider per visit record and the ETL document should clearly state how they were chosen (attending, admitting, etc.). If there are multiple providers associated with a visit in the source, this can be reflected in the event tables (CONDITION_OCCURRENCE, PROCEDURE_OCCURRENCE, etc.) or in the VISIT_DETAIL table. ETL Convention: If there are multiple providers associated with a visit, you will need to choose which one to put here. The additional providers can be stored in the [VISIT_DETAIL](https://ohdsi.github.io/CommonDataModel/cdm54.html#visit_detail) table. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This field provides information about the Care Site where the Visit took place. ETL Convention: There should only be one Care Site associated with a Visit. References CARE_SITE table.'
        visit_source_value:
          type: string
          maxLength: 50
          description: 'This field houses the verbatim value from the source data representing the kind of visit that took place (inpatient, outpatient, emergency, etc.) ETL Convention: If there is information about the kind of visit in the source data that value should be stored here. If a visit is an amalgamation of visits from the source then use a hierarchy to choose the visit source value, such as IP -> ER-> OP. This should line up with the logic chosen to determine how visits are created.'
        visit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the visit source value is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.
        admitted_from_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was admitted from. This concept is part of the visit domain and can indicate if a patient was admitted to the hospital from a long-term care facility, for example. ETL Convention: If available, map the admitted_from_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). If a person was admitted from home or was self-referred, set this to 0. References CONCEPT table.'
        admitted_from_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was admitted from. Typically this applies only to visits that have a length of stay, like inpatient visits or long-term care visits.
        discharged_to_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was discharged to after a visit. This concept is part of the visit domain and can indicate if a patient was transferred to another hospital or sent to a long-term care facility, for example. It is assumed that a person is discharged to home therefore there is not a standard concept id for “home”. Use concept id = 0 when a person is discharged to home. ETL Convention: If available, map the discharged_to_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        discharged_to_source_value:
          type: string
          maxLength: 50
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was discharged to after a visit, as in they went home or were moved to long-term care. Typically this applies only to visits that have a length of stay of a day or more.
        preceding_visit_occurrence_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit that occurred for the person prior to the given visit. There could be a few days or a few years in between. ETL Convention: This field can be used to link a visit immediately preceding the current visit. Note this is not symmetrical, and there is no such thing as a “following_visit_id”. References VISIT_OCCURRENCE table.'
      description: Request body for creating a new VisitOccurrence record
    Clinical.VisitOccurrenceList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Clinical.VisitOccurrence'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of VisitOccurrence records
      example:
        data:
          - id: 12345
            person_id: 100
            visit_concept_id: 8507
            visit_start_date: '2023-01-15'
            visit_start_datetime: '2023-01-15'
            visit_end_date: '2023-01-15'
            visit_end_datetime: '2023-01-15'
            visit_type_concept_id: 8507
            provider_id: 100
            care_site_id: 100
            visit_source_value: Example value
            visit_source_concept_id: 8507
            admitted_from_concept_id: 8507
            admitted_from_source_value: Example value
            discharged_to_concept_id: 8507
            discharged_to_source_value: Example value
            preceding_visit_occurrence_id: 100
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Clinical.VisitOccurrenceUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        visit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field contains a concept id representing the kind of visit, like inpatient or outpatient. All concepts in this field should be standard and belong to the Visit domain. ETL Convention: Populate this field based on the kind of visit that took place for the person. For example this could be “Inpatient Visit”, “Outpatient Visit”, “Ambulatory Visit”, etc. This table will contain standard concepts in the Visit domain. These concepts are arranged in a hierarchical structure to facilitate cohort definitions by rolling up to generally familiar Visits adopted in most healthcare systems worldwide. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        visit_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'For inpatient visits, the start date is typically the admission date. For outpatient visits the start date and end date will be the same. ETL Convention: When populating VISIT_START_DATE, you should think about the patient experience to make decisions on how to define visits. In the case of an inpatient visit this should be the date the patient was admitted to the hospital or institution. In all other cases this should be the date of the patient-provider interaction. If this information is not available the record should be dropped.'
        visit_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: If no time is given for the start date of a visit, set it to midnight (00:00:0000).
        visit_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'For inpatient visits the end date is typically the discharge date. If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_date, then set the visit_end_date to the date of the data pull. ETL Convention: Visit end dates are mandatory. If end dates are not provided in the source there are three ways in which to derive them: - Outpatient Visit: visit_end_datetime = visit_start_datetime - Emergency Room Visit: visit_end_datetime = visit_start_datetime - Inpatient Visit: Usually there is information about discharge. If not, you should be able to derive the end date from the sudden decline of activity or from the absence of inpatient procedures/drugs. - Non-hospital institution Visits: Particularly for claims data, if end dates are not provided assume the visit is for the duration of month that it occurs. For Inpatient Visits ongoing at the date of ETL, put date of processing the data into visit_end_datetime and visit_type_concept_id with 32220 “Still patient” to identify the visit as incomplete. - All other Visits: visit_end_datetime = visit_start_datetime. If this is a one-day visit the end date should match the start date.'
        visit_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: 'If a Person is still an inpatient in the hospital at the time of the data extract and does not have a visit_end_datetime, then set the visit_end_datetime to the datetime of the data pull. ETL Convention: If no time is given for the end date of a visit, set it to midnight (00:00:0000).'
        visit_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to understand the provenance of the visit record, or where the record comes from. ETL Convention: Populate this field based on the provenance of the visit record, as in whether it came from an EHR record or billing claim. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        provider_id:
          type: integer
          format: int64
          description: 'There will only be one provider per visit record and the ETL document should clearly state how they were chosen (attending, admitting, etc.). If there are multiple providers associated with a visit in the source, this can be reflected in the event tables (CONDITION_OCCURRENCE, PROCEDURE_OCCURRENCE, etc.) or in the VISIT_DETAIL table. ETL Convention: If there are multiple providers associated with a visit, you will need to choose which one to put here. The additional providers can be stored in the [VISIT_DETAIL](https://ohdsi.github.io/CommonDataModel/cdm54.html#visit_detail) table. References PROVIDER table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This field provides information about the Care Site where the Visit took place. ETL Convention: There should only be one Care Site associated with a Visit. References CARE_SITE table.'
        visit_source_value:
          type: string
          description: 'This field houses the verbatim value from the source data representing the kind of visit that took place (inpatient, outpatient, emergency, etc.) ETL Convention: If there is information about the kind of visit in the source data that value should be stored here. If a visit is an amalgamation of visits from the source then use a hierarchy to choose the visit source value, such as IP -> ER-> OP. This should line up with the logic chosen to determine how visits are created.'
        visit_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the visit source value is coded in the source data using an OMOP supported vocabulary put the concept id representing the source value here. References CONCEPT table.
        admitted_from_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was admitted from. This concept is part of the visit domain and can indicate if a patient was admitted to the hospital from a long-term care facility, for example. ETL Convention: If available, map the admitted_from_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). If a person was admitted from home or was self-referred, set this to 0. References CONCEPT table.'
        admitted_from_source_value:
          type: string
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was admitted from. Typically this applies only to visits that have a length of stay, like inpatient visits or long-term care visits.
        discharged_to_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'Use this field to determine where the patient was discharged to after a visit. This concept is part of the visit domain and can indicate if a patient was transferred to another hospital or sent to a long-term care facility, for example. It is assumed that a person is discharged to home therefore there is not a standard concept id for “home”. Use concept id = 0 when a person is discharged to home. ETL Convention: If available, map the discharged_to_source_value to a standard concept in the visit domain. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        discharged_to_source_value:
          type: string
          description: This information may be called something different in the source data but the field is meant to contain a value indicating where a person was discharged to after a visit, as in they went home or were moved to long-term care. Typically this applies only to visits that have a length of stay of a day or more.
        preceding_visit_occurrence_id:
          type: integer
          format: int64
          description: 'Use this field to find the visit that occurred for the person prior to the given visit. There could be a few days or a few years in between. ETL Convention: This field can be used to link a visit immediately preceding the current visit. Note this is not symmetrical, and there is no such thing as a “following_visit_id”. References VISIT_OCCURRENCE table.'
      description: Request body for updating an existing VisitOccurrence record
    Common.BatchError:
      type: object
      required:
        - index
        - message
        - item
      properties:
        index:
          type: integer
          format: int32
          description: Index of the failed item in the original batch
        message:
          type: string
          description: Error message
        item:
          type: object
          additionalProperties:
            type: string
          description: The item that failed
      description: Error information for a failed batch item
    Common.ConceptId:
      type: integer
      format: int32
      description: OMOP Concept ID - references the CONCEPT table
    Common.DateOnly:
      type: string
      description: Date in YYYY-MM-DD format
    Common.DateRangeFilter:
      type: object
      properties:
        startDate:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: Start date (inclusive)
        endDate:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: End date (inclusive)
      description: Date range filter
    Common.DateTime:
      type: string
      description: DateTime in ISO 8601 format
    Common.ErrorResponse:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: HTTP status code
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Detailed error information
        validation:
          type: array
          items:
            $ref: '#/components/schemas/Common.ValidationError'
          description: Validation errors (if applicable)
      description: Error response
    Common.PaginationInfo:
      type: object
      required:
        - total
        - offset
        - limit
        - count
      properties:
        total:
          type: integer
          format: int64
          description: Total number of items available
        offset:
          type: integer
          format: int32
          description: Number of items skipped
        limit:
          type: integer
          format: int32
          description: Maximum number of items in this response
        count:
          type: integer
          format: int32
          description: Number of items in this response
      description: Pagination information in list responses
    Common.ResponseMetadata:
      type: object
      required:
        - timestamp
        - version
      properties:
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: Timestamp when the response was generated
        version:
          type: string
          description: API version
        requestId:
          type: string
          description: Request ID for tracking
      description: Response metadata
    Common.SortOrder:
      type: string
      enum:
        - asc
        - desc
      description: Sort order for list operations
    Common.SuccessResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional metadata
      description: Success response
    Common.TimeOnly:
      type: string
      description: Time in HH:MM:SS format
    Common.ValidationError:
      type: object
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: Field name that failed validation
        message:
          type: string
          description: Validation error message
        rejectedValue:
          type: string
          description: Rejected value
      description: Validation error for a specific field
    Derived.ConditionEra:
      type: object
      required:
        - id
        - person_id
        - condition_concept_id
        - condition_era_start_date
        - condition_era_end_date
      properties:
        id:
          type: integer
          format: int64
          description: ''
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        condition_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the Condition. References CONCEPT table.
        condition_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The start date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the start date of the very first chronologically recorded instance of the condition with at least 31 days since any prior record of the same Condition.
        condition_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The end date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the end date of the final continuously recorded instance of the Condition.
        condition_occurrence_count:
          type: integer
          format: int64
          description: The number of individual Condition Occurrences used to construct the condition era.
      description: ConditionEra record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        condition_concept_id: 8507
        condition_era_start_date: '2023-01-15'
        condition_era_end_date: '2023-01-15'
        condition_occurrence_count: 100
    Derived.ConditionEraCreate:
      type: object
      required:
        - person_id
        - condition_concept_id
        - condition_era_start_date
        - condition_era_end_date
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        condition_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the Condition. References CONCEPT table.
        condition_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The start date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the start date of the very first chronologically recorded instance of the condition with at least 31 days since any prior record of the same Condition.
        condition_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The end date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the end date of the final continuously recorded instance of the Condition.
        condition_occurrence_count:
          type: integer
          format: int64
          description: The number of individual Condition Occurrences used to construct the condition era.
      description: Request body for creating a new ConditionEra record
    Derived.ConditionEraList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Derived.ConditionEra'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ConditionEra records
      example:
        data:
          - id: 12345
            person_id: 100
            condition_concept_id: 8507
            condition_era_start_date: '2023-01-15'
            condition_era_end_date: '2023-01-15'
            condition_occurrence_count: 100
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Derived.ConditionEraUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        condition_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the Condition. References CONCEPT table.
        condition_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The start date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the start date of the very first chronologically recorded instance of the condition with at least 31 days since any prior record of the same Condition.
        condition_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The end date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the end date of the final continuously recorded instance of the Condition.
        condition_occurrence_count:
          type: integer
          format: int64
          description: The number of individual Condition Occurrences used to construct the condition era.
      description: Request body for updating an existing ConditionEra record
    Derived.DoseEra:
      type: object
      required:
        - id
        - person_id
        - drug_concept_id
        - unit_concept_id
        - dose_value
        - dose_era_start_date
        - dose_era_end_date
      properties:
        id:
          type: integer
          format: int64
          description: ''
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the specific drug ingredient. References CONCEPT table.
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the unit of the specific drug ingredient. References CONCEPT table.
        dose_value:
          type: number
          format: double
          description: The numeric value of the dosage of the drug_ingredient.
        dose_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the Person started on the specific dosage, with at least 31 days since any prior exposure.
        dose_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the Person was no longer exposed to the dosage of the specific drug ingredient. An era is ended if there are 31 days or more between dosage records.
      description: DoseEra record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        drug_concept_id: 8507
        unit_concept_id: 8507
        dose_value: 98.6
        dose_era_start_date: '2023-01-15'
        dose_era_end_date: '2023-01-15'
    Derived.DoseEraCreate:
      type: object
      required:
        - person_id
        - drug_concept_id
        - unit_concept_id
        - dose_value
        - dose_era_start_date
        - dose_era_end_date
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the specific drug ingredient. References CONCEPT table.
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the unit of the specific drug ingredient. References CONCEPT table.
        dose_value:
          type: number
          format: double
          description: The numeric value of the dosage of the drug_ingredient.
        dose_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the Person started on the specific dosage, with at least 31 days since any prior exposure.
        dose_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the Person was no longer exposed to the dosage of the specific drug ingredient. An era is ended if there are 31 days or more between dosage records.
      description: Request body for creating a new DoseEra record
    Derived.DoseEraList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Derived.DoseEra'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of DoseEra records
      example:
        data:
          - id: 12345
            person_id: 100
            drug_concept_id: 8507
            unit_concept_id: 8507
            dose_value: 98.6
            dose_era_start_date: '2023-01-15'
            dose_era_end_date: '2023-01-15'
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Derived.DoseEraUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the specific drug ingredient. References CONCEPT table.
        unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the unit of the specific drug ingredient. References CONCEPT table.
        dose_value:
          type: number
          format: double
          description: The numeric value of the dosage of the drug_ingredient.
        dose_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the Person started on the specific dosage, with at least 31 days since any prior exposure.
        dose_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the Person was no longer exposed to the dosage of the specific drug ingredient. An era is ended if there are 31 days or more between dosage records.
      description: Request body for updating an existing DoseEra record
    Derived.DrugEra:
      type: object
      required:
        - id
        - person_id
        - drug_concept_id
        - drug_era_start_date
        - drug_era_end_date
      properties:
        id:
          type: integer
          format: int64
          description: ''
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The drug_concept_id should conform to the concept class ‘ingredient’ as the drug_era is an era of time where a person is exposed to a particular drug ingredient. References CONCEPT table.
        drug_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The Drug Era Start Date is the start date of the first Drug Exposure for a given ingredient, with at least 31 days since the previous exposure.
        drug_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The Drug Era End Date is the end date of the last Drug Exposure. The End Date of each Drug Exposure is either taken from the field drug_exposure_end_date or, as it is typically not available, inferred using the following rules: For pharmacy prescription data, the date when the drug was dispensed plus the number of days of supply are used to extrapolate the End Date for the Drug Exposure. Depending on the country-specific healthcare system, this supply information is either explicitly provided in the day_supply field or inferred from package size or similar information. For Procedure Drugs, usually the drug is administered on a single date (i.e., the administration date). A standard Persistence Window of 30 days (gap, slack) is permitted between two subsequent such extrapolated DRUG_EXPOSURE records to be considered to be merged into a single Drug Era.'
        drug_exposure_count:
          type: integer
          format: int64
          description: The count of grouped DRUG_EXPOSURE records that were included in the DRUG_ERA row
        gap_days:
          type: integer
          format: int64
          description: The Gap Days determine how many total drug-free days are observed between all Drug Exposure events that contribute to a DRUG_ERA record. It is assumed that the drugs are “not stockpiled” by the patient, i.e. that if a new drug prescription or refill is observed (a new DRUG_EXPOSURE record is written), the remaining supply from the previous events is abandoned. The difference between Persistence Window and Gap Days is that the former is the maximum drug-free time allowed between two subsequent DRUG_EXPOSURE records, while the latter is the sum of actual drug-free days for the given Drug Era under the above assumption of non-stockpiling.
      description: DrugEra record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        drug_concept_id: 8507
        drug_era_start_date: '2023-01-15'
        drug_era_end_date: '2023-01-15'
        drug_exposure_count: 100
        gap_days: 100
    Derived.DrugEraCreate:
      type: object
      required:
        - person_id
        - drug_concept_id
        - drug_era_start_date
        - drug_era_end_date
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The drug_concept_id should conform to the concept class ‘ingredient’ as the drug_era is an era of time where a person is exposed to a particular drug ingredient. References CONCEPT table.
        drug_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The Drug Era Start Date is the start date of the first Drug Exposure for a given ingredient, with at least 31 days since the previous exposure.
        drug_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The Drug Era End Date is the end date of the last Drug Exposure. The End Date of each Drug Exposure is either taken from the field drug_exposure_end_date or, as it is typically not available, inferred using the following rules: For pharmacy prescription data, the date when the drug was dispensed plus the number of days of supply are used to extrapolate the End Date for the Drug Exposure. Depending on the country-specific healthcare system, this supply information is either explicitly provided in the day_supply field or inferred from package size or similar information. For Procedure Drugs, usually the drug is administered on a single date (i.e., the administration date). A standard Persistence Window of 30 days (gap, slack) is permitted between two subsequent such extrapolated DRUG_EXPOSURE records to be considered to be merged into a single Drug Era.'
        drug_exposure_count:
          type: integer
          format: int64
          description: The count of grouped DRUG_EXPOSURE records that were included in the DRUG_ERA row
        gap_days:
          type: integer
          format: int64
          description: The Gap Days determine how many total drug-free days are observed between all Drug Exposure events that contribute to a DRUG_ERA record. It is assumed that the drugs are “not stockpiled” by the patient, i.e. that if a new drug prescription or refill is observed (a new DRUG_EXPOSURE record is written), the remaining supply from the previous events is abandoned. The difference between Persistence Window and Gap Days is that the former is the maximum drug-free time allowed between two subsequent DRUG_EXPOSURE records, while the latter is the sum of actual drug-free days for the given Drug Era under the above assumption of non-stockpiling.
      description: Request body for creating a new DrugEra record
    Derived.DrugEraList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Derived.DrugEra'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of DrugEra records
      example:
        data:
          - id: 12345
            person_id: 100
            drug_concept_id: 8507
            drug_era_start_date: '2023-01-15'
            drug_era_end_date: '2023-01-15'
            drug_exposure_count: 100
            gap_days: 100
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Derived.DrugEraUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: References PERSON table.
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The drug_concept_id should conform to the concept class ‘ingredient’ as the drug_era is an era of time where a person is exposed to a particular drug ingredient. References CONCEPT table.
        drug_era_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The Drug Era Start Date is the start date of the first Drug Exposure for a given ingredient, with at least 31 days since the previous exposure.
        drug_era_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The Drug Era End Date is the end date of the last Drug Exposure. The End Date of each Drug Exposure is either taken from the field drug_exposure_end_date or, as it is typically not available, inferred using the following rules: For pharmacy prescription data, the date when the drug was dispensed plus the number of days of supply are used to extrapolate the End Date for the Drug Exposure. Depending on the country-specific healthcare system, this supply information is either explicitly provided in the day_supply field or inferred from package size or similar information. For Procedure Drugs, usually the drug is administered on a single date (i.e., the administration date). A standard Persistence Window of 30 days (gap, slack) is permitted between two subsequent such extrapolated DRUG_EXPOSURE records to be considered to be merged into a single Drug Era.'
        drug_exposure_count:
          type: integer
          format: int64
          description: The count of grouped DRUG_EXPOSURE records that were included in the DRUG_ERA row
        gap_days:
          type: integer
          format: int64
          description: The Gap Days determine how many total drug-free days are observed between all Drug Exposure events that contribute to a DRUG_ERA record. It is assumed that the drugs are “not stockpiled” by the patient, i.e. that if a new drug prescription or refill is observed (a new DRUG_EXPOSURE record is written), the remaining supply from the previous events is abandoned. The difference between Persistence Window and Gap Days is that the former is the maximum drug-free time allowed between two subsequent DRUG_EXPOSURE records, while the latter is the sum of actual drug-free days for the given Drug Era under the above assumption of non-stockpiling.
      description: Request body for updating an existing DrugEra record
    Derived.Episode:
      type: object
      required:
        - id
        - person_id
        - episode_concept_id
        - episode_start_date
        - episode_object_concept_id
        - episode_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: A unique identifier for each Episode.
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the episode is recorded. References PERSON table.
        episode_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The EPISODE_CONCEPT_ID represents the kind abstraction related to the disease phase, outcome or treatment. ETL Convention: Choose a concept in the Episode domain that best represents the ongoing disease phase, outcome, or treatment. Please see [article] for cancers and [article] for non-cancers describing how these are defined. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Episode&page=1&pageSize=15&query=) References CONCEPT table.'
        episode_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date when the Episode beings. ETL Convention: Please see [article] for how to define an Episode start date.'
        episode_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date and time when the Episode begins.
        episode_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date when the instance of the Episode is considered to have ended. ETL Convention: Please see [article] for how to define an Episode end date.'
        episode_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date when the instance of the Episode is considered to have ended.
        episode_parent_id:
          type: integer
          format: int64
          description: 'Use this field to find the Episode that subsumes the given Episode record. This is used in the case that an Episode are nested into each other. ETL Convention: If there are multiple nested levels to how Episodes are represented, the EPISODE_PARENT_ID can be used to record this relationship.'
        episode_number:
          type: integer
          format: int64
          description: 'For sequences of episodes, this is used to indicate the order the episodes occurred. For example, lines of treatment could be indicated here. ETL Convention: Please see [article] for the details of how to count episodes.'
        episode_object_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A Standard Concept representing the disease phase, outcome, or other abstraction of which the episode consists. For example, if the EPISODE_CONCEPT_ID is [treatment regimen](https://athena.ohdsi.org/search-terms/terms/32531) then the EPISODE_OBJECT_CONCEPT_ID should contain the chemotherapy regimen concept, like [Afatinib monotherapy](https://athena.ohdsi.org/search-terms/terms/35804392). ETL Convention: Episode entries from the ‘Disease Episode’ concept class should have an episode_object_concept_id that comes from the Condition domain. Episode entries from the ‘Treatment Episode’ concept class should have an episode_object_concept_id that scome from the ‘Procedure’ domain or ‘Regimen’ concept class. References CONCEPT table.'
        episode_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Episode record, as in whether the episode was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the EPISODE_TYPE_CONCEPT_ID that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        episode_source_value:
          type: string
          maxLength: 50
          description: The source code for the Episode as it appears in the source data. This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.
        episode_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A foreign key to a Episode Concept that refers to the code used in the source. ETL Convention: Given that the Episodes are user-defined it is unlikely that there will be a Source Concept available. If that is the case then set this field to zero. References CONCEPT table.'
      description: Episode record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        episode_concept_id: 8507
        episode_start_date: '2023-01-15'
        episode_start_datetime: '2023-01-15'
        episode_end_date: '2023-01-15'
        episode_end_datetime: '2023-01-15'
        episode_parent_id: 100
        episode_number: 100
        episode_object_concept_id: 8507
        episode_type_concept_id: 8507
        episode_source_value: Example value
        episode_source_concept_id: 8507
    Derived.EpisodeCreate:
      type: object
      required:
        - person_id
        - episode_concept_id
        - episode_start_date
        - episode_object_concept_id
        - episode_type_concept_id
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the episode is recorded. References PERSON table.
        episode_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The EPISODE_CONCEPT_ID represents the kind abstraction related to the disease phase, outcome or treatment. ETL Convention: Choose a concept in the Episode domain that best represents the ongoing disease phase, outcome, or treatment. Please see [article] for cancers and [article] for non-cancers describing how these are defined. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Episode&page=1&pageSize=15&query=) References CONCEPT table.'
        episode_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date when the Episode beings. ETL Convention: Please see [article] for how to define an Episode start date.'
        episode_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date and time when the Episode begins.
        episode_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date when the instance of the Episode is considered to have ended. ETL Convention: Please see [article] for how to define an Episode end date.'
        episode_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date when the instance of the Episode is considered to have ended.
        episode_parent_id:
          type: integer
          format: int64
          description: 'Use this field to find the Episode that subsumes the given Episode record. This is used in the case that an Episode are nested into each other. ETL Convention: If there are multiple nested levels to how Episodes are represented, the EPISODE_PARENT_ID can be used to record this relationship.'
        episode_number:
          type: integer
          format: int64
          description: 'For sequences of episodes, this is used to indicate the order the episodes occurred. For example, lines of treatment could be indicated here. ETL Convention: Please see [article] for the details of how to count episodes.'
        episode_object_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A Standard Concept representing the disease phase, outcome, or other abstraction of which the episode consists. For example, if the EPISODE_CONCEPT_ID is [treatment regimen](https://athena.ohdsi.org/search-terms/terms/32531) then the EPISODE_OBJECT_CONCEPT_ID should contain the chemotherapy regimen concept, like [Afatinib monotherapy](https://athena.ohdsi.org/search-terms/terms/35804392). ETL Convention: Episode entries from the ‘Disease Episode’ concept class should have an episode_object_concept_id that comes from the Condition domain. Episode entries from the ‘Treatment Episode’ concept class should have an episode_object_concept_id that scome from the ‘Procedure’ domain or ‘Regimen’ concept class. References CONCEPT table.'
        episode_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Episode record, as in whether the episode was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the EPISODE_TYPE_CONCEPT_ID that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        episode_source_value:
          type: string
          maxLength: 50
          description: The source code for the Episode as it appears in the source data. This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.
        episode_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A foreign key to a Episode Concept that refers to the code used in the source. ETL Convention: Given that the Episodes are user-defined it is unlikely that there will be a Source Concept available. If that is the case then set this field to zero. References CONCEPT table.'
      description: Request body for creating a new Episode record
    Derived.EpisodeEvent:
      type: object
      required:
        - episode_id
        - event_id
        - episode_event_field_concept_id
      properties:
        episode_id:
          type: integer
          format: int64
          description: 'Use this field to link the EPISODE_EVENT record to its EPISODE. ETL Convention: Put the EPISODE_ID that subsumes the EPISODE_EVENT record here. References EPISODE table.'
        event_id:
          type: integer
          format: int64
          description: 'This field is the primary key of the linked record in the database. For example, if the Episode Event is a Condition Occurrence, then the CONDITION_OCCURRENCE_ID of the linked record goes in this field. ETL Convention: Put the primary key of the linked record here.'
        episode_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the EVENT_ID came from. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?vocabulary=CDM&conceptClass=Field&page=1&pageSize=15&query=) References CONCEPT table.'
      description: EpisodeEvent record in the OMOP CDM
      example:
        episode_id: 100
        event_id: 100
        episode_event_field_concept_id: 8507
    Derived.EpisodeEventCreate:
      type: object
      required:
        - episode_id
        - event_id
        - episode_event_field_concept_id
      properties:
        episode_id:
          type: integer
          format: int64
          description: 'Use this field to link the EPISODE_EVENT record to its EPISODE. ETL Convention: Put the EPISODE_ID that subsumes the EPISODE_EVENT record here. References EPISODE table.'
        event_id:
          type: integer
          format: int64
          description: 'This field is the primary key of the linked record in the database. For example, if the Episode Event is a Condition Occurrence, then the CONDITION_OCCURRENCE_ID of the linked record goes in this field. ETL Convention: Put the primary key of the linked record here.'
        episode_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the EVENT_ID came from. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?vocabulary=CDM&conceptClass=Field&page=1&pageSize=15&query=) References CONCEPT table.'
      description: Request body for creating a new EpisodeEvent record
    Derived.EpisodeEventList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Derived.EpisodeEvent'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of EpisodeEvent records
      example:
        data:
          - episode_id: 100
            event_id: 100
            episode_event_field_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Derived.EpisodeEventUpdate:
      type: object
      properties:
        episode_id:
          type: integer
          format: int64
          description: 'Use this field to link the EPISODE_EVENT record to its EPISODE. ETL Convention: Put the EPISODE_ID that subsumes the EPISODE_EVENT record here. References EPISODE table.'
        event_id:
          type: integer
          format: int64
          description: 'This field is the primary key of the linked record in the database. For example, if the Episode Event is a Condition Occurrence, then the CONDITION_OCCURRENCE_ID of the linked record goes in this field. ETL Convention: Put the primary key of the linked record here.'
        episode_event_field_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field is the CONCEPT_ID that identifies which table the primary key of the linked record came from. ETL Convention: Put the CONCEPT_ID that identifies which table and field the EVENT_ID came from. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?vocabulary=CDM&conceptClass=Field&page=1&pageSize=15&query=) References CONCEPT table.'
      description: Request body for updating an existing EpisodeEvent record
    Derived.EpisodeList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Derived.Episode'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Episode records
      example:
        data:
          - id: 12345
            person_id: 100
            episode_concept_id: 8507
            episode_start_date: '2023-01-15'
            episode_start_datetime: '2023-01-15'
            episode_end_date: '2023-01-15'
            episode_end_datetime: '2023-01-15'
            episode_parent_id: 100
            episode_number: 100
            episode_object_concept_id: 8507
            episode_type_concept_id: 8507
            episode_source_value: Example value
            episode_source_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Derived.EpisodeUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: The PERSON_ID of the PERSON for whom the episode is recorded. References PERSON table.
        episode_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The EPISODE_CONCEPT_ID represents the kind abstraction related to the disease phase, outcome or treatment. ETL Convention: Choose a concept in the Episode domain that best represents the ongoing disease phase, outcome, or treatment. Please see [article] for cancers and [article] for non-cancers describing how these are defined. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Episode&page=1&pageSize=15&query=) References CONCEPT table.'
        episode_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date when the Episode beings. ETL Convention: Please see [article] for how to define an Episode start date.'
        episode_start_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date and time when the Episode begins.
        episode_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: 'The date when the instance of the Episode is considered to have ended. ETL Convention: Please see [article] for how to define an Episode end date.'
        episode_end_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: The date when the instance of the Episode is considered to have ended.
        episode_parent_id:
          type: integer
          format: int64
          description: 'Use this field to find the Episode that subsumes the given Episode record. This is used in the case that an Episode are nested into each other. ETL Convention: If there are multiple nested levels to how Episodes are represented, the EPISODE_PARENT_ID can be used to record this relationship.'
        episode_number:
          type: integer
          format: int64
          description: 'For sequences of episodes, this is used to indicate the order the episodes occurred. For example, lines of treatment could be indicated here. ETL Convention: Please see [article] for the details of how to count episodes.'
        episode_object_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A Standard Concept representing the disease phase, outcome, or other abstraction of which the episode consists. For example, if the EPISODE_CONCEPT_ID is [treatment regimen](https://athena.ohdsi.org/search-terms/terms/32531) then the EPISODE_OBJECT_CONCEPT_ID should contain the chemotherapy regimen concept, like [Afatinib monotherapy](https://athena.ohdsi.org/search-terms/terms/35804392). ETL Convention: Episode entries from the ‘Disease Episode’ concept class should have an episode_object_concept_id that comes from the Condition domain. Episode entries from the ‘Treatment Episode’ concept class should have an episode_object_concept_id that scome from the ‘Procedure’ domain or ‘Regimen’ concept class. References CONCEPT table.'
        episode_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field can be used to determine the provenance of the Episode record, as in whether the episode was from an EHR system, insurance claim, registry, or other sources. ETL Convention: Choose the EPISODE_TYPE_CONCEPT_ID that best represents the provenance of the record. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Type+Concept&standardConcept=Standard&page=1&pageSize=15&query=). A more detailed explanation of each Type Concept can be found on the [vocabulary wiki](https://github.com/OHDSI/Vocabulary-v5.0/wiki/Vocab.-TYPE_CONCEPT). References CONCEPT table.'
        episode_source_value:
          type: string
          description: The source code for the Episode as it appears in the source data. This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.
        episode_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A foreign key to a Episode Concept that refers to the code used in the source. ETL Convention: Given that the Episodes are user-defined it is unlikely that there will be a Source Concept available. If that is the case then set this field to zero. References CONCEPT table.'
      description: Request body for updating an existing Episode record
    Healthsystem.CareSite:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: Assign an ID to each combination of a location and nature of the site - the latter could be the Place of Service, name or another characteristic in your source data.
        care_site_name:
          type: string
          maxLength: 255
          description: The name of the care_site as it appears in the source data
        place_of_service_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is a high-level way of characterizing a Care Site. Typically, however, Care Sites can provide care in multiple settings (inpatient, outpatient, etc.) and this granularity should be reflected in the visit. ETL Convention: Choose the concept in the visit domain that best represents the setting in which healthcare is provided in the Care Site. If most visits in a Care Site are Inpatient, then the place_of_service_concept_id should represent Inpatient. If information is present about a unique Care Site (e.g. Pharmacy) then a Care Site record should be created. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=2&pageSize=15&query=). For information about how to populate this field please see the [THEMIS Conventions](https://ohdsi.github.io/Themis/tag_place_of_service.html). References CONCEPT table.'
        location_id:
          type: integer
          format: int64
          description: The location_id from the LOCATION table representing the physical location of the care_site. References LOCATION table.
        care_site_source_value:
          type: string
          maxLength: 50
          description: The identifier of the care_site as it appears in the source data. This could be an identifier separate from the name of the care_site.
        place_of_service_source_value:
          type: string
          maxLength: 50
          description: Put the place of service of the care_site as it appears in the source data.
      description: CareSite record in the OMOP CDM
      example:
        id: 12345
        care_site_name: Example value
        place_of_service_concept_id: 8507
        location_id: 100
        care_site_source_value: Example value
        place_of_service_source_value: Example value
    Healthsystem.CareSiteCreate:
      type: object
      properties:
        care_site_name:
          type: string
          maxLength: 255
          description: The name of the care_site as it appears in the source data
        place_of_service_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is a high-level way of characterizing a Care Site. Typically, however, Care Sites can provide care in multiple settings (inpatient, outpatient, etc.) and this granularity should be reflected in the visit. ETL Convention: Choose the concept in the visit domain that best represents the setting in which healthcare is provided in the Care Site. If most visits in a Care Site are Inpatient, then the place_of_service_concept_id should represent Inpatient. If information is present about a unique Care Site (e.g. Pharmacy) then a Care Site record should be created. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=2&pageSize=15&query=). For information about how to populate this field please see the [THEMIS Conventions](https://ohdsi.github.io/Themis/tag_place_of_service.html). References CONCEPT table.'
        location_id:
          type: integer
          format: int64
          description: The location_id from the LOCATION table representing the physical location of the care_site. References LOCATION table.
        care_site_source_value:
          type: string
          maxLength: 50
          description: The identifier of the care_site as it appears in the source data. This could be an identifier separate from the name of the care_site.
        place_of_service_source_value:
          type: string
          maxLength: 50
          description: Put the place of service of the care_site as it appears in the source data.
      description: Request body for creating a new CareSite record
    Healthsystem.CareSiteList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Healthsystem.CareSite'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of CareSite records
      example:
        data:
          - id: 12345
            care_site_name: Example value
            place_of_service_concept_id: 8507
            location_id: 100
            care_site_source_value: Example value
            place_of_service_source_value: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Healthsystem.CareSiteUpdate:
      type: object
      properties:
        care_site_name:
          type: string
          description: The name of the care_site as it appears in the source data
        place_of_service_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is a high-level way of characterizing a Care Site. Typically, however, Care Sites can provide care in multiple settings (inpatient, outpatient, etc.) and this granularity should be reflected in the visit. ETL Convention: Choose the concept in the visit domain that best represents the setting in which healthcare is provided in the Care Site. If most visits in a Care Site are Inpatient, then the place_of_service_concept_id should represent Inpatient. If information is present about a unique Care Site (e.g. Pharmacy) then a Care Site record should be created. [Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Visit&standardConcept=Standard&page=2&pageSize=15&query=). For information about how to populate this field please see the [THEMIS Conventions](https://ohdsi.github.io/Themis/tag_place_of_service.html). References CONCEPT table.'
        location_id:
          type: integer
          format: int64
          description: The location_id from the LOCATION table representing the physical location of the care_site. References LOCATION table.
        care_site_source_value:
          type: string
          description: The identifier of the care_site as it appears in the source data. This could be an identifier separate from the name of the care_site.
        place_of_service_source_value:
          type: string
          description: Put the place of service of the care_site as it appears in the source data.
      description: Request body for updating an existing CareSite record
    Healthsystem.Cost:
      type: object
      required:
        - id
        - cost_event_id
        - cost_domain_id
        - cost_type_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: ''
        cost_event_id:
          type: integer
          format: int64
          description: ''
        cost_domain_id:
          type: string
          maxLength: 20
          description: References DOMAIN table.
        cost_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        currency_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        total_charge:
          type: number
          format: double
          description: ''
        total_cost:
          type: number
          format: double
          description: ''
        total_paid:
          type: number
          format: double
          description: ''
        paid_by_payer:
          type: number
          format: double
          description: ''
        paid_by_patient:
          type: number
          format: double
          description: ''
        paid_patient_copay:
          type: number
          format: double
          description: ''
        paid_patient_coinsurance:
          type: number
          format: double
          description: ''
        paid_patient_deductible:
          type: number
          format: double
          description: ''
        paid_by_primary:
          type: number
          format: double
          description: ''
        paid_ingredient_cost:
          type: number
          format: double
          description: ''
        paid_dispensing_fee:
          type: number
          format: double
          description: ''
        payer_plan_period_id:
          type: integer
          format: int64
          description: ''
        amount_allowed:
          type: number
          format: double
          description: ''
        revenue_code_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        revenue_code_source_value:
          type: string
          maxLength: 50
          description: Revenue codes are a method to charge for a class of procedures and conditions in the U.S. hospital system.
        drg_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        drg_source_value:
          type: string
          maxLength: 3
          description: Diagnosis Related Groups are US codes used to classify hospital cases into one of approximately 500 groups.
      description: Cost record in the OMOP CDM
      example:
        id: 12345
        cost_event_id: 100
        cost_domain_id: Example value
        cost_type_concept_id: 8507
        currency_concept_id: 8507
        total_charge: 98.6
        total_cost: 98.6
        total_paid: 98.6
        paid_by_payer: 98.6
        paid_by_patient: 98.6
        paid_patient_copay: 98.6
        paid_patient_coinsurance: 98.6
        paid_patient_deductible: 98.6
        paid_by_primary: 98.6
        paid_ingredient_cost: 98.6
        paid_dispensing_fee: 98.6
        payer_plan_period_id: 100
        amount_allowed: 98.6
        revenue_code_concept_id: 8507
        revenue_code_source_value: Example value
        drg_concept_id: 8507
        drg_source_value: Example value
    Healthsystem.CostCreate:
      type: object
      required:
        - cost_event_id
        - cost_domain_id
        - cost_type_concept_id
      properties:
        cost_event_id:
          type: integer
          format: int64
          description: ''
        cost_domain_id:
          type: string
          maxLength: 20
          description: References DOMAIN table.
        cost_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        currency_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        total_charge:
          type: number
          format: double
          description: ''
        total_cost:
          type: number
          format: double
          description: ''
        total_paid:
          type: number
          format: double
          description: ''
        paid_by_payer:
          type: number
          format: double
          description: ''
        paid_by_patient:
          type: number
          format: double
          description: ''
        paid_patient_copay:
          type: number
          format: double
          description: ''
        paid_patient_coinsurance:
          type: number
          format: double
          description: ''
        paid_patient_deductible:
          type: number
          format: double
          description: ''
        paid_by_primary:
          type: number
          format: double
          description: ''
        paid_ingredient_cost:
          type: number
          format: double
          description: ''
        paid_dispensing_fee:
          type: number
          format: double
          description: ''
        payer_plan_period_id:
          type: integer
          format: int64
          description: ''
        amount_allowed:
          type: number
          format: double
          description: ''
        revenue_code_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        revenue_code_source_value:
          type: string
          maxLength: 50
          description: Revenue codes are a method to charge for a class of procedures and conditions in the U.S. hospital system.
        drg_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        drg_source_value:
          type: string
          maxLength: 3
          description: Diagnosis Related Groups are US codes used to classify hospital cases into one of approximately 500 groups.
      description: Request body for creating a new Cost record
    Healthsystem.CostList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Healthsystem.Cost'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Cost records
      example:
        data:
          - id: 12345
            cost_event_id: 100
            cost_domain_id: Example value
            cost_type_concept_id: 8507
            currency_concept_id: 8507
            total_charge: 98.6
            total_cost: 98.6
            total_paid: 98.6
            paid_by_payer: 98.6
            paid_by_patient: 98.6
            paid_patient_copay: 98.6
            paid_patient_coinsurance: 98.6
            paid_patient_deductible: 98.6
            paid_by_primary: 98.6
            paid_ingredient_cost: 98.6
            paid_dispensing_fee: 98.6
            payer_plan_period_id: 100
            amount_allowed: 98.6
            revenue_code_concept_id: 8507
            revenue_code_source_value: Example value
            drg_concept_id: 8507
            drg_source_value: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Healthsystem.CostUpdate:
      type: object
      properties:
        cost_event_id:
          type: integer
          format: int64
          description: ''
        cost_domain_id:
          type: string
          description: References DOMAIN table.
        cost_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        currency_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        total_charge:
          type: number
          format: double
          description: ''
        total_cost:
          type: number
          format: double
          description: ''
        total_paid:
          type: number
          format: double
          description: ''
        paid_by_payer:
          type: number
          format: double
          description: ''
        paid_by_patient:
          type: number
          format: double
          description: ''
        paid_patient_copay:
          type: number
          format: double
          description: ''
        paid_patient_coinsurance:
          type: number
          format: double
          description: ''
        paid_patient_deductible:
          type: number
          format: double
          description: ''
        paid_by_primary:
          type: number
          format: double
          description: ''
        paid_ingredient_cost:
          type: number
          format: double
          description: ''
        paid_dispensing_fee:
          type: number
          format: double
          description: ''
        payer_plan_period_id:
          type: integer
          format: int64
          description: ''
        amount_allowed:
          type: number
          format: double
          description: ''
        revenue_code_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        revenue_code_source_value:
          type: string
          description: Revenue codes are a method to charge for a class of procedures and conditions in the U.S. hospital system.
        drg_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        drg_source_value:
          type: string
          description: Diagnosis Related Groups are US codes used to classify hospital cases into one of approximately 500 groups.
      description: Request body for updating an existing Cost record
    Healthsystem.Location:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to a unique Location. ETL Convention: Each instance of a Location in the source data should be assigned this unique key.'
        city:
          type: string
          maxLength: 50
          description: ''
        state:
          type: string
          maxLength: 2
          description: ''
        zip:
          type: string
          maxLength: 9
          description: Zip codes are handled as strings of up to 9 characters length. For US addresses, these represent either a 3-digit abbreviated Zip code as provided by many sources for patient protection reasons, the full 5-digit Zip or the 9-digit (ZIP + 4) codes. Unless for specific reasons analytical methods should expect and utilize only the first 3 digits. For international addresses, different rules apply.
        county:
          type: string
          maxLength: 20
          description: ''
        location_source_value:
          type: string
          maxLength: 50
          description: Put the verbatim value for the location here, as it shows up in the source.
        country_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the country. Values should conform to the [Geography](https://athena.ohdsi.org/search-terms/terms?domain=Geography&standardConcept=Standard&page=1&pageSize=15&query=&boosts) domain. References CONCEPT table.
        country_source_value:
          type: string
          maxLength: 80
          description: The name of the country.
        latitude:
          type: number
          format: double
          description: Must be between -90 and 90.
        longitude:
          type: number
          format: double
          description: Must be between -180 and 180.
      description: Location record in the OMOP CDM
      example:
        id: 12345
        city: Example value
        state: Example value
        zip: Example value
        county: Example value
        location_source_value: Example value
        country_concept_id: 8507
        country_source_value: Example value
        latitude: 98.6
        longitude: 98.6
    Healthsystem.LocationCreate:
      type: object
      properties:
        city:
          type: string
          maxLength: 50
          description: ''
        state:
          type: string
          maxLength: 2
          description: ''
        zip:
          type: string
          maxLength: 9
          description: Zip codes are handled as strings of up to 9 characters length. For US addresses, these represent either a 3-digit abbreviated Zip code as provided by many sources for patient protection reasons, the full 5-digit Zip or the 9-digit (ZIP + 4) codes. Unless for specific reasons analytical methods should expect and utilize only the first 3 digits. For international addresses, different rules apply.
        county:
          type: string
          maxLength: 20
          description: ''
        location_source_value:
          type: string
          maxLength: 50
          description: Put the verbatim value for the location here, as it shows up in the source.
        country_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the country. Values should conform to the [Geography](https://athena.ohdsi.org/search-terms/terms?domain=Geography&standardConcept=Standard&page=1&pageSize=15&query=&boosts) domain. References CONCEPT table.
        country_source_value:
          type: string
          maxLength: 80
          description: The name of the country.
        latitude:
          type: number
          format: double
          description: Must be between -90 and 90.
        longitude:
          type: number
          format: double
          description: Must be between -180 and 180.
      description: Request body for creating a new Location record
    Healthsystem.LocationList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Healthsystem.Location'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Location records
      example:
        data:
          - id: 12345
            city: Example value
            state: Example value
            zip: Example value
            county: Example value
            location_source_value: Example value
            country_concept_id: 8507
            country_source_value: Example value
            latitude: 98.6
            longitude: 98.6
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Healthsystem.LocationUpdate:
      type: object
      properties:
        city:
          type: string
          description: ''
        state:
          type: string
          description: ''
        zip:
          type: string
          description: Zip codes are handled as strings of up to 9 characters length. For US addresses, these represent either a 3-digit abbreviated Zip code as provided by many sources for patient protection reasons, the full 5-digit Zip or the 9-digit (ZIP + 4) codes. Unless for specific reasons analytical methods should expect and utilize only the first 3 digits. For international addresses, different rules apply.
        county:
          type: string
          description: ''
        location_source_value:
          type: string
          description: Put the verbatim value for the location here, as it shows up in the source.
        country_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id representing the country. Values should conform to the [Geography](https://athena.ohdsi.org/search-terms/terms?domain=Geography&standardConcept=Standard&page=1&pageSize=15&query=&boosts) domain. References CONCEPT table.
        country_source_value:
          type: string
          description: The name of the country.
        latitude:
          type: number
          format: double
          description: Must be between -90 and 90.
        longitude:
          type: number
          format: double
          description: Must be between -180 and 180.
      description: Request body for updating an existing Location record
    Healthsystem.PayerPlanPeriod:
      type: object
      required:
        - id
        - person_id
        - payer_plan_period_start_date
        - payer_plan_period_end_date
      properties:
        id:
          type: integer
          format: int64
          description: A unique identifier for each unique combination of a Person, Payer, Plan, and Period of time.
        person_id:
          type: integer
          format: int64
          description: 'The Person covered by the Plan. ETL Convention: A single Person can have multiple, overlapping, PAYER_PLAN_PERIOD records References PERSON table.'
        payer_plan_period_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: Start date of Plan coverage.
        payer_plan_period_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: End date of Plan coverage.
        payer_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the organization who reimburses the provider which administers care to the Person. ETL Convention: Map the payer directly to a standard CONCEPT_ID with the domain_id of ‘Payer’ ([Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Payer&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        payer_source_value:
          type: string
          maxLength: 50
          description: This is the Payer as it appears in the source data.
        payer_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the Payer in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        plan_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the specific health benefit Plan the Person is enrolled in. ETL Convention: Map the Plan directly to a standard CONCEPT_ID in the ‘Plan’ vocabulary ([Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Plan&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        plan_source_value:
          type: string
          maxLength: 50
          description: This is the health benefit Plan of the Person as it appears in the source data.
        plan_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the Plan in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        sponsor_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the sponsor of the Plan who finances the Plan. This includes self-insured, small group health plan and large group health plan. ETL Convention: Map the sponsor directly to a standard CONCEPT_ID with the domain_id of ‘Sponsor’ ([Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Sponsor&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        sponsor_source_value:
          type: string
          maxLength: 50
          description: The Plan sponsor as it appears in the source data.
        sponsor_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the sponsor in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        family_source_value:
          type: string
          maxLength: 50
          description: 'The common identifier for all people (often a family) that covered by the same policy. ETL Convention: Often these are the common digits of the enrollment id of the policy members.'
        stop_reason_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the reason the Person left the Plan, if known. ETL Convention: Map the stop reason directly to a standard CONCEPT_ID with a domain of ‘Plan Stop Reason’ ([Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Plan+Stop+Reason&standardConcept=Standard&page=1&pageSize=15&query=)). If one does not exist visit the [Custom Concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) pate for more information. References CONCEPT table.'
        stop_reason_source_value:
          type: string
          maxLength: 50
          description: The Plan stop reason as it appears in the source data.
        stop_reason_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the stop reason in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
      description: PayerPlanPeriod record in the OMOP CDM
      example:
        id: 12345
        person_id: 100
        payer_plan_period_start_date: '2023-01-15'
        payer_plan_period_end_date: '2023-01-15'
        payer_concept_id: 8507
        payer_source_value: Example value
        payer_source_concept_id: 8507
        plan_concept_id: 8507
        plan_source_value: Example value
        plan_source_concept_id: 8507
        sponsor_concept_id: 8507
        sponsor_source_value: Example value
        sponsor_source_concept_id: 8507
        family_source_value: Example value
        stop_reason_concept_id: 8507
        stop_reason_source_value: Example value
        stop_reason_source_concept_id: 8507
    Healthsystem.PayerPlanPeriodCreate:
      type: object
      required:
        - person_id
        - payer_plan_period_start_date
        - payer_plan_period_end_date
      properties:
        person_id:
          type: integer
          format: int64
          description: 'The Person covered by the Plan. ETL Convention: A single Person can have multiple, overlapping, PAYER_PLAN_PERIOD records References PERSON table.'
        payer_plan_period_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: Start date of Plan coverage.
        payer_plan_period_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: End date of Plan coverage.
        payer_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the organization who reimburses the provider which administers care to the Person. ETL Convention: Map the payer directly to a standard CONCEPT_ID with the domain_id of ‘Payer’ ([Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Payer&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        payer_source_value:
          type: string
          maxLength: 50
          description: This is the Payer as it appears in the source data.
        payer_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the Payer in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        plan_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the specific health benefit Plan the Person is enrolled in. ETL Convention: Map the Plan directly to a standard CONCEPT_ID in the ‘Plan’ vocabulary ([Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Plan&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        plan_source_value:
          type: string
          maxLength: 50
          description: This is the health benefit Plan of the Person as it appears in the source data.
        plan_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the Plan in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        sponsor_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the sponsor of the Plan who finances the Plan. This includes self-insured, small group health plan and large group health plan. ETL Convention: Map the sponsor directly to a standard CONCEPT_ID with the domain_id of ‘Sponsor’ ([Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Sponsor&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        sponsor_source_value:
          type: string
          maxLength: 50
          description: The Plan sponsor as it appears in the source data.
        sponsor_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the sponsor in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        family_source_value:
          type: string
          maxLength: 50
          description: 'The common identifier for all people (often a family) that covered by the same policy. ETL Convention: Often these are the common digits of the enrollment id of the policy members.'
        stop_reason_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the reason the Person left the Plan, if known. ETL Convention: Map the stop reason directly to a standard CONCEPT_ID with a domain of ‘Plan Stop Reason’ ([Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Plan+Stop+Reason&standardConcept=Standard&page=1&pageSize=15&query=)). If one does not exist visit the [Custom Concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) pate for more information. References CONCEPT table.'
        stop_reason_source_value:
          type: string
          maxLength: 50
          description: The Plan stop reason as it appears in the source data.
        stop_reason_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the stop reason in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
      description: Request body for creating a new PayerPlanPeriod record
    Healthsystem.PayerPlanPeriodList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Healthsystem.PayerPlanPeriod'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of PayerPlanPeriod records
      example:
        data:
          - id: 12345
            person_id: 100
            payer_plan_period_start_date: '2023-01-15'
            payer_plan_period_end_date: '2023-01-15'
            payer_concept_id: 8507
            payer_source_value: Example value
            payer_source_concept_id: 8507
            plan_concept_id: 8507
            plan_source_value: Example value
            plan_source_concept_id: 8507
            sponsor_concept_id: 8507
            sponsor_source_value: Example value
            sponsor_source_concept_id: 8507
            family_source_value: Example value
            stop_reason_concept_id: 8507
            stop_reason_source_value: Example value
            stop_reason_source_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Healthsystem.PayerPlanPeriodUpdate:
      type: object
      properties:
        person_id:
          type: integer
          format: int64
          description: 'The Person covered by the Plan. ETL Convention: A single Person can have multiple, overlapping, PAYER_PLAN_PERIOD records References PERSON table.'
        payer_plan_period_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: Start date of Plan coverage.
        payer_plan_period_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: End date of Plan coverage.
        payer_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the organization who reimburses the provider which administers care to the Person. ETL Convention: Map the payer directly to a standard CONCEPT_ID with the domain_id of ‘Payer’ ([Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Payer&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        payer_source_value:
          type: string
          description: This is the Payer as it appears in the source data.
        payer_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the Payer in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        plan_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the specific health benefit Plan the Person is enrolled in. ETL Convention: Map the Plan directly to a standard CONCEPT_ID in the ‘Plan’ vocabulary ([Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Plan&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        plan_source_value:
          type: string
          description: This is the health benefit Plan of the Person as it appears in the source data.
        plan_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the Plan in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        sponsor_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the sponsor of the Plan who finances the Plan. This includes self-insured, small group health plan and large group health plan. ETL Convention: Map the sponsor directly to a standard CONCEPT_ID with the domain_id of ‘Sponsor’ ([Accepted Concepts](https://athena.ohdsi.org/search-terms/terms?domain=Sponsor&standardConcept=Standard&page=1&pageSize=15&query=)). This vocabulary is not exhaustive so if there is a value missing, please see the [custom concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) page. References CONCEPT table.'
        sponsor_source_value:
          type: string
          description: The Plan sponsor as it appears in the source data.
        sponsor_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the sponsor in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
        family_source_value:
          type: string
          description: 'The common identifier for all people (often a family) that covered by the same policy. ETL Convention: Often these are the common digits of the enrollment id of the policy members.'
        stop_reason_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the reason the Person left the Plan, if known. ETL Convention: Map the stop reason directly to a standard CONCEPT_ID with a domain of ‘Plan Stop Reason’ ([Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Plan+Stop+Reason&standardConcept=Standard&page=1&pageSize=15&query=)). If one does not exist visit the [Custom Concepts](https://ohdsi.github.io/CommonDataModel/customConcepts.html) pate for more information. References CONCEPT table.'
        stop_reason_source_value:
          type: string
          description: The Plan stop reason as it appears in the source data.
        stop_reason_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: If the source data codes the stop reason in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.
      description: Request body for updating an existing PayerPlanPeriod record
    Healthsystem.Provider:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
          description: 'It is assumed that every provider with a different unique identifier is in fact a different person and should be treated independently. ETL Convention: This identifier can be the original id from the source data provided it is an integer, otherwise it can be an autogenerated number.'
        provider_name:
          type: string
          maxLength: 255
          description: 'This field contains information that describes a healthcare provider. ETL Convention: This field is not required for identifying the Provider’s actual identity. Instead, its purpose is to uniquely and/or anonymously identify providers of care across the database.'
        npi:
          type: string
          maxLength: 20
          description: This is the National Provider Number issued to health care providers in the US by the Centers for Medicare and Medicaid Services (CMS).
        dea:
          type: string
          maxLength: 20
          description: This is the identifier issued by the DEA, a US federal agency, that allows a provider to write prescriptions for controlled substances.
        specialty_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field either represents the most common specialty that occurs in the data or the most specific concept that represents all specialties listed, should the provider have more than one. This includes physician specialties such as internal medicine, emergency medicine, etc. and allied health professionals such as nurses, midwives, and pharmacists. ETL Convention: If a Provider has more than one Specialty, there are two options: 1. Choose a concept_id which is a common ancestor to the multiple specialties, or, 2. Choose the specialty that occurs most often for the provider. Concepts in this field should be Standard with a domain of Provider. [Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Provider&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This is the CARE_SITE_ID for the location that the provider primarily practices in. ETL Convention: If a Provider has more than one Care Site, the main or most often exerted CARE_SITE_ID should be recorded. References CARE_SITE table.'
        year_of_birth:
          type: integer
          format: int64
          description: ''
        gender_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the recorded gender of the provider in the source data. ETL Convention: If given, put a concept from the gender domain representing the recorded gender of the provider. [Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Gender&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        provider_source_value:
          type: string
          maxLength: 50
          description: 'Use this field to link back to providers in the source data. This is typically used for error checking of ETL logic. ETL Convention: Some use cases require the ability to link back to providers in the source data. This field allows for the storing of the provider identifier as it appears in the source.'
        specialty_source_value:
          type: string
          maxLength: 50
          description: 'This refers to the specific type of healthcare provider or field of expertise listed in the source data, encompassing physician specialties like internal medicine, emergency medicine, etc., as well as allied health professionals such as nurses, midwives, and pharmacists. It covers medical specialties like surgery, internal medicine, and radiology, while other services like prosthetics, acupuncture, and physical therapy fall under the domain of “Service.” ETL Convention: The type of provider and their specialty should be entered as they appear in the source data. The decision to use either the coded value or the text description is left to the discretion of the ETL-er.'
        specialty_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is often zero as many sites use proprietary codes to store physician speciality. ETL Convention: If the source data codes provider specialty in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
        gender_source_value:
          type: string
          maxLength: 50
          description: 'This is provider’s gender as it appears in the source data. ETL Convention: Put the provider’s gender as it appears in the source data. This field is up to the discretion of the ETL-er as to whether this should be the coded value from the source or the text description of the lookup value.'
        gender_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is often zero as many sites use proprietary codes to store provider gender. ETL Convention: If the source data codes provider gender in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
      description: Provider record in the OMOP CDM
      example:
        id: 12345
        provider_name: Example value
        npi: Example value
        dea: Example value
        specialty_concept_id: 8507
        care_site_id: 100
        year_of_birth: 100
        gender_concept_id: 8507
        provider_source_value: Example value
        specialty_source_value: Example value
        specialty_source_concept_id: 8507
        gender_source_value: Example value
        gender_source_concept_id: 8507
    Healthsystem.ProviderCreate:
      type: object
      properties:
        provider_name:
          type: string
          maxLength: 255
          description: 'This field contains information that describes a healthcare provider. ETL Convention: This field is not required for identifying the Provider’s actual identity. Instead, its purpose is to uniquely and/or anonymously identify providers of care across the database.'
        npi:
          type: string
          maxLength: 20
          description: This is the National Provider Number issued to health care providers in the US by the Centers for Medicare and Medicaid Services (CMS).
        dea:
          type: string
          maxLength: 20
          description: This is the identifier issued by the DEA, a US federal agency, that allows a provider to write prescriptions for controlled substances.
        specialty_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field either represents the most common specialty that occurs in the data or the most specific concept that represents all specialties listed, should the provider have more than one. This includes physician specialties such as internal medicine, emergency medicine, etc. and allied health professionals such as nurses, midwives, and pharmacists. ETL Convention: If a Provider has more than one Specialty, there are two options: 1. Choose a concept_id which is a common ancestor to the multiple specialties, or, 2. Choose the specialty that occurs most often for the provider. Concepts in this field should be Standard with a domain of Provider. [Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Provider&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This is the CARE_SITE_ID for the location that the provider primarily practices in. ETL Convention: If a Provider has more than one Care Site, the main or most often exerted CARE_SITE_ID should be recorded. References CARE_SITE table.'
        year_of_birth:
          type: integer
          format: int64
          description: ''
        gender_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the recorded gender of the provider in the source data. ETL Convention: If given, put a concept from the gender domain representing the recorded gender of the provider. [Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Gender&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        provider_source_value:
          type: string
          maxLength: 50
          description: 'Use this field to link back to providers in the source data. This is typically used for error checking of ETL logic. ETL Convention: Some use cases require the ability to link back to providers in the source data. This field allows for the storing of the provider identifier as it appears in the source.'
        specialty_source_value:
          type: string
          maxLength: 50
          description: 'This refers to the specific type of healthcare provider or field of expertise listed in the source data, encompassing physician specialties like internal medicine, emergency medicine, etc., as well as allied health professionals such as nurses, midwives, and pharmacists. It covers medical specialties like surgery, internal medicine, and radiology, while other services like prosthetics, acupuncture, and physical therapy fall under the domain of “Service.” ETL Convention: The type of provider and their specialty should be entered as they appear in the source data. The decision to use either the coded value or the text description is left to the discretion of the ETL-er.'
        specialty_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is often zero as many sites use proprietary codes to store physician speciality. ETL Convention: If the source data codes provider specialty in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
        gender_source_value:
          type: string
          maxLength: 50
          description: 'This is provider’s gender as it appears in the source data. ETL Convention: Put the provider’s gender as it appears in the source data. This field is up to the discretion of the ETL-er as to whether this should be the coded value from the source or the text description of the lookup value.'
        gender_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is often zero as many sites use proprietary codes to store provider gender. ETL Convention: If the source data codes provider gender in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
      description: Request body for creating a new Provider record
    Healthsystem.ProviderList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Healthsystem.Provider'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Provider records
      example:
        data:
          - id: 12345
            provider_name: Example value
            npi: Example value
            dea: Example value
            specialty_concept_id: 8507
            care_site_id: 100
            year_of_birth: 100
            gender_concept_id: 8507
            provider_source_value: Example value
            specialty_source_value: Example value
            specialty_source_concept_id: 8507
            gender_source_value: Example value
            gender_source_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Healthsystem.ProviderUpdate:
      type: object
      properties:
        provider_name:
          type: string
          description: 'This field contains information that describes a healthcare provider. ETL Convention: This field is not required for identifying the Provider’s actual identity. Instead, its purpose is to uniquely and/or anonymously identify providers of care across the database.'
        npi:
          type: string
          description: This is the National Provider Number issued to health care providers in the US by the Centers for Medicare and Medicaid Services (CMS).
        dea:
          type: string
          description: This is the identifier issued by the DEA, a US federal agency, that allows a provider to write prescriptions for controlled substances.
        specialty_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field either represents the most common specialty that occurs in the data or the most specific concept that represents all specialties listed, should the provider have more than one. This includes physician specialties such as internal medicine, emergency medicine, etc. and allied health professionals such as nurses, midwives, and pharmacists. ETL Convention: If a Provider has more than one Specialty, there are two options: 1. Choose a concept_id which is a common ancestor to the multiple specialties, or, 2. Choose the specialty that occurs most often for the provider. Concepts in this field should be Standard with a domain of Provider. [Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Provider&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        care_site_id:
          type: integer
          format: int64
          description: 'This is the CARE_SITE_ID for the location that the provider primarily practices in. ETL Convention: If a Provider has more than one Care Site, the main or most often exerted CARE_SITE_ID should be recorded. References CARE_SITE table.'
        year_of_birth:
          type: integer
          format: int64
          description: ''
        gender_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This field represents the recorded gender of the provider in the source data. ETL Convention: If given, put a concept from the gender domain representing the recorded gender of the provider. [Accepted Concepts](http://athena.ohdsi.org/search-terms/terms?domain=Gender&standardConcept=Standard&page=1&pageSize=15&query=). References CONCEPT table.'
        provider_source_value:
          type: string
          description: 'Use this field to link back to providers in the source data. This is typically used for error checking of ETL logic. ETL Convention: Some use cases require the ability to link back to providers in the source data. This field allows for the storing of the provider identifier as it appears in the source.'
        specialty_source_value:
          type: string
          description: 'This refers to the specific type of healthcare provider or field of expertise listed in the source data, encompassing physician specialties like internal medicine, emergency medicine, etc., as well as allied health professionals such as nurses, midwives, and pharmacists. It covers medical specialties like surgery, internal medicine, and radiology, while other services like prosthetics, acupuncture, and physical therapy fall under the domain of “Service.” ETL Convention: The type of provider and their specialty should be entered as they appear in the source data. The decision to use either the coded value or the text description is left to the discretion of the ETL-er.'
        specialty_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is often zero as many sites use proprietary codes to store physician speciality. ETL Convention: If the source data codes provider specialty in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
        gender_source_value:
          type: string
          description: 'This is provider’s gender as it appears in the source data. ETL Convention: Put the provider’s gender as it appears in the source data. This field is up to the discretion of the ETL-er as to whether this should be the coded value from the source or the text description of the lookup value.'
        gender_source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'This is often zero as many sites use proprietary codes to store provider gender. ETL Convention: If the source data codes provider gender in an OMOP supported vocabulary store the concept_id here. References CONCEPT table.'
      description: Request body for updating an existing Provider record
    Metadata.CdmSource:
      type: object
      required:
        - cdm_source_name
        - cdm_source_abbreviation
        - cdm_holder
        - source_release_date
        - cdm_release_date
        - cdm_version_concept_id
        - vocabulary_version
      properties:
        cdm_source_name:
          type: string
          maxLength: 255
          description: The name of the CDM instance.
        cdm_source_abbreviation:
          type: string
          maxLength: 25
          description: The abbreviation of the CDM instance.
        cdm_holder:
          type: string
          maxLength: 255
          description: The holder of the CDM instance.
        source_description:
          type: string
          description: The description of the CDM instance.
        source_documentation_reference:
          type: string
          maxLength: 255
          description: 'Refers to a publication or web resource describing the source data ETL Convention: e.g. a data dictionary.'
        cdm_etl_reference:
          type: string
          maxLength: 255
          description: Version of the ETL script used. e.g. link to the Git release
        source_release_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the data was extracted from the source system. In some systems that is the same as the date the ETL was run. Typically the latest even date in the source is on the source_release_date.
        cdm_release_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the ETL script was completed. Typically this is after the source_release_date.
        cdm_version:
          type: string
          maxLength: 10
          description: Version of the OMOP CDM used as string. e.g. v5.4
        cdm_version_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: "The Concept Id representing the version of the CDM. ETL Convention: You can find all concepts that represent the CDM versions using the query: `SELECT * FROM CONCEPT WHERE VOCABULARY_ID = 'CDM' AND CONCEPT_CLASS = 'CDM'` References CONCEPT table."
        vocabulary_version:
          type: string
          maxLength: 20
          description: "Version of the OMOP standardised vocabularies loaded ETL Convention: You can find the version of your Vocabulary using the query: `SELECT vocabulary_version from vocabulary where vocabulary_id = 'None'`"
      description: CdmSource record in the OMOP CDM
      example:
        cdm_source_name: Example value
        cdm_source_abbreviation: Example value
        cdm_holder: Example value
        source_description: Example value
        source_documentation_reference: Example value
        cdm_etl_reference: Example value
        source_release_date: '2023-01-15'
        cdm_release_date: '2023-01-15'
        cdm_version: Example value
        cdm_version_concept_id: 8507
        vocabulary_version: Example value
    Metadata.CdmSourceCreate:
      type: object
      required:
        - cdm_source_name
        - cdm_source_abbreviation
        - cdm_holder
        - source_release_date
        - cdm_release_date
        - cdm_version_concept_id
        - vocabulary_version
      properties:
        cdm_source_name:
          type: string
          maxLength: 255
          description: The name of the CDM instance.
        cdm_source_abbreviation:
          type: string
          maxLength: 25
          description: The abbreviation of the CDM instance.
        cdm_holder:
          type: string
          maxLength: 255
          description: The holder of the CDM instance.
        source_description:
          type: string
          description: The description of the CDM instance.
        source_documentation_reference:
          type: string
          maxLength: 255
          description: 'Refers to a publication or web resource describing the source data ETL Convention: e.g. a data dictionary.'
        cdm_etl_reference:
          type: string
          maxLength: 255
          description: Version of the ETL script used. e.g. link to the Git release
        source_release_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the data was extracted from the source system. In some systems that is the same as the date the ETL was run. Typically the latest even date in the source is on the source_release_date.
        cdm_release_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the ETL script was completed. Typically this is after the source_release_date.
        cdm_version:
          type: string
          maxLength: 10
          description: Version of the OMOP CDM used as string. e.g. v5.4
        cdm_version_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: "The Concept Id representing the version of the CDM. ETL Convention: You can find all concepts that represent the CDM versions using the query: `SELECT * FROM CONCEPT WHERE VOCABULARY_ID = 'CDM' AND CONCEPT_CLASS = 'CDM'` References CONCEPT table."
        vocabulary_version:
          type: string
          maxLength: 20
          description: "Version of the OMOP standardised vocabularies loaded ETL Convention: You can find the version of your Vocabulary using the query: `SELECT vocabulary_version from vocabulary where vocabulary_id = 'None'`"
      description: Request body for creating a new CdmSource record
    Metadata.CdmSourceList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Metadata.CdmSource'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of CdmSource records
      example:
        data:
          - cdm_source_name: Example value
            cdm_source_abbreviation: Example value
            cdm_holder: Example value
            source_description: Example value
            source_documentation_reference: Example value
            cdm_etl_reference: Example value
            source_release_date: '2023-01-15'
            cdm_release_date: '2023-01-15'
            cdm_version: Example value
            cdm_version_concept_id: 8507
            vocabulary_version: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Metadata.CdmSourceUpdate:
      type: object
      properties:
        cdm_source_name:
          type: string
          description: The name of the CDM instance.
        cdm_source_abbreviation:
          type: string
          description: The abbreviation of the CDM instance.
        cdm_holder:
          type: string
          description: The holder of the CDM instance.
        source_description:
          type: string
          description: The description of the CDM instance.
        source_documentation_reference:
          type: string
          description: 'Refers to a publication or web resource describing the source data ETL Convention: e.g. a data dictionary.'
        cdm_etl_reference:
          type: string
          description: Version of the ETL script used. e.g. link to the Git release
        source_release_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the data was extracted from the source system. In some systems that is the same as the date the ETL was run. Typically the latest even date in the source is on the source_release_date.
        cdm_release_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date the ETL script was completed. Typically this is after the source_release_date.
        cdm_version:
          type: string
          description: Version of the OMOP CDM used as string. e.g. v5.4
        cdm_version_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: "The Concept Id representing the version of the CDM. ETL Convention: You can find all concepts that represent the CDM versions using the query: `SELECT * FROM CONCEPT WHERE VOCABULARY_ID = 'CDM' AND CONCEPT_CLASS = 'CDM'` References CONCEPT table."
        vocabulary_version:
          type: string
          description: "Version of the OMOP standardised vocabularies loaded ETL Convention: You can find the version of your Vocabulary using the query: `SELECT vocabulary_version from vocabulary where vocabulary_id = 'None'`"
      description: Request body for updating an existing CdmSource record
    Metadata.Metadata:
      type: object
      required:
        - id
        - metadata_concept_id
        - metadata_type_concept_id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: 'The unique key given to a Metadata record. ETL Convention: Attribute value is auto-generated'
        metadata_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        metadata_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        name:
          type: string
          maxLength: 250
          description: ''
        value_as_string:
          type: string
          maxLength: 250
          description: ''
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        value_as_number:
          type: number
          format: double
          description: This is the numerical value of the result of the Metadata, if applicable and available. It is not expected that all Metadata will have numeric results, rather, this field is here to house values should they exist.
        metadata_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
        metadata_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: ''
      description: Metadata record in the OMOP CDM
      example:
        id: 12345
        metadata_concept_id: 8507
        metadata_type_concept_id: 8507
        name: Example value
        value_as_string: Example value
        value_as_concept_id: 8507
        value_as_number: 98.6
        metadata_date: '2023-01-15'
        metadata_datetime: '2023-01-15'
    Metadata.MetadataCreate:
      type: object
      required:
        - metadata_concept_id
        - metadata_type_concept_id
        - name
      properties:
        metadata_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        metadata_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        name:
          type: string
          maxLength: 250
          description: ''
        value_as_string:
          type: string
          maxLength: 250
          description: ''
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        value_as_number:
          type: number
          format: double
          description: This is the numerical value of the result of the Metadata, if applicable and available. It is not expected that all Metadata will have numeric results, rather, this field is here to house values should they exist.
        metadata_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
        metadata_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: ''
      description: Request body for creating a new Metadata record
    Metadata.MetadataList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Metadata.Metadata'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Metadata records
      example:
        data:
          - id: 12345
            metadata_concept_id: 8507
            metadata_type_concept_id: 8507
            name: Example value
            value_as_string: Example value
            value_as_concept_id: 8507
            value_as_number: 98.6
            metadata_date: '2023-01-15'
            metadata_datetime: '2023-01-15'
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Metadata.MetadataUpdate:
      type: object
      properties:
        metadata_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        metadata_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        name:
          type: string
          description: ''
        value_as_string:
          type: string
          description: ''
        value_as_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        value_as_number:
          type: number
          format: double
          description: This is the numerical value of the result of the Metadata, if applicable and available. It is not expected that all Metadata will have numeric results, rather, this field is here to house values should they exist.
        metadata_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
        metadata_datetime:
          allOf:
            - $ref: '#/components/schemas/Common.DateTime'
          description: ''
      description: Request body for updating an existing Metadata record
    Results.Cohort:
      type: object
      required:
        - cohort_definition_id
        - subject_id
        - cohort_start_date
        - cohort_end_date
      properties:
        cohort_definition_id:
          type: integer
          format: int64
          description: ''
        subject_id:
          type: integer
          format: int64
          description: ''
        cohort_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
        cohort_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
      description: Cohort record in the OMOP CDM
      example:
        cohort_definition_id: 100
        subject_id: 100
        cohort_start_date: '2023-01-15'
        cohort_end_date: '2023-01-15'
    Results.CohortCreate:
      type: object
      required:
        - cohort_definition_id
        - subject_id
        - cohort_start_date
        - cohort_end_date
      properties:
        cohort_definition_id:
          type: integer
          format: int64
          description: ''
        subject_id:
          type: integer
          format: int64
          description: ''
        cohort_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
        cohort_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
      description: Request body for creating a new Cohort record
    Results.CohortDefinition:
      type: object
      required:
        - id
        - cohort_definition_name
        - definition_type_concept_id
        - subject_concept_id
      properties:
        id:
          type: integer
          format: int64
          description: This is the identifier given to the cohort, usually by the ATLAS application
        cohort_definition_name:
          type: string
          maxLength: 255
          description: A short description of the cohort
        cohort_definition_description:
          type: string
          description: A complete description of the cohort.
        definition_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: Type defining what kind of Cohort Definition the record represents and how the syntax may be executed. References CONCEPT table.
        cohort_definition_syntax:
          type: string
          description: Syntax or code to operationalize the Cohort Definition.
        subject_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: This field contains a Concept that represents the domain of the subjects that are members of the cohort (e.g., Person, Provider, Visit). References CONCEPT table.
        cohort_initiation_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: A date to indicate when the Cohort was initiated in the COHORT table.
      description: CohortDefinition record in the OMOP CDM
      example:
        id: 12345
        cohort_definition_name: Example value
        cohort_definition_description: Example value
        definition_type_concept_id: 8507
        cohort_definition_syntax: Example value
        subject_concept_id: 8507
        cohort_initiation_date: '2023-01-15'
    Results.CohortDefinitionCreate:
      type: object
      required:
        - cohort_definition_name
        - definition_type_concept_id
        - subject_concept_id
      properties:
        cohort_definition_name:
          type: string
          maxLength: 255
          description: A short description of the cohort
        cohort_definition_description:
          type: string
          description: A complete description of the cohort.
        definition_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: Type defining what kind of Cohort Definition the record represents and how the syntax may be executed. References CONCEPT table.
        cohort_definition_syntax:
          type: string
          description: Syntax or code to operationalize the Cohort Definition.
        subject_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: This field contains a Concept that represents the domain of the subjects that are members of the cohort (e.g., Person, Provider, Visit). References CONCEPT table.
        cohort_initiation_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: A date to indicate when the Cohort was initiated in the COHORT table.
      description: Request body for creating a new CohortDefinition record
    Results.CohortDefinitionList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Results.CohortDefinition'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of CohortDefinition records
      example:
        data:
          - id: 12345
            cohort_definition_name: Example value
            cohort_definition_description: Example value
            definition_type_concept_id: 8507
            cohort_definition_syntax: Example value
            subject_concept_id: 8507
            cohort_initiation_date: '2023-01-15'
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Results.CohortDefinitionUpdate:
      type: object
      properties:
        cohort_definition_name:
          type: string
          description: A short description of the cohort
        cohort_definition_description:
          type: string
          description: A complete description of the cohort.
        definition_type_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: Type defining what kind of Cohort Definition the record represents and how the syntax may be executed. References CONCEPT table.
        cohort_definition_syntax:
          type: string
          description: Syntax or code to operationalize the Cohort Definition.
        subject_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: This field contains a Concept that represents the domain of the subjects that are members of the cohort (e.g., Person, Provider, Visit). References CONCEPT table.
        cohort_initiation_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: A date to indicate when the Cohort was initiated in the COHORT table.
      description: Request body for updating an existing CohortDefinition record
    Results.CohortList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Results.Cohort'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Cohort records
      example:
        data:
          - cohort_definition_id: 100
            subject_id: 100
            cohort_start_date: '2023-01-15'
            cohort_end_date: '2023-01-15'
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Results.CohortUpdate:
      type: object
      properties:
        cohort_definition_id:
          type: integer
          format: int64
          description: ''
        subject_id:
          type: integer
          format: int64
          description: ''
        cohort_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
        cohort_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: ''
      description: Request body for updating an existing Cohort record
    Results.FactRelationship:
      type: object
      required:
        - relationship_concept_id
      properties:
        relationship_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
      description: FactRelationship record in the OMOP CDM
      example:
        relationship_concept_id: 8507
    Results.FactRelationshipCreate:
      type: object
      required:
        - relationship_concept_id
      properties:
        relationship_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
      description: Request body for creating a new FactRelationship record
    Results.FactRelationshipList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Results.FactRelationship'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of FactRelationship records
      example:
        data:
          - relationship_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Results.FactRelationshipUpdate:
      type: object
      properties:
        relationship_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
      description: Request body for updating an existing FactRelationship record
    Vocabulary.Concept:
      type: object
      required:
        - id
        - concept_name
        - domain_id
        - vocabulary_id
        - concept_class_id
        - concept_code
        - valid_start_date
        - valid_end_date
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A unique identifier for each Concept across all domains.
        concept_name:
          type: string
          maxLength: 255
          description: An unambiguous, meaningful and descriptive name for the Concept.
        domain_id:
          type: string
          maxLength: 20
          description: A foreign key to the [DOMAIN](https://ohdsi.github.io/CommonDataModel/cdm54.html#domain) table the Concept belongs to. References DOMAIN table.
        vocabulary_id:
          type: string
          maxLength: 20
          description: A foreign key to the [VOCABULARY](https://ohdsi.github.io/CommonDataModel/cdm54.html#vocabulary) table indicating from which source the Concept has been adapted. References VOCABULARY table.
        concept_class_id:
          type: string
          maxLength: 20
          description: The attribute or concept class of the Concept. Examples are ‘Clinical Drug’, ‘Ingredient’, ‘Clinical Finding’ etc. References CONCEPT_CLASS table.
        standard_concept:
          type: string
          maxLength: 1
          description: This flag determines where a Concept is a Standard Concept, i.e. is used in the data, a Classification Concept, or a non-standard Source Concept. The allowable values are ‘S’ (Standard Concept) and ‘C’ (Classification Concept), otherwise the content is NULL.
        concept_code:
          type: string
          maxLength: 50
          description: The concept code represents the identifier of the Concept in the source vocabulary, such as SNOMED-CT concept IDs, RxNorm RXCUIs etc. Note that concept codes are not unique across vocabularies.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept was first recorded. The default value is 1-Jan-1970, meaning, the Concept has no (known) date of inception.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept became invalid because it was deleted or superseded (updated) by a new concept. The default value is 31-Dec-2099, meaning, the Concept is valid until it becomes deprecated.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the Concept was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Concept record in the OMOP CDM
      example:
        id: 12345
        concept_name: Example value
        domain_id: Example value
        vocabulary_id: Example value
        concept_class_id: Example value
        standard_concept: Example value
        concept_code: Example value
        valid_start_date: '2023-01-15'
        valid_end_date: '2023-01-15'
        invalid_reason: Example value
    Vocabulary.ConceptAncestor:
      type: object
      required:
        - ancestor_concept_id
        - descendant_concept_id
        - min_levels_of_separation
        - max_levels_of_separation
      properties:
        ancestor_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id for the higher-level concept that forms the ancestor in the relationship. References CONCEPT table.
        descendant_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id for the lower-level concept that forms the descendant in the relationship. References CONCEPT table.
        min_levels_of_separation:
          type: integer
          format: int64
          description: The minimum separation in number of levels of hierarchy between ancestor and descendant concepts. This is an attribute that is used to simplify hierarchic analysis.
        max_levels_of_separation:
          type: integer
          format: int64
          description: The maximum separation in number of levels of hierarchy between ancestor and descendant concepts. This is an attribute that is used to simplify hierarchic analysis.
      description: ConceptAncestor record in the OMOP CDM
      example:
        ancestor_concept_id: 8507
        descendant_concept_id: 8507
        min_levels_of_separation: 100
        max_levels_of_separation: 100
    Vocabulary.ConceptAncestorCreate:
      type: object
      required:
        - ancestor_concept_id
        - descendant_concept_id
        - min_levels_of_separation
        - max_levels_of_separation
      properties:
        ancestor_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id for the higher-level concept that forms the ancestor in the relationship. References CONCEPT table.
        descendant_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id for the lower-level concept that forms the descendant in the relationship. References CONCEPT table.
        min_levels_of_separation:
          type: integer
          format: int64
          description: The minimum separation in number of levels of hierarchy between ancestor and descendant concepts. This is an attribute that is used to simplify hierarchic analysis.
        max_levels_of_separation:
          type: integer
          format: int64
          description: The maximum separation in number of levels of hierarchy between ancestor and descendant concepts. This is an attribute that is used to simplify hierarchic analysis.
      description: Request body for creating a new ConceptAncestor record
    Vocabulary.ConceptAncestorList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.ConceptAncestor'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ConceptAncestor records
      example:
        data:
          - ancestor_concept_id: 8507
            descendant_concept_id: 8507
            min_levels_of_separation: 100
            max_levels_of_separation: 100
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.ConceptAncestorUpdate:
      type: object
      properties:
        ancestor_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id for the higher-level concept that forms the ancestor in the relationship. References CONCEPT table.
        descendant_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept Id for the lower-level concept that forms the descendant in the relationship. References CONCEPT table.
        min_levels_of_separation:
          type: integer
          format: int64
          description: The minimum separation in number of levels of hierarchy between ancestor and descendant concepts. This is an attribute that is used to simplify hierarchic analysis.
        max_levels_of_separation:
          type: integer
          format: int64
          description: The maximum separation in number of levels of hierarchy between ancestor and descendant concepts. This is an attribute that is used to simplify hierarchic analysis.
      description: Request body for updating an existing ConceptAncestor record
    Vocabulary.ConceptClass:
      type: object
      required:
        - id
        - concept_class_name
        - concept_class_concept_id
      properties:
        id:
          type: string
          maxLength: 20
          description: A unique key for each class.
        concept_class_name:
          type: string
          maxLength: 255
          description: The name describing the Concept Class, e.g. Clinical Finding, Ingredient, etc.
        concept_class_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept that represents the Concept Class. References CONCEPT table.
      description: ConceptClass record in the OMOP CDM
      example:
        id: '12345'
        concept_class_name: Example value
        concept_class_concept_id: 8507
    Vocabulary.ConceptClassCreate:
      type: object
      required:
        - concept_class_name
        - concept_class_concept_id
      properties:
        concept_class_name:
          type: string
          maxLength: 255
          description: The name describing the Concept Class, e.g. Clinical Finding, Ingredient, etc.
        concept_class_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept that represents the Concept Class. References CONCEPT table.
      description: Request body for creating a new ConceptClass record
    Vocabulary.ConceptClassList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.ConceptClass'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ConceptClass records
      example:
        data:
          - id: '12345'
            concept_class_name: Example value
            concept_class_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.ConceptClassUpdate:
      type: object
      properties:
        concept_class_name:
          type: string
          description: The name describing the Concept Class, e.g. Clinical Finding, Ingredient, etc.
        concept_class_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept that represents the Concept Class. References CONCEPT table.
      description: Request body for updating an existing ConceptClass record
    Vocabulary.ConceptCreate:
      type: object
      required:
        - concept_name
        - domain_id
        - vocabulary_id
        - concept_class_id
        - concept_code
        - valid_start_date
        - valid_end_date
      properties:
        concept_name:
          type: string
          maxLength: 255
          description: An unambiguous, meaningful and descriptive name for the Concept.
        domain_id:
          type: string
          maxLength: 20
          description: A foreign key to the [DOMAIN](https://ohdsi.github.io/CommonDataModel/cdm54.html#domain) table the Concept belongs to. References DOMAIN table.
        vocabulary_id:
          type: string
          maxLength: 20
          description: A foreign key to the [VOCABULARY](https://ohdsi.github.io/CommonDataModel/cdm54.html#vocabulary) table indicating from which source the Concept has been adapted. References VOCABULARY table.
        concept_class_id:
          type: string
          maxLength: 20
          description: The attribute or concept class of the Concept. Examples are ‘Clinical Drug’, ‘Ingredient’, ‘Clinical Finding’ etc. References CONCEPT_CLASS table.
        standard_concept:
          type: string
          maxLength: 1
          description: This flag determines where a Concept is a Standard Concept, i.e. is used in the data, a Classification Concept, or a non-standard Source Concept. The allowable values are ‘S’ (Standard Concept) and ‘C’ (Classification Concept), otherwise the content is NULL.
        concept_code:
          type: string
          maxLength: 50
          description: The concept code represents the identifier of the Concept in the source vocabulary, such as SNOMED-CT concept IDs, RxNorm RXCUIs etc. Note that concept codes are not unique across vocabularies.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept was first recorded. The default value is 1-Jan-1970, meaning, the Concept has no (known) date of inception.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept became invalid because it was deleted or superseded (updated) by a new concept. The default value is 31-Dec-2099, meaning, the Concept is valid until it becomes deprecated.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the Concept was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Request body for creating a new Concept record
    Vocabulary.ConceptList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.Concept'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Concept records
      example:
        data:
          - id: 12345
            concept_name: Example value
            domain_id: Example value
            vocabulary_id: Example value
            concept_class_id: Example value
            standard_concept: Example value
            concept_code: Example value
            valid_start_date: '2023-01-15'
            valid_end_date: '2023-01-15'
            invalid_reason: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.ConceptRelationship:
      type: object
      required:
        - relationship_id
        - valid_start_date
        - valid_end_date
      properties:
        relationship_id:
          type: string
          maxLength: 20
          description: The relationship between CONCEPT_ID_1 and CONCEPT_ID_2. Please see the [Vocabulary Conventions](https://ohdsi.github.io/CommonDataModel/dataModelConventions.html#concept_relationships). for more information. References RELATIONSHIP table.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the relationship is first recorded.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the relationship is invalidated.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the relationship was invalidated. Possible values are ‘D’ (deleted), ‘U’ (updated) or NULL.
      description: ConceptRelationship record in the OMOP CDM
      example:
        relationship_id: Example value
        valid_start_date: '2023-01-15'
        valid_end_date: '2023-01-15'
        invalid_reason: Example value
    Vocabulary.ConceptRelationshipCreate:
      type: object
      required:
        - relationship_id
        - valid_start_date
        - valid_end_date
      properties:
        relationship_id:
          type: string
          maxLength: 20
          description: The relationship between CONCEPT_ID_1 and CONCEPT_ID_2. Please see the [Vocabulary Conventions](https://ohdsi.github.io/CommonDataModel/dataModelConventions.html#concept_relationships). for more information. References RELATIONSHIP table.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the relationship is first recorded.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the relationship is invalidated.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the relationship was invalidated. Possible values are ‘D’ (deleted), ‘U’ (updated) or NULL.
      description: Request body for creating a new ConceptRelationship record
    Vocabulary.ConceptRelationshipList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.ConceptRelationship'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ConceptRelationship records
      example:
        data:
          - relationship_id: Example value
            valid_start_date: '2023-01-15'
            valid_end_date: '2023-01-15'
            invalid_reason: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.ConceptRelationshipUpdate:
      type: object
      properties:
        relationship_id:
          type: string
          description: The relationship between CONCEPT_ID_1 and CONCEPT_ID_2. Please see the [Vocabulary Conventions](https://ohdsi.github.io/CommonDataModel/dataModelConventions.html#concept_relationships). for more information. References RELATIONSHIP table.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the relationship is first recorded.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the relationship is invalidated.
        invalid_reason:
          type: string
          description: Reason the relationship was invalidated. Possible values are ‘D’ (deleted), ‘U’ (updated) or NULL.
      description: Request body for updating an existing ConceptRelationship record
    Vocabulary.ConceptSynonym:
      type: object
      required:
        - concept_id
        - concept_synonym_name
        - language_concept_id
      properties:
        concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        concept_synonym_name:
          type: string
          maxLength: 1000
          description: ''
        language_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
      description: ConceptSynonym record in the OMOP CDM
      example:
        concept_id: 8507
        concept_synonym_name: Example value
        language_concept_id: 8507
    Vocabulary.ConceptSynonymCreate:
      type: object
      required:
        - concept_id
        - concept_synonym_name
        - language_concept_id
      properties:
        concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        concept_synonym_name:
          type: string
          maxLength: 1000
          description: ''
        language_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
      description: Request body for creating a new ConceptSynonym record
    Vocabulary.ConceptSynonymList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.ConceptSynonym'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of ConceptSynonym records
      example:
        data:
          - concept_id: 8507
            concept_synonym_name: Example value
            language_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.ConceptSynonymUpdate:
      type: object
      properties:
        concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
        concept_synonym_name:
          type: string
          description: ''
        language_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: References CONCEPT table.
      description: Request body for updating an existing ConceptSynonym record
    Vocabulary.ConceptUpdate:
      type: object
      properties:
        concept_name:
          type: string
          description: An unambiguous, meaningful and descriptive name for the Concept.
        domain_id:
          type: string
          description: A foreign key to the [DOMAIN](https://ohdsi.github.io/CommonDataModel/cdm54.html#domain) table the Concept belongs to. References DOMAIN table.
        vocabulary_id:
          type: string
          description: A foreign key to the [VOCABULARY](https://ohdsi.github.io/CommonDataModel/cdm54.html#vocabulary) table indicating from which source the Concept has been adapted. References VOCABULARY table.
        concept_class_id:
          type: string
          description: The attribute or concept class of the Concept. Examples are ‘Clinical Drug’, ‘Ingredient’, ‘Clinical Finding’ etc. References CONCEPT_CLASS table.
        standard_concept:
          type: string
          description: This flag determines where a Concept is a Standard Concept, i.e. is used in the data, a Classification Concept, or a non-standard Source Concept. The allowable values are ‘S’ (Standard Concept) and ‘C’ (Classification Concept), otherwise the content is NULL.
        concept_code:
          type: string
          description: The concept code represents the identifier of the Concept in the source vocabulary, such as SNOMED-CT concept IDs, RxNorm RXCUIs etc. Note that concept codes are not unique across vocabularies.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept was first recorded. The default value is 1-Jan-1970, meaning, the Concept has no (known) date of inception.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept became invalid because it was deleted or superseded (updated) by a new concept. The default value is 31-Dec-2099, meaning, the Concept is valid until it becomes deprecated.
        invalid_reason:
          type: string
          description: Reason the Concept was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Request body for updating an existing Concept record
    Vocabulary.Domain:
      type: object
      required:
        - id
        - domain_name
        - domain_concept_id
      properties:
        id:
          type: string
          maxLength: 20
          description: A unique key for each domain.
        domain_name:
          type: string
          maxLength: 255
          description: The name describing the Domain, e.g. Condition, Procedure, Measurement etc.
        domain_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept representing the Domain Concept the DOMAIN record belongs to. References CONCEPT table.
      description: Domain record in the OMOP CDM
      example:
        id: '12345'
        domain_name: Example value
        domain_concept_id: 8507
    Vocabulary.DomainCreate:
      type: object
      required:
        - domain_name
        - domain_concept_id
      properties:
        domain_name:
          type: string
          maxLength: 255
          description: The name describing the Domain, e.g. Condition, Procedure, Measurement etc.
        domain_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept representing the Domain Concept the DOMAIN record belongs to. References CONCEPT table.
      description: Request body for creating a new Domain record
    Vocabulary.DomainList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.Domain'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Domain records
      example:
        data:
          - id: '12345'
            domain_name: Example value
            domain_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.DomainUpdate:
      type: object
      properties:
        domain_name:
          type: string
          description: The name describing the Domain, e.g. Condition, Procedure, Measurement etc.
        domain_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept representing the Domain Concept the DOMAIN record belongs to. References CONCEPT table.
      description: Request body for updating an existing Domain record
    Vocabulary.DrugStrength:
      type: object
      required:
        - drug_concept_id
        - ingredient_concept_id
        - valid_start_date
        - valid_end_date
      properties:
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Branded Drug or Clinical Drug Product. References CONCEPT table.
        ingredient_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The Concept representing the active ingredient contained within the drug product. ETL Convention: Combination Drugs will have more than one record in this table, one for each active Ingredient. References CONCEPT table.'
        amount_value:
          type: number
          format: double
          description: The numeric value or the amount of active ingredient contained within the drug product.
        amount_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Unit of measure for the amount of active ingredient contained within the drug product. References CONCEPT table.
        numerator_value:
          type: number
          format: double
          description: The concentration of the active ingredient contained within the drug product.
        numerator_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Unit of measure for the concentration of active ingredient. References CONCEPT table.
        denominator_value:
          type: number
          format: double
          description: The amount of total liquid (or other divisible product, such as ointment, gel, spray, etc.).
        denominator_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the denominator unit for the concentration of active ingredient. References CONCEPT table.
        box_size:
          type: integer
          format: int64
          description: The number of units of Clinical Branded Drug or Quantified Clinical or Branded Drug contained in a box as dispensed to the patient.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept was first recorded. The default value is 1-Jan-1970.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when then Concept became invalid.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the concept was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: DrugStrength record in the OMOP CDM
      example:
        drug_concept_id: 8507
        ingredient_concept_id: 8507
        amount_value: 98.6
        amount_unit_concept_id: 8507
        numerator_value: 98.6
        numerator_unit_concept_id: 8507
        denominator_value: 98.6
        denominator_unit_concept_id: 8507
        box_size: 100
        valid_start_date: '2023-01-15'
        valid_end_date: '2023-01-15'
        invalid_reason: Example value
    Vocabulary.DrugStrengthCreate:
      type: object
      required:
        - drug_concept_id
        - ingredient_concept_id
        - valid_start_date
        - valid_end_date
      properties:
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Branded Drug or Clinical Drug Product. References CONCEPT table.
        ingredient_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The Concept representing the active ingredient contained within the drug product. ETL Convention: Combination Drugs will have more than one record in this table, one for each active Ingredient. References CONCEPT table.'
        amount_value:
          type: number
          format: double
          description: The numeric value or the amount of active ingredient contained within the drug product.
        amount_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Unit of measure for the amount of active ingredient contained within the drug product. References CONCEPT table.
        numerator_value:
          type: number
          format: double
          description: The concentration of the active ingredient contained within the drug product.
        numerator_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Unit of measure for the concentration of active ingredient. References CONCEPT table.
        denominator_value:
          type: number
          format: double
          description: The amount of total liquid (or other divisible product, such as ointment, gel, spray, etc.).
        denominator_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the denominator unit for the concentration of active ingredient. References CONCEPT table.
        box_size:
          type: integer
          format: int64
          description: The number of units of Clinical Branded Drug or Quantified Clinical or Branded Drug contained in a box as dispensed to the patient.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept was first recorded. The default value is 1-Jan-1970.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when then Concept became invalid.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the concept was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Request body for creating a new DrugStrength record
    Vocabulary.DrugStrengthList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.DrugStrength'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of DrugStrength records
      example:
        data:
          - drug_concept_id: 8507
            ingredient_concept_id: 8507
            amount_value: 98.6
            amount_unit_concept_id: 8507
            numerator_value: 98.6
            numerator_unit_concept_id: 8507
            denominator_value: 98.6
            denominator_unit_concept_id: 8507
            box_size: 100
            valid_start_date: '2023-01-15'
            valid_end_date: '2023-01-15'
            invalid_reason: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.DrugStrengthUpdate:
      type: object
      properties:
        drug_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Branded Drug or Clinical Drug Product. References CONCEPT table.
        ingredient_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'The Concept representing the active ingredient contained within the drug product. ETL Convention: Combination Drugs will have more than one record in this table, one for each active Ingredient. References CONCEPT table.'
        amount_value:
          type: number
          format: double
          description: The numeric value or the amount of active ingredient contained within the drug product.
        amount_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Unit of measure for the amount of active ingredient contained within the drug product. References CONCEPT table.
        numerator_value:
          type: number
          format: double
          description: The concentration of the active ingredient contained within the drug product.
        numerator_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the Unit of measure for the concentration of active ingredient. References CONCEPT table.
        denominator_value:
          type: number
          format: double
          description: The amount of total liquid (or other divisible product, such as ointment, gel, spray, etc.).
        denominator_unit_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The Concept representing the denominator unit for the concentration of active ingredient. References CONCEPT table.
        box_size:
          type: integer
          format: int64
          description: The number of units of Clinical Branded Drug or Quantified Clinical or Branded Drug contained in a box as dispensed to the patient.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the Concept was first recorded. The default value is 1-Jan-1970.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when then Concept became invalid.
        invalid_reason:
          type: string
          description: Reason the concept was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Request body for updating an existing DrugStrength record
    Vocabulary.Relationship:
      type: object
      required:
        - id
        - relationship_name
        - is_hierarchical
        - defines_ancestry
        - reverse_relationship_id
        - relationship_concept_id
      properties:
        id:
          type: string
          maxLength: 20
          description: The type of relationship captured by the relationship record.
        relationship_name:
          type: string
          maxLength: 255
          description: ''
        is_hierarchical:
          type: string
          maxLength: 1
          description: Defines whether a relationship defines concepts into classes or hierarchies. Values are 1 for hierarchical relationship or 0 if not.
        defines_ancestry:
          type: string
          maxLength: 1
          description: Defines whether a hierarchical relationship contributes to the concept_ancestor table. These are subsets of the hierarchical relationships. Valid values are 1 or 0.
        reverse_relationship_id:
          type: string
          maxLength: 20
          description: The identifier for the relationship used to define the reverse relationship between two concepts.
        relationship_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A foreign key that refers to an identifier in the [CONCEPT](https://ohdsi.github.io/CommonDataModel/cdm54.html#concept) table for the unique relationship concept. References CONCEPT table.
      description: Relationship record in the OMOP CDM
      example:
        id: '12345'
        relationship_name: Example value
        is_hierarchical: Example value
        defines_ancestry: Example value
        reverse_relationship_id: Example value
        relationship_concept_id: 8507
    Vocabulary.RelationshipCreate:
      type: object
      required:
        - relationship_name
        - is_hierarchical
        - defines_ancestry
        - reverse_relationship_id
        - relationship_concept_id
      properties:
        relationship_name:
          type: string
          maxLength: 255
          description: ''
        is_hierarchical:
          type: string
          maxLength: 1
          description: Defines whether a relationship defines concepts into classes or hierarchies. Values are 1 for hierarchical relationship or 0 if not.
        defines_ancestry:
          type: string
          maxLength: 1
          description: Defines whether a hierarchical relationship contributes to the concept_ancestor table. These are subsets of the hierarchical relationships. Valid values are 1 or 0.
        reverse_relationship_id:
          type: string
          maxLength: 20
          description: The identifier for the relationship used to define the reverse relationship between two concepts.
        relationship_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A foreign key that refers to an identifier in the [CONCEPT](https://ohdsi.github.io/CommonDataModel/cdm54.html#concept) table for the unique relationship concept. References CONCEPT table.
      description: Request body for creating a new Relationship record
    Vocabulary.RelationshipList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.Relationship'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Relationship records
      example:
        data:
          - id: '12345'
            relationship_name: Example value
            is_hierarchical: Example value
            defines_ancestry: Example value
            reverse_relationship_id: Example value
            relationship_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.RelationshipUpdate:
      type: object
      properties:
        relationship_name:
          type: string
          description: ''
        is_hierarchical:
          type: string
          description: Defines whether a relationship defines concepts into classes or hierarchies. Values are 1 for hierarchical relationship or 0 if not.
        defines_ancestry:
          type: string
          description: Defines whether a hierarchical relationship contributes to the concept_ancestor table. These are subsets of the hierarchical relationships. Valid values are 1 or 0.
        reverse_relationship_id:
          type: string
          description: The identifier for the relationship used to define the reverse relationship between two concepts.
        relationship_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A foreign key that refers to an identifier in the [CONCEPT](https://ohdsi.github.io/CommonDataModel/cdm54.html#concept) table for the unique relationship concept. References CONCEPT table.
      description: Request body for updating an existing Relationship record
    Vocabulary.SourceToConceptMap:
      type: object
      required:
        - source_code
        - source_concept_id
        - source_vocabulary_id
        - target_concept_id
        - target_vocabulary_id
        - valid_start_date
        - valid_end_date
      properties:
        source_code:
          type: string
          maxLength: 50
          description: The source code being translated into a Standard Concept.
        source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A foreign key to the Source Concept that is being translated into a Standard Concept. ETL Convention: This is either 0 or should be a number above 2 billion, which are the Concepts reserved for site-specific codes and mappings. References CONCEPT table.'
        source_vocabulary_id:
          type: string
          maxLength: 20
          description: A foreign key to the VOCABULARY table defining the vocabulary of the source code that is being translated to a Standard Concept.
        source_code_description:
          type: string
          maxLength: 255
          description: An optional description for the source code. This is included as a convenience to compare the description of the source code to the name of the concept.
        target_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The target Concept to which the source code is being mapped. References CONCEPT table.
        target_vocabulary_id:
          type: string
          maxLength: 20
          description: The Vocabulary of the target Concept. References VOCABULARY table.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the mapping instance was first recorded.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the mapping instance became invalid because it was deleted or superseded (updated) by a new relationship. Default value is 31-Dec-2099.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the mapping instance was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: SourceToConceptMap record in the OMOP CDM
      example:
        source_code: Example value
        source_concept_id: 8507
        source_vocabulary_id: Example value
        source_code_description: Example value
        target_concept_id: 8507
        target_vocabulary_id: Example value
        valid_start_date: '2023-01-15'
        valid_end_date: '2023-01-15'
        invalid_reason: Example value
    Vocabulary.SourceToConceptMapCreate:
      type: object
      required:
        - source_code
        - source_concept_id
        - source_vocabulary_id
        - target_concept_id
        - target_vocabulary_id
        - valid_start_date
        - valid_end_date
      properties:
        source_code:
          type: string
          maxLength: 50
          description: The source code being translated into a Standard Concept.
        source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A foreign key to the Source Concept that is being translated into a Standard Concept. ETL Convention: This is either 0 or should be a number above 2 billion, which are the Concepts reserved for site-specific codes and mappings. References CONCEPT table.'
        source_vocabulary_id:
          type: string
          maxLength: 20
          description: A foreign key to the VOCABULARY table defining the vocabulary of the source code that is being translated to a Standard Concept.
        source_code_description:
          type: string
          maxLength: 255
          description: An optional description for the source code. This is included as a convenience to compare the description of the source code to the name of the concept.
        target_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The target Concept to which the source code is being mapped. References CONCEPT table.
        target_vocabulary_id:
          type: string
          maxLength: 20
          description: The Vocabulary of the target Concept. References VOCABULARY table.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the mapping instance was first recorded.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the mapping instance became invalid because it was deleted or superseded (updated) by a new relationship. Default value is 31-Dec-2099.
        invalid_reason:
          type: string
          maxLength: 1
          description: Reason the mapping instance was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Request body for creating a new SourceToConceptMap record
    Vocabulary.SourceToConceptMapList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.SourceToConceptMap'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of SourceToConceptMap records
      example:
        data:
          - source_code: Example value
            source_concept_id: 8507
            source_vocabulary_id: Example value
            source_code_description: Example value
            target_concept_id: 8507
            target_vocabulary_id: Example value
            valid_start_date: '2023-01-15'
            valid_end_date: '2023-01-15'
            invalid_reason: Example value
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.SourceToConceptMapUpdate:
      type: object
      properties:
        source_code:
          type: string
          description: The source code being translated into a Standard Concept.
        source_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: 'A foreign key to the Source Concept that is being translated into a Standard Concept. ETL Convention: This is either 0 or should be a number above 2 billion, which are the Concepts reserved for site-specific codes and mappings. References CONCEPT table.'
        source_vocabulary_id:
          type: string
          description: A foreign key to the VOCABULARY table defining the vocabulary of the source code that is being translated to a Standard Concept.
        source_code_description:
          type: string
          description: An optional description for the source code. This is included as a convenience to compare the description of the source code to the name of the concept.
        target_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: The target Concept to which the source code is being mapped. References CONCEPT table.
        target_vocabulary_id:
          type: string
          description: The Vocabulary of the target Concept. References VOCABULARY table.
        valid_start_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the mapping instance was first recorded.
        valid_end_date:
          allOf:
            - $ref: '#/components/schemas/Common.DateOnly'
          description: The date when the mapping instance became invalid because it was deleted or superseded (updated) by a new relationship. Default value is 31-Dec-2099.
        invalid_reason:
          type: string
          description: Reason the mapping instance was invalidated. Possible values are D (deleted), U (replaced with an update) or NULL when valid_end_date has the default value.
      description: Request body for updating an existing SourceToConceptMap record
    Vocabulary.Vocabulary:
      type: object
      required:
        - id
        - vocabulary_name
        - vocabulary_concept_id
      properties:
        id:
          type: string
          maxLength: 20
          description: A unique identifier for each Vocabulary, such as ICD9CM, SNOMED, Visit.
        vocabulary_name:
          type: string
          maxLength: 255
          description: The name describing the vocabulary, for example, International Classification of Diseases, Ninth Revision, Clinical Modification, Volume 1 and 2 (NCHS) etc.
        vocabulary_reference:
          type: string
          maxLength: 255
          description: External reference to documentation or available download of the about the vocabulary.
        vocabulary_version:
          type: string
          maxLength: 255
          description: Version of the Vocabulary as indicated in the source.
        vocabulary_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept that represents the Vocabulary the VOCABULARY record belongs to. References CONCEPT table.
      description: Vocabulary record in the OMOP CDM
      example:
        id: '12345'
        vocabulary_name: Example value
        vocabulary_reference: Example value
        vocabulary_version: Example value
        vocabulary_concept_id: 8507
    Vocabulary.VocabularyCreate:
      type: object
      required:
        - vocabulary_name
        - vocabulary_concept_id
      properties:
        vocabulary_name:
          type: string
          maxLength: 255
          description: The name describing the vocabulary, for example, International Classification of Diseases, Ninth Revision, Clinical Modification, Volume 1 and 2 (NCHS) etc.
        vocabulary_reference:
          type: string
          maxLength: 255
          description: External reference to documentation or available download of the about the vocabulary.
        vocabulary_version:
          type: string
          maxLength: 255
          description: Version of the Vocabulary as indicated in the source.
        vocabulary_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept that represents the Vocabulary the VOCABULARY record belongs to. References CONCEPT table.
      description: Request body for creating a new Vocabulary record
    Vocabulary.VocabularyList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary.Vocabulary'
          description: Array of items
        pagination:
          allOf:
            - $ref: '#/components/schemas/Common.PaginationInfo'
          description: Pagination information
      description: Paginated list of Vocabulary records
      example:
        data:
          - id: '12345'
            vocabulary_name: Example value
            vocabulary_reference: Example value
            vocabulary_version: Example value
            vocabulary_concept_id: 8507
        pagination:
          total: 1
          offset: 0
          limit: 100
          count: 1
    Vocabulary.VocabularyUpdate:
      type: object
      properties:
        vocabulary_name:
          type: string
          description: The name describing the vocabulary, for example, International Classification of Diseases, Ninth Revision, Clinical Modification, Volume 1 and 2 (NCHS) etc.
        vocabulary_reference:
          type: string
          description: External reference to documentation or available download of the about the vocabulary.
        vocabulary_version:
          type: string
          description: Version of the Vocabulary as indicated in the source.
        vocabulary_concept_id:
          allOf:
            - $ref: '#/components/schemas/Common.ConceptId'
          description: A Concept that represents the Vocabulary the VOCABULARY record belongs to. References CONCEPT table.
      description: Request body for updating an existing Vocabulary record
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
servers:
  - url: https://api.example.com
    description: Production server
    variables: {}
